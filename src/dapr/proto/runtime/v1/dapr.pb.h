// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dapr/proto/runtime/v1/dapr.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "dapr/proto/common/v1/common.pb.h"
#include "dapr/proto/runtime/v1/appcallback.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[130]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
namespace dapr {
namespace proto {
namespace runtime {
namespace v1 {
class ActiveActorsCount;
class ActiveActorsCountDefaultTypeInternal;
extern ActiveActorsCountDefaultTypeInternal _ActiveActorsCount_default_instance_;
class ActorRuntime;
class ActorRuntimeDefaultTypeInternal;
extern ActorRuntimeDefaultTypeInternal _ActorRuntime_default_instance_;
class AppConnectionHealthProperties;
class AppConnectionHealthPropertiesDefaultTypeInternal;
extern AppConnectionHealthPropertiesDefaultTypeInternal _AppConnectionHealthProperties_default_instance_;
class AppConnectionProperties;
class AppConnectionPropertiesDefaultTypeInternal;
extern AppConnectionPropertiesDefaultTypeInternal _AppConnectionProperties_default_instance_;
class BulkPublishRequest;
class BulkPublishRequestDefaultTypeInternal;
extern BulkPublishRequestDefaultTypeInternal _BulkPublishRequest_default_instance_;
class BulkPublishRequestEntry;
class BulkPublishRequestEntryDefaultTypeInternal;
extern BulkPublishRequestEntryDefaultTypeInternal _BulkPublishRequestEntry_default_instance_;
class BulkPublishRequestEntry_MetadataEntry_DoNotUse;
class BulkPublishRequestEntry_MetadataEntry_DoNotUseDefaultTypeInternal;
extern BulkPublishRequestEntry_MetadataEntry_DoNotUseDefaultTypeInternal _BulkPublishRequestEntry_MetadataEntry_DoNotUse_default_instance_;
class BulkPublishRequest_MetadataEntry_DoNotUse;
class BulkPublishRequest_MetadataEntry_DoNotUseDefaultTypeInternal;
extern BulkPublishRequest_MetadataEntry_DoNotUseDefaultTypeInternal _BulkPublishRequest_MetadataEntry_DoNotUse_default_instance_;
class BulkPublishResponse;
class BulkPublishResponseDefaultTypeInternal;
extern BulkPublishResponseDefaultTypeInternal _BulkPublishResponse_default_instance_;
class BulkPublishResponseFailedEntry;
class BulkPublishResponseFailedEntryDefaultTypeInternal;
extern BulkPublishResponseFailedEntryDefaultTypeInternal _BulkPublishResponseFailedEntry_default_instance_;
class BulkStateItem;
class BulkStateItemDefaultTypeInternal;
extern BulkStateItemDefaultTypeInternal _BulkStateItem_default_instance_;
class BulkStateItem_MetadataEntry_DoNotUse;
class BulkStateItem_MetadataEntry_DoNotUseDefaultTypeInternal;
extern BulkStateItem_MetadataEntry_DoNotUseDefaultTypeInternal _BulkStateItem_MetadataEntry_DoNotUse_default_instance_;
class DecryptRequest;
class DecryptRequestDefaultTypeInternal;
extern DecryptRequestDefaultTypeInternal _DecryptRequest_default_instance_;
class DecryptRequestOptions;
class DecryptRequestOptionsDefaultTypeInternal;
extern DecryptRequestOptionsDefaultTypeInternal _DecryptRequestOptions_default_instance_;
class DecryptResponse;
class DecryptResponseDefaultTypeInternal;
extern DecryptResponseDefaultTypeInternal _DecryptResponse_default_instance_;
class DeleteBulkStateRequest;
class DeleteBulkStateRequestDefaultTypeInternal;
extern DeleteBulkStateRequestDefaultTypeInternal _DeleteBulkStateRequest_default_instance_;
class DeleteJobRequest;
class DeleteJobRequestDefaultTypeInternal;
extern DeleteJobRequestDefaultTypeInternal _DeleteJobRequest_default_instance_;
class DeleteJobResponse;
class DeleteJobResponseDefaultTypeInternal;
extern DeleteJobResponseDefaultTypeInternal _DeleteJobResponse_default_instance_;
class DeleteStateRequest;
class DeleteStateRequestDefaultTypeInternal;
extern DeleteStateRequestDefaultTypeInternal _DeleteStateRequest_default_instance_;
class DeleteStateRequest_MetadataEntry_DoNotUse;
class DeleteStateRequest_MetadataEntry_DoNotUseDefaultTypeInternal;
extern DeleteStateRequest_MetadataEntry_DoNotUseDefaultTypeInternal _DeleteStateRequest_MetadataEntry_DoNotUse_default_instance_;
class EncryptRequest;
class EncryptRequestDefaultTypeInternal;
extern EncryptRequestDefaultTypeInternal _EncryptRequest_default_instance_;
class EncryptRequestOptions;
class EncryptRequestOptionsDefaultTypeInternal;
extern EncryptRequestOptionsDefaultTypeInternal _EncryptRequestOptions_default_instance_;
class EncryptResponse;
class EncryptResponseDefaultTypeInternal;
extern EncryptResponseDefaultTypeInternal _EncryptResponse_default_instance_;
class ExecuteActorStateTransactionRequest;
class ExecuteActorStateTransactionRequestDefaultTypeInternal;
extern ExecuteActorStateTransactionRequestDefaultTypeInternal _ExecuteActorStateTransactionRequest_default_instance_;
class ExecuteStateTransactionRequest;
class ExecuteStateTransactionRequestDefaultTypeInternal;
extern ExecuteStateTransactionRequestDefaultTypeInternal _ExecuteStateTransactionRequest_default_instance_;
class ExecuteStateTransactionRequest_MetadataEntry_DoNotUse;
class ExecuteStateTransactionRequest_MetadataEntry_DoNotUseDefaultTypeInternal;
extern ExecuteStateTransactionRequest_MetadataEntry_DoNotUseDefaultTypeInternal _ExecuteStateTransactionRequest_MetadataEntry_DoNotUse_default_instance_;
class GetActorStateRequest;
class GetActorStateRequestDefaultTypeInternal;
extern GetActorStateRequestDefaultTypeInternal _GetActorStateRequest_default_instance_;
class GetActorStateResponse;
class GetActorStateResponseDefaultTypeInternal;
extern GetActorStateResponseDefaultTypeInternal _GetActorStateResponse_default_instance_;
class GetActorStateResponse_MetadataEntry_DoNotUse;
class GetActorStateResponse_MetadataEntry_DoNotUseDefaultTypeInternal;
extern GetActorStateResponse_MetadataEntry_DoNotUseDefaultTypeInternal _GetActorStateResponse_MetadataEntry_DoNotUse_default_instance_;
class GetBulkSecretRequest;
class GetBulkSecretRequestDefaultTypeInternal;
extern GetBulkSecretRequestDefaultTypeInternal _GetBulkSecretRequest_default_instance_;
class GetBulkSecretRequest_MetadataEntry_DoNotUse;
class GetBulkSecretRequest_MetadataEntry_DoNotUseDefaultTypeInternal;
extern GetBulkSecretRequest_MetadataEntry_DoNotUseDefaultTypeInternal _GetBulkSecretRequest_MetadataEntry_DoNotUse_default_instance_;
class GetBulkSecretResponse;
class GetBulkSecretResponseDefaultTypeInternal;
extern GetBulkSecretResponseDefaultTypeInternal _GetBulkSecretResponse_default_instance_;
class GetBulkSecretResponse_DataEntry_DoNotUse;
class GetBulkSecretResponse_DataEntry_DoNotUseDefaultTypeInternal;
extern GetBulkSecretResponse_DataEntry_DoNotUseDefaultTypeInternal _GetBulkSecretResponse_DataEntry_DoNotUse_default_instance_;
class GetBulkStateRequest;
class GetBulkStateRequestDefaultTypeInternal;
extern GetBulkStateRequestDefaultTypeInternal _GetBulkStateRequest_default_instance_;
class GetBulkStateRequest_MetadataEntry_DoNotUse;
class GetBulkStateRequest_MetadataEntry_DoNotUseDefaultTypeInternal;
extern GetBulkStateRequest_MetadataEntry_DoNotUseDefaultTypeInternal _GetBulkStateRequest_MetadataEntry_DoNotUse_default_instance_;
class GetBulkStateResponse;
class GetBulkStateResponseDefaultTypeInternal;
extern GetBulkStateResponseDefaultTypeInternal _GetBulkStateResponse_default_instance_;
class GetConfigurationRequest;
class GetConfigurationRequestDefaultTypeInternal;
extern GetConfigurationRequestDefaultTypeInternal _GetConfigurationRequest_default_instance_;
class GetConfigurationRequest_MetadataEntry_DoNotUse;
class GetConfigurationRequest_MetadataEntry_DoNotUseDefaultTypeInternal;
extern GetConfigurationRequest_MetadataEntry_DoNotUseDefaultTypeInternal _GetConfigurationRequest_MetadataEntry_DoNotUse_default_instance_;
class GetConfigurationResponse;
class GetConfigurationResponseDefaultTypeInternal;
extern GetConfigurationResponseDefaultTypeInternal _GetConfigurationResponse_default_instance_;
class GetConfigurationResponse_ItemsEntry_DoNotUse;
class GetConfigurationResponse_ItemsEntry_DoNotUseDefaultTypeInternal;
extern GetConfigurationResponse_ItemsEntry_DoNotUseDefaultTypeInternal _GetConfigurationResponse_ItemsEntry_DoNotUse_default_instance_;
class GetJobRequest;
class GetJobRequestDefaultTypeInternal;
extern GetJobRequestDefaultTypeInternal _GetJobRequest_default_instance_;
class GetJobResponse;
class GetJobResponseDefaultTypeInternal;
extern GetJobResponseDefaultTypeInternal _GetJobResponse_default_instance_;
class GetMetadataRequest;
class GetMetadataRequestDefaultTypeInternal;
extern GetMetadataRequestDefaultTypeInternal _GetMetadataRequest_default_instance_;
class GetMetadataResponse;
class GetMetadataResponseDefaultTypeInternal;
extern GetMetadataResponseDefaultTypeInternal _GetMetadataResponse_default_instance_;
class GetMetadataResponse_ExtendedMetadataEntry_DoNotUse;
class GetMetadataResponse_ExtendedMetadataEntry_DoNotUseDefaultTypeInternal;
extern GetMetadataResponse_ExtendedMetadataEntry_DoNotUseDefaultTypeInternal _GetMetadataResponse_ExtendedMetadataEntry_DoNotUse_default_instance_;
class GetSecretRequest;
class GetSecretRequestDefaultTypeInternal;
extern GetSecretRequestDefaultTypeInternal _GetSecretRequest_default_instance_;
class GetSecretRequest_MetadataEntry_DoNotUse;
class GetSecretRequest_MetadataEntry_DoNotUseDefaultTypeInternal;
extern GetSecretRequest_MetadataEntry_DoNotUseDefaultTypeInternal _GetSecretRequest_MetadataEntry_DoNotUse_default_instance_;
class GetSecretResponse;
class GetSecretResponseDefaultTypeInternal;
extern GetSecretResponseDefaultTypeInternal _GetSecretResponse_default_instance_;
class GetSecretResponse_DataEntry_DoNotUse;
class GetSecretResponse_DataEntry_DoNotUseDefaultTypeInternal;
extern GetSecretResponse_DataEntry_DoNotUseDefaultTypeInternal _GetSecretResponse_DataEntry_DoNotUse_default_instance_;
class GetStateRequest;
class GetStateRequestDefaultTypeInternal;
extern GetStateRequestDefaultTypeInternal _GetStateRequest_default_instance_;
class GetStateRequest_MetadataEntry_DoNotUse;
class GetStateRequest_MetadataEntry_DoNotUseDefaultTypeInternal;
extern GetStateRequest_MetadataEntry_DoNotUseDefaultTypeInternal _GetStateRequest_MetadataEntry_DoNotUse_default_instance_;
class GetStateResponse;
class GetStateResponseDefaultTypeInternal;
extern GetStateResponseDefaultTypeInternal _GetStateResponse_default_instance_;
class GetStateResponse_MetadataEntry_DoNotUse;
class GetStateResponse_MetadataEntry_DoNotUseDefaultTypeInternal;
extern GetStateResponse_MetadataEntry_DoNotUseDefaultTypeInternal _GetStateResponse_MetadataEntry_DoNotUse_default_instance_;
class GetWorkflowRequest;
class GetWorkflowRequestDefaultTypeInternal;
extern GetWorkflowRequestDefaultTypeInternal _GetWorkflowRequest_default_instance_;
class GetWorkflowResponse;
class GetWorkflowResponseDefaultTypeInternal;
extern GetWorkflowResponseDefaultTypeInternal _GetWorkflowResponse_default_instance_;
class GetWorkflowResponse_PropertiesEntry_DoNotUse;
class GetWorkflowResponse_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern GetWorkflowResponse_PropertiesEntry_DoNotUseDefaultTypeInternal _GetWorkflowResponse_PropertiesEntry_DoNotUse_default_instance_;
class InvokeActorRequest;
class InvokeActorRequestDefaultTypeInternal;
extern InvokeActorRequestDefaultTypeInternal _InvokeActorRequest_default_instance_;
class InvokeActorRequest_MetadataEntry_DoNotUse;
class InvokeActorRequest_MetadataEntry_DoNotUseDefaultTypeInternal;
extern InvokeActorRequest_MetadataEntry_DoNotUseDefaultTypeInternal _InvokeActorRequest_MetadataEntry_DoNotUse_default_instance_;
class InvokeActorResponse;
class InvokeActorResponseDefaultTypeInternal;
extern InvokeActorResponseDefaultTypeInternal _InvokeActorResponse_default_instance_;
class InvokeBindingRequest;
class InvokeBindingRequestDefaultTypeInternal;
extern InvokeBindingRequestDefaultTypeInternal _InvokeBindingRequest_default_instance_;
class InvokeBindingRequest_MetadataEntry_DoNotUse;
class InvokeBindingRequest_MetadataEntry_DoNotUseDefaultTypeInternal;
extern InvokeBindingRequest_MetadataEntry_DoNotUseDefaultTypeInternal _InvokeBindingRequest_MetadataEntry_DoNotUse_default_instance_;
class InvokeBindingResponse;
class InvokeBindingResponseDefaultTypeInternal;
extern InvokeBindingResponseDefaultTypeInternal _InvokeBindingResponse_default_instance_;
class InvokeBindingResponse_MetadataEntry_DoNotUse;
class InvokeBindingResponse_MetadataEntry_DoNotUseDefaultTypeInternal;
extern InvokeBindingResponse_MetadataEntry_DoNotUseDefaultTypeInternal _InvokeBindingResponse_MetadataEntry_DoNotUse_default_instance_;
class InvokeServiceRequest;
class InvokeServiceRequestDefaultTypeInternal;
extern InvokeServiceRequestDefaultTypeInternal _InvokeServiceRequest_default_instance_;
class Job;
class JobDefaultTypeInternal;
extern JobDefaultTypeInternal _Job_default_instance_;
class MetadataHTTPEndpoint;
class MetadataHTTPEndpointDefaultTypeInternal;
extern MetadataHTTPEndpointDefaultTypeInternal _MetadataHTTPEndpoint_default_instance_;
class PauseWorkflowRequest;
class PauseWorkflowRequestDefaultTypeInternal;
extern PauseWorkflowRequestDefaultTypeInternal _PauseWorkflowRequest_default_instance_;
class PublishEventRequest;
class PublishEventRequestDefaultTypeInternal;
extern PublishEventRequestDefaultTypeInternal _PublishEventRequest_default_instance_;
class PublishEventRequest_MetadataEntry_DoNotUse;
class PublishEventRequest_MetadataEntry_DoNotUseDefaultTypeInternal;
extern PublishEventRequest_MetadataEntry_DoNotUseDefaultTypeInternal _PublishEventRequest_MetadataEntry_DoNotUse_default_instance_;
class PubsubSubscription;
class PubsubSubscriptionDefaultTypeInternal;
extern PubsubSubscriptionDefaultTypeInternal _PubsubSubscription_default_instance_;
class PubsubSubscriptionRule;
class PubsubSubscriptionRuleDefaultTypeInternal;
extern PubsubSubscriptionRuleDefaultTypeInternal _PubsubSubscriptionRule_default_instance_;
class PubsubSubscriptionRules;
class PubsubSubscriptionRulesDefaultTypeInternal;
extern PubsubSubscriptionRulesDefaultTypeInternal _PubsubSubscriptionRules_default_instance_;
class PubsubSubscription_MetadataEntry_DoNotUse;
class PubsubSubscription_MetadataEntry_DoNotUseDefaultTypeInternal;
extern PubsubSubscription_MetadataEntry_DoNotUseDefaultTypeInternal _PubsubSubscription_MetadataEntry_DoNotUse_default_instance_;
class PurgeWorkflowRequest;
class PurgeWorkflowRequestDefaultTypeInternal;
extern PurgeWorkflowRequestDefaultTypeInternal _PurgeWorkflowRequest_default_instance_;
class QueryStateItem;
class QueryStateItemDefaultTypeInternal;
extern QueryStateItemDefaultTypeInternal _QueryStateItem_default_instance_;
class QueryStateRequest;
class QueryStateRequestDefaultTypeInternal;
extern QueryStateRequestDefaultTypeInternal _QueryStateRequest_default_instance_;
class QueryStateRequest_MetadataEntry_DoNotUse;
class QueryStateRequest_MetadataEntry_DoNotUseDefaultTypeInternal;
extern QueryStateRequest_MetadataEntry_DoNotUseDefaultTypeInternal _QueryStateRequest_MetadataEntry_DoNotUse_default_instance_;
class QueryStateResponse;
class QueryStateResponseDefaultTypeInternal;
extern QueryStateResponseDefaultTypeInternal _QueryStateResponse_default_instance_;
class QueryStateResponse_MetadataEntry_DoNotUse;
class QueryStateResponse_MetadataEntry_DoNotUseDefaultTypeInternal;
extern QueryStateResponse_MetadataEntry_DoNotUseDefaultTypeInternal _QueryStateResponse_MetadataEntry_DoNotUse_default_instance_;
class RaiseEventWorkflowRequest;
class RaiseEventWorkflowRequestDefaultTypeInternal;
extern RaiseEventWorkflowRequestDefaultTypeInternal _RaiseEventWorkflowRequest_default_instance_;
class RegisterActorReminderRequest;
class RegisterActorReminderRequestDefaultTypeInternal;
extern RegisterActorReminderRequestDefaultTypeInternal _RegisterActorReminderRequest_default_instance_;
class RegisterActorTimerRequest;
class RegisterActorTimerRequestDefaultTypeInternal;
extern RegisterActorTimerRequestDefaultTypeInternal _RegisterActorTimerRequest_default_instance_;
class RegisteredComponents;
class RegisteredComponentsDefaultTypeInternal;
extern RegisteredComponentsDefaultTypeInternal _RegisteredComponents_default_instance_;
class ResumeWorkflowRequest;
class ResumeWorkflowRequestDefaultTypeInternal;
extern ResumeWorkflowRequestDefaultTypeInternal _ResumeWorkflowRequest_default_instance_;
class SaveStateRequest;
class SaveStateRequestDefaultTypeInternal;
extern SaveStateRequestDefaultTypeInternal _SaveStateRequest_default_instance_;
class ScheduleJobRequest;
class ScheduleJobRequestDefaultTypeInternal;
extern ScheduleJobRequestDefaultTypeInternal _ScheduleJobRequest_default_instance_;
class ScheduleJobResponse;
class ScheduleJobResponseDefaultTypeInternal;
extern ScheduleJobResponseDefaultTypeInternal _ScheduleJobResponse_default_instance_;
class SecretResponse;
class SecretResponseDefaultTypeInternal;
extern SecretResponseDefaultTypeInternal _SecretResponse_default_instance_;
class SecretResponse_SecretsEntry_DoNotUse;
class SecretResponse_SecretsEntry_DoNotUseDefaultTypeInternal;
extern SecretResponse_SecretsEntry_DoNotUseDefaultTypeInternal _SecretResponse_SecretsEntry_DoNotUse_default_instance_;
class SetMetadataRequest;
class SetMetadataRequestDefaultTypeInternal;
extern SetMetadataRequestDefaultTypeInternal _SetMetadataRequest_default_instance_;
class ShutdownRequest;
class ShutdownRequestDefaultTypeInternal;
extern ShutdownRequestDefaultTypeInternal _ShutdownRequest_default_instance_;
class StartWorkflowRequest;
class StartWorkflowRequestDefaultTypeInternal;
extern StartWorkflowRequestDefaultTypeInternal _StartWorkflowRequest_default_instance_;
class StartWorkflowRequest_OptionsEntry_DoNotUse;
class StartWorkflowRequest_OptionsEntry_DoNotUseDefaultTypeInternal;
extern StartWorkflowRequest_OptionsEntry_DoNotUseDefaultTypeInternal _StartWorkflowRequest_OptionsEntry_DoNotUse_default_instance_;
class StartWorkflowResponse;
class StartWorkflowResponseDefaultTypeInternal;
extern StartWorkflowResponseDefaultTypeInternal _StartWorkflowResponse_default_instance_;
class SubscribeConfigurationRequest;
class SubscribeConfigurationRequestDefaultTypeInternal;
extern SubscribeConfigurationRequestDefaultTypeInternal _SubscribeConfigurationRequest_default_instance_;
class SubscribeConfigurationRequest_MetadataEntry_DoNotUse;
class SubscribeConfigurationRequest_MetadataEntry_DoNotUseDefaultTypeInternal;
extern SubscribeConfigurationRequest_MetadataEntry_DoNotUseDefaultTypeInternal _SubscribeConfigurationRequest_MetadataEntry_DoNotUse_default_instance_;
class SubscribeConfigurationResponse;
class SubscribeConfigurationResponseDefaultTypeInternal;
extern SubscribeConfigurationResponseDefaultTypeInternal _SubscribeConfigurationResponse_default_instance_;
class SubscribeConfigurationResponse_ItemsEntry_DoNotUse;
class SubscribeConfigurationResponse_ItemsEntry_DoNotUseDefaultTypeInternal;
extern SubscribeConfigurationResponse_ItemsEntry_DoNotUseDefaultTypeInternal _SubscribeConfigurationResponse_ItemsEntry_DoNotUse_default_instance_;
class SubscribeTopicEventsRequestAlpha1;
class SubscribeTopicEventsRequestAlpha1DefaultTypeInternal;
extern SubscribeTopicEventsRequestAlpha1DefaultTypeInternal _SubscribeTopicEventsRequestAlpha1_default_instance_;
class SubscribeTopicEventsRequestInitialAlpha1;
class SubscribeTopicEventsRequestInitialAlpha1DefaultTypeInternal;
extern SubscribeTopicEventsRequestInitialAlpha1DefaultTypeInternal _SubscribeTopicEventsRequestInitialAlpha1_default_instance_;
class SubscribeTopicEventsRequestInitialAlpha1_MetadataEntry_DoNotUse;
class SubscribeTopicEventsRequestInitialAlpha1_MetadataEntry_DoNotUseDefaultTypeInternal;
extern SubscribeTopicEventsRequestInitialAlpha1_MetadataEntry_DoNotUseDefaultTypeInternal _SubscribeTopicEventsRequestInitialAlpha1_MetadataEntry_DoNotUse_default_instance_;
class SubscribeTopicEventsRequestProcessedAlpha1;
class SubscribeTopicEventsRequestProcessedAlpha1DefaultTypeInternal;
extern SubscribeTopicEventsRequestProcessedAlpha1DefaultTypeInternal _SubscribeTopicEventsRequestProcessedAlpha1_default_instance_;
class SubscribeTopicEventsResponseAlpha1;
class SubscribeTopicEventsResponseAlpha1DefaultTypeInternal;
extern SubscribeTopicEventsResponseAlpha1DefaultTypeInternal _SubscribeTopicEventsResponseAlpha1_default_instance_;
class SubscribeTopicEventsResponseInitialAlpha1;
class SubscribeTopicEventsResponseInitialAlpha1DefaultTypeInternal;
extern SubscribeTopicEventsResponseInitialAlpha1DefaultTypeInternal _SubscribeTopicEventsResponseInitialAlpha1_default_instance_;
class SubtleDecryptRequest;
class SubtleDecryptRequestDefaultTypeInternal;
extern SubtleDecryptRequestDefaultTypeInternal _SubtleDecryptRequest_default_instance_;
class SubtleDecryptResponse;
class SubtleDecryptResponseDefaultTypeInternal;
extern SubtleDecryptResponseDefaultTypeInternal _SubtleDecryptResponse_default_instance_;
class SubtleEncryptRequest;
class SubtleEncryptRequestDefaultTypeInternal;
extern SubtleEncryptRequestDefaultTypeInternal _SubtleEncryptRequest_default_instance_;
class SubtleEncryptResponse;
class SubtleEncryptResponseDefaultTypeInternal;
extern SubtleEncryptResponseDefaultTypeInternal _SubtleEncryptResponse_default_instance_;
class SubtleGetKeyRequest;
class SubtleGetKeyRequestDefaultTypeInternal;
extern SubtleGetKeyRequestDefaultTypeInternal _SubtleGetKeyRequest_default_instance_;
class SubtleGetKeyResponse;
class SubtleGetKeyResponseDefaultTypeInternal;
extern SubtleGetKeyResponseDefaultTypeInternal _SubtleGetKeyResponse_default_instance_;
class SubtleSignRequest;
class SubtleSignRequestDefaultTypeInternal;
extern SubtleSignRequestDefaultTypeInternal _SubtleSignRequest_default_instance_;
class SubtleSignResponse;
class SubtleSignResponseDefaultTypeInternal;
extern SubtleSignResponseDefaultTypeInternal _SubtleSignResponse_default_instance_;
class SubtleUnwrapKeyRequest;
class SubtleUnwrapKeyRequestDefaultTypeInternal;
extern SubtleUnwrapKeyRequestDefaultTypeInternal _SubtleUnwrapKeyRequest_default_instance_;
class SubtleUnwrapKeyResponse;
class SubtleUnwrapKeyResponseDefaultTypeInternal;
extern SubtleUnwrapKeyResponseDefaultTypeInternal _SubtleUnwrapKeyResponse_default_instance_;
class SubtleVerifyRequest;
class SubtleVerifyRequestDefaultTypeInternal;
extern SubtleVerifyRequestDefaultTypeInternal _SubtleVerifyRequest_default_instance_;
class SubtleVerifyResponse;
class SubtleVerifyResponseDefaultTypeInternal;
extern SubtleVerifyResponseDefaultTypeInternal _SubtleVerifyResponse_default_instance_;
class SubtleWrapKeyRequest;
class SubtleWrapKeyRequestDefaultTypeInternal;
extern SubtleWrapKeyRequestDefaultTypeInternal _SubtleWrapKeyRequest_default_instance_;
class SubtleWrapKeyResponse;
class SubtleWrapKeyResponseDefaultTypeInternal;
extern SubtleWrapKeyResponseDefaultTypeInternal _SubtleWrapKeyResponse_default_instance_;
class TerminateWorkflowRequest;
class TerminateWorkflowRequestDefaultTypeInternal;
extern TerminateWorkflowRequestDefaultTypeInternal _TerminateWorkflowRequest_default_instance_;
class TransactionalActorStateOperation;
class TransactionalActorStateOperationDefaultTypeInternal;
extern TransactionalActorStateOperationDefaultTypeInternal _TransactionalActorStateOperation_default_instance_;
class TransactionalActorStateOperation_MetadataEntry_DoNotUse;
class TransactionalActorStateOperation_MetadataEntry_DoNotUseDefaultTypeInternal;
extern TransactionalActorStateOperation_MetadataEntry_DoNotUseDefaultTypeInternal _TransactionalActorStateOperation_MetadataEntry_DoNotUse_default_instance_;
class TransactionalStateOperation;
class TransactionalStateOperationDefaultTypeInternal;
extern TransactionalStateOperationDefaultTypeInternal _TransactionalStateOperation_default_instance_;
class TryLockRequest;
class TryLockRequestDefaultTypeInternal;
extern TryLockRequestDefaultTypeInternal _TryLockRequest_default_instance_;
class TryLockResponse;
class TryLockResponseDefaultTypeInternal;
extern TryLockResponseDefaultTypeInternal _TryLockResponse_default_instance_;
class UnlockRequest;
class UnlockRequestDefaultTypeInternal;
extern UnlockRequestDefaultTypeInternal _UnlockRequest_default_instance_;
class UnlockResponse;
class UnlockResponseDefaultTypeInternal;
extern UnlockResponseDefaultTypeInternal _UnlockResponse_default_instance_;
class UnregisterActorReminderRequest;
class UnregisterActorReminderRequestDefaultTypeInternal;
extern UnregisterActorReminderRequestDefaultTypeInternal _UnregisterActorReminderRequest_default_instance_;
class UnregisterActorTimerRequest;
class UnregisterActorTimerRequestDefaultTypeInternal;
extern UnregisterActorTimerRequestDefaultTypeInternal _UnregisterActorTimerRequest_default_instance_;
class UnsubscribeConfigurationRequest;
class UnsubscribeConfigurationRequestDefaultTypeInternal;
extern UnsubscribeConfigurationRequestDefaultTypeInternal _UnsubscribeConfigurationRequest_default_instance_;
class UnsubscribeConfigurationResponse;
class UnsubscribeConfigurationResponseDefaultTypeInternal;
extern UnsubscribeConfigurationResponseDefaultTypeInternal _UnsubscribeConfigurationResponse_default_instance_;
}  // namespace v1
}  // namespace runtime
}  // namespace proto
}  // namespace dapr
PROTOBUF_NAMESPACE_OPEN
template<> ::dapr::proto::runtime::v1::ActiveActorsCount* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::ActiveActorsCount>(Arena*);
template<> ::dapr::proto::runtime::v1::ActorRuntime* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::ActorRuntime>(Arena*);
template<> ::dapr::proto::runtime::v1::AppConnectionHealthProperties* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::AppConnectionHealthProperties>(Arena*);
template<> ::dapr::proto::runtime::v1::AppConnectionProperties* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::AppConnectionProperties>(Arena*);
template<> ::dapr::proto::runtime::v1::BulkPublishRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::BulkPublishRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::BulkPublishRequestEntry* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::BulkPublishRequestEntry>(Arena*);
template<> ::dapr::proto::runtime::v1::BulkPublishRequestEntry_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::BulkPublishRequestEntry_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::BulkPublishRequest_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::BulkPublishRequest_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::BulkPublishResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::BulkPublishResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::BulkPublishResponseFailedEntry* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::BulkPublishResponseFailedEntry>(Arena*);
template<> ::dapr::proto::runtime::v1::BulkStateItem* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::BulkStateItem>(Arena*);
template<> ::dapr::proto::runtime::v1::BulkStateItem_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::BulkStateItem_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::DecryptRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::DecryptRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::DecryptRequestOptions* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::DecryptRequestOptions>(Arena*);
template<> ::dapr::proto::runtime::v1::DecryptResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::DecryptResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::DeleteBulkStateRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::DeleteBulkStateRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::DeleteJobRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::DeleteJobRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::DeleteJobResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::DeleteJobResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::DeleteStateRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::DeleteStateRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::DeleteStateRequest_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::DeleteStateRequest_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::EncryptRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::EncryptRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::EncryptRequestOptions* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::EncryptRequestOptions>(Arena*);
template<> ::dapr::proto::runtime::v1::EncryptResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::EncryptResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::ExecuteActorStateTransactionRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::ExecuteActorStateTransactionRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::ExecuteStateTransactionRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::ExecuteStateTransactionRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::ExecuteStateTransactionRequest_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::ExecuteStateTransactionRequest_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::GetActorStateRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetActorStateRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::GetActorStateResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetActorStateResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::GetActorStateResponse_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetActorStateResponse_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::GetBulkSecretRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetBulkSecretRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::GetBulkSecretRequest_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetBulkSecretRequest_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::GetBulkSecretResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetBulkSecretResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::GetBulkSecretResponse_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetBulkSecretResponse_DataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::GetBulkStateRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetBulkStateRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::GetBulkStateRequest_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetBulkStateRequest_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::GetBulkStateResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetBulkStateResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::GetConfigurationRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetConfigurationRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::GetConfigurationRequest_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetConfigurationRequest_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::GetConfigurationResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetConfigurationResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::GetConfigurationResponse_ItemsEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetConfigurationResponse_ItemsEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::GetJobRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetJobRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::GetJobResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetJobResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::GetMetadataRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetMetadataRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::GetMetadataResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetMetadataResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::GetMetadataResponse_ExtendedMetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetMetadataResponse_ExtendedMetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::GetSecretRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetSecretRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::GetSecretRequest_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetSecretRequest_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::GetSecretResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetSecretResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::GetSecretResponse_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetSecretResponse_DataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::GetStateRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetStateRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::GetStateRequest_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetStateRequest_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::GetStateResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetStateResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::GetStateResponse_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetStateResponse_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::GetWorkflowRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetWorkflowRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::GetWorkflowResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetWorkflowResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::GetWorkflowResponse_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::GetWorkflowResponse_PropertiesEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::InvokeActorRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::InvokeActorRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::InvokeActorRequest_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::InvokeActorRequest_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::InvokeActorResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::InvokeActorResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::InvokeBindingRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::InvokeBindingRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::InvokeBindingRequest_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::InvokeBindingRequest_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::InvokeBindingResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::InvokeBindingResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::InvokeBindingResponse_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::InvokeBindingResponse_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::InvokeServiceRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::InvokeServiceRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::Job* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::Job>(Arena*);
template<> ::dapr::proto::runtime::v1::MetadataHTTPEndpoint* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::MetadataHTTPEndpoint>(Arena*);
template<> ::dapr::proto::runtime::v1::PauseWorkflowRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::PauseWorkflowRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::PublishEventRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::PublishEventRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::PublishEventRequest_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::PublishEventRequest_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::PubsubSubscription* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::PubsubSubscription>(Arena*);
template<> ::dapr::proto::runtime::v1::PubsubSubscriptionRule* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::PubsubSubscriptionRule>(Arena*);
template<> ::dapr::proto::runtime::v1::PubsubSubscriptionRules* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::PubsubSubscriptionRules>(Arena*);
template<> ::dapr::proto::runtime::v1::PubsubSubscription_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::PubsubSubscription_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::PurgeWorkflowRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::PurgeWorkflowRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::QueryStateItem* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::QueryStateItem>(Arena*);
template<> ::dapr::proto::runtime::v1::QueryStateRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::QueryStateRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::QueryStateRequest_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::QueryStateRequest_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::QueryStateResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::QueryStateResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::QueryStateResponse_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::QueryStateResponse_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::RaiseEventWorkflowRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::RaiseEventWorkflowRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::RegisterActorReminderRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::RegisterActorReminderRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::RegisterActorTimerRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::RegisterActorTimerRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::RegisteredComponents* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::RegisteredComponents>(Arena*);
template<> ::dapr::proto::runtime::v1::ResumeWorkflowRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::ResumeWorkflowRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::SaveStateRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SaveStateRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::ScheduleJobRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::ScheduleJobRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::ScheduleJobResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::ScheduleJobResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::SecretResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SecretResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::SecretResponse_SecretsEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SecretResponse_SecretsEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::SetMetadataRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SetMetadataRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::ShutdownRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::ShutdownRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::StartWorkflowRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::StartWorkflowRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::StartWorkflowRequest_OptionsEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::StartWorkflowRequest_OptionsEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::StartWorkflowResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::StartWorkflowResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::SubscribeConfigurationRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubscribeConfigurationRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::SubscribeConfigurationRequest_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubscribeConfigurationRequest_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::SubscribeConfigurationResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubscribeConfigurationResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::SubscribeConfigurationResponse_ItemsEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubscribeConfigurationResponse_ItemsEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestAlpha1* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubscribeTopicEventsRequestAlpha1>(Arena*);
template<> ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1>(Arena*);
template<> ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestProcessedAlpha1* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubscribeTopicEventsRequestProcessedAlpha1>(Arena*);
template<> ::dapr::proto::runtime::v1::SubscribeTopicEventsResponseAlpha1* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubscribeTopicEventsResponseAlpha1>(Arena*);
template<> ::dapr::proto::runtime::v1::SubscribeTopicEventsResponseInitialAlpha1* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubscribeTopicEventsResponseInitialAlpha1>(Arena*);
template<> ::dapr::proto::runtime::v1::SubtleDecryptRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubtleDecryptRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::SubtleDecryptResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubtleDecryptResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::SubtleEncryptRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubtleEncryptRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::SubtleEncryptResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubtleEncryptResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::SubtleGetKeyRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubtleGetKeyRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::SubtleGetKeyResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubtleGetKeyResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::SubtleSignRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubtleSignRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::SubtleSignResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubtleSignResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::SubtleUnwrapKeyRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubtleUnwrapKeyRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::SubtleUnwrapKeyResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubtleUnwrapKeyResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::SubtleVerifyRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubtleVerifyRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::SubtleVerifyResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubtleVerifyResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::SubtleWrapKeyRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubtleWrapKeyRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::SubtleWrapKeyResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::SubtleWrapKeyResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::TerminateWorkflowRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::TerminateWorkflowRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::TransactionalActorStateOperation* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::TransactionalActorStateOperation>(Arena*);
template<> ::dapr::proto::runtime::v1::TransactionalActorStateOperation_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::TransactionalActorStateOperation_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::TransactionalStateOperation* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::TransactionalStateOperation>(Arena*);
template<> ::dapr::proto::runtime::v1::TryLockRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::TryLockRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::TryLockResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::TryLockResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::UnlockRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::UnlockRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::UnlockResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::UnlockResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::UnregisterActorReminderRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::UnregisterActorReminderRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::UnregisterActorTimerRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::UnregisterActorTimerRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::UnsubscribeConfigurationRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::UnsubscribeConfigurationRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::UnsubscribeConfigurationResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::UnsubscribeConfigurationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dapr {
namespace proto {
namespace runtime {
namespace v1 {

enum ActorRuntime_ActorRuntimeStatus : int {
  ActorRuntime_ActorRuntimeStatus_INITIALIZING = 0,
  ActorRuntime_ActorRuntimeStatus_DISABLED = 1,
  ActorRuntime_ActorRuntimeStatus_RUNNING = 2,
  ActorRuntime_ActorRuntimeStatus_ActorRuntime_ActorRuntimeStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ActorRuntime_ActorRuntimeStatus_ActorRuntime_ActorRuntimeStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ActorRuntime_ActorRuntimeStatus_IsValid(int value);
constexpr ActorRuntime_ActorRuntimeStatus ActorRuntime_ActorRuntimeStatus_ActorRuntimeStatus_MIN = ActorRuntime_ActorRuntimeStatus_INITIALIZING;
constexpr ActorRuntime_ActorRuntimeStatus ActorRuntime_ActorRuntimeStatus_ActorRuntimeStatus_MAX = ActorRuntime_ActorRuntimeStatus_RUNNING;
constexpr int ActorRuntime_ActorRuntimeStatus_ActorRuntimeStatus_ARRAYSIZE = ActorRuntime_ActorRuntimeStatus_ActorRuntimeStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActorRuntime_ActorRuntimeStatus_descriptor();
template<typename T>
inline const std::string& ActorRuntime_ActorRuntimeStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActorRuntime_ActorRuntimeStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActorRuntime_ActorRuntimeStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActorRuntime_ActorRuntimeStatus_descriptor(), enum_t_value);
}
inline bool ActorRuntime_ActorRuntimeStatus_Parse(
    const std::string& name, ActorRuntime_ActorRuntimeStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActorRuntime_ActorRuntimeStatus>(
    ActorRuntime_ActorRuntimeStatus_descriptor(), name, value);
}
enum UnlockResponse_Status : int {
  UnlockResponse_Status_SUCCESS = 0,
  UnlockResponse_Status_LOCK_DOES_NOT_EXIST = 1,
  UnlockResponse_Status_LOCK_BELONGS_TO_OTHERS = 2,
  UnlockResponse_Status_INTERNAL_ERROR = 3,
  UnlockResponse_Status_UnlockResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UnlockResponse_Status_UnlockResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UnlockResponse_Status_IsValid(int value);
constexpr UnlockResponse_Status UnlockResponse_Status_Status_MIN = UnlockResponse_Status_SUCCESS;
constexpr UnlockResponse_Status UnlockResponse_Status_Status_MAX = UnlockResponse_Status_INTERNAL_ERROR;
constexpr int UnlockResponse_Status_Status_ARRAYSIZE = UnlockResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UnlockResponse_Status_descriptor();
template<typename T>
inline const std::string& UnlockResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UnlockResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UnlockResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UnlockResponse_Status_descriptor(), enum_t_value);
}
inline bool UnlockResponse_Status_Parse(
    const std::string& name, UnlockResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UnlockResponse_Status>(
    UnlockResponse_Status_descriptor(), name, value);
}
enum SubtleGetKeyRequest_KeyFormat : int {
  SubtleGetKeyRequest_KeyFormat_PEM = 0,
  SubtleGetKeyRequest_KeyFormat_JSON = 1,
  SubtleGetKeyRequest_KeyFormat_SubtleGetKeyRequest_KeyFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SubtleGetKeyRequest_KeyFormat_SubtleGetKeyRequest_KeyFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SubtleGetKeyRequest_KeyFormat_IsValid(int value);
constexpr SubtleGetKeyRequest_KeyFormat SubtleGetKeyRequest_KeyFormat_KeyFormat_MIN = SubtleGetKeyRequest_KeyFormat_PEM;
constexpr SubtleGetKeyRequest_KeyFormat SubtleGetKeyRequest_KeyFormat_KeyFormat_MAX = SubtleGetKeyRequest_KeyFormat_JSON;
constexpr int SubtleGetKeyRequest_KeyFormat_KeyFormat_ARRAYSIZE = SubtleGetKeyRequest_KeyFormat_KeyFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubtleGetKeyRequest_KeyFormat_descriptor();
template<typename T>
inline const std::string& SubtleGetKeyRequest_KeyFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SubtleGetKeyRequest_KeyFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SubtleGetKeyRequest_KeyFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SubtleGetKeyRequest_KeyFormat_descriptor(), enum_t_value);
}
inline bool SubtleGetKeyRequest_KeyFormat_Parse(
    const std::string& name, SubtleGetKeyRequest_KeyFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SubtleGetKeyRequest_KeyFormat>(
    SubtleGetKeyRequest_KeyFormat_descriptor(), name, value);
}
enum PubsubSubscriptionType : int {
  UNKNOWN = 0,
  DECLARATIVE = 1,
  PROGRAMMATIC = 2,
  STREAMING = 3,
  PubsubSubscriptionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PubsubSubscriptionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PubsubSubscriptionType_IsValid(int value);
constexpr PubsubSubscriptionType PubsubSubscriptionType_MIN = UNKNOWN;
constexpr PubsubSubscriptionType PubsubSubscriptionType_MAX = STREAMING;
constexpr int PubsubSubscriptionType_ARRAYSIZE = PubsubSubscriptionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PubsubSubscriptionType_descriptor();
template<typename T>
inline const std::string& PubsubSubscriptionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PubsubSubscriptionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PubsubSubscriptionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PubsubSubscriptionType_descriptor(), enum_t_value);
}
inline bool PubsubSubscriptionType_Parse(
    const std::string& name, PubsubSubscriptionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PubsubSubscriptionType>(
    PubsubSubscriptionType_descriptor(), name, value);
}
// ===================================================================

class InvokeServiceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.InvokeServiceRequest) */ {
 public:
  inline InvokeServiceRequest() : InvokeServiceRequest(nullptr) {};
  virtual ~InvokeServiceRequest();

  InvokeServiceRequest(const InvokeServiceRequest& from);
  InvokeServiceRequest(InvokeServiceRequest&& from) noexcept
    : InvokeServiceRequest() {
    *this = ::std::move(from);
  }

  inline InvokeServiceRequest& operator=(const InvokeServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvokeServiceRequest& operator=(InvokeServiceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InvokeServiceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvokeServiceRequest* internal_default_instance() {
    return reinterpret_cast<const InvokeServiceRequest*>(
               &_InvokeServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InvokeServiceRequest& a, InvokeServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InvokeServiceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvokeServiceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvokeServiceRequest* New() const final {
    return CreateMaybeMessage<InvokeServiceRequest>(nullptr);
  }

  InvokeServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvokeServiceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InvokeServiceRequest& from);
  void MergeFrom(const InvokeServiceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvokeServiceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.InvokeServiceRequest";
  }
  protected:
  explicit InvokeServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMessageFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .dapr.proto.common.v1.InvokeRequest message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::dapr::proto::common::v1::InvokeRequest& message() const;
  ::dapr::proto::common::v1::InvokeRequest* release_message();
  ::dapr::proto::common::v1::InvokeRequest* mutable_message();
  void set_allocated_message(::dapr::proto::common::v1::InvokeRequest* message);
  private:
  const ::dapr::proto::common::v1::InvokeRequest& _internal_message() const;
  ::dapr::proto::common::v1::InvokeRequest* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::dapr::proto::common::v1::InvokeRequest* message);
  ::dapr::proto::common::v1::InvokeRequest* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.InvokeServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::dapr::proto::common::v1::InvokeRequest* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class GetStateRequest_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetStateRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetStateRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GetStateRequest_MetadataEntry_DoNotUse();
  GetStateRequest_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetStateRequest_MetadataEntry_DoNotUse& other);
  static const GetStateRequest_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetStateRequest_MetadataEntry_DoNotUse*>(&_GetStateRequest_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.GetStateRequest.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.GetStateRequest.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class GetStateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.GetStateRequest) */ {
 public:
  inline GetStateRequest() : GetStateRequest(nullptr) {};
  virtual ~GetStateRequest();

  GetStateRequest(const GetStateRequest& from);
  GetStateRequest(GetStateRequest&& from) noexcept
    : GetStateRequest() {
    *this = ::std::move(from);
  }

  inline GetStateRequest& operator=(const GetStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStateRequest& operator=(GetStateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetStateRequest*>(
               &_GetStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetStateRequest& a, GetStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStateRequest* New() const final {
    return CreateMaybeMessage<GetStateRequest>(nullptr);
  }

  GetStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStateRequest& from);
  void MergeFrom(const GetStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.GetStateRequest";
  }
  protected:
  explicit GetStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 4,
    kStoreNameFieldNumber = 1,
    kKeyFieldNumber = 2,
    kConsistencyFieldNumber = 3,
  };
  // map<string, string> metadata = 4;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string store_name = 1;
  void clear_store_name();
  const std::string& store_name() const;
  void set_store_name(const std::string& value);
  void set_store_name(std::string&& value);
  void set_store_name(const char* value);
  void set_store_name(const char* value, size_t size);
  std::string* mutable_store_name();
  std::string* release_store_name();
  void set_allocated_store_name(std::string* store_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_store_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_store_name(
      std::string* store_name);
  private:
  const std::string& _internal_store_name() const;
  void _internal_set_store_name(const std::string& value);
  std::string* _internal_mutable_store_name();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .dapr.proto.common.v1.StateOptions.StateConsistency consistency = 3;
  void clear_consistency();
  ::dapr::proto::common::v1::StateOptions_StateConsistency consistency() const;
  void set_consistency(::dapr::proto::common::v1::StateOptions_StateConsistency value);
  private:
  ::dapr::proto::common::v1::StateOptions_StateConsistency _internal_consistency() const;
  void _internal_set_consistency(::dapr::proto::common::v1::StateOptions_StateConsistency value);
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.GetStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetStateRequest_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr store_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  int consistency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class GetBulkStateRequest_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetBulkStateRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetBulkStateRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GetBulkStateRequest_MetadataEntry_DoNotUse();
  GetBulkStateRequest_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetBulkStateRequest_MetadataEntry_DoNotUse& other);
  static const GetBulkStateRequest_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetBulkStateRequest_MetadataEntry_DoNotUse*>(&_GetBulkStateRequest_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.GetBulkStateRequest.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.GetBulkStateRequest.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class GetBulkStateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.GetBulkStateRequest) */ {
 public:
  inline GetBulkStateRequest() : GetBulkStateRequest(nullptr) {};
  virtual ~GetBulkStateRequest();

  GetBulkStateRequest(const GetBulkStateRequest& from);
  GetBulkStateRequest(GetBulkStateRequest&& from) noexcept
    : GetBulkStateRequest() {
    *this = ::std::move(from);
  }

  inline GetBulkStateRequest& operator=(const GetBulkStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBulkStateRequest& operator=(GetBulkStateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBulkStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBulkStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetBulkStateRequest*>(
               &_GetBulkStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetBulkStateRequest& a, GetBulkStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBulkStateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBulkStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBulkStateRequest* New() const final {
    return CreateMaybeMessage<GetBulkStateRequest>(nullptr);
  }

  GetBulkStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBulkStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBulkStateRequest& from);
  void MergeFrom(const GetBulkStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBulkStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.GetBulkStateRequest";
  }
  protected:
  explicit GetBulkStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
    kMetadataFieldNumber = 4,
    kStoreNameFieldNumber = 1,
    kParallelismFieldNumber = 3,
  };
  // repeated string keys = 2;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();
  private:
  const std::string& _internal_keys(int index) const;
  std::string* _internal_add_keys();
  public:

  // map<string, string> metadata = 4;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string store_name = 1;
  void clear_store_name();
  const std::string& store_name() const;
  void set_store_name(const std::string& value);
  void set_store_name(std::string&& value);
  void set_store_name(const char* value);
  void set_store_name(const char* value, size_t size);
  std::string* mutable_store_name();
  std::string* release_store_name();
  void set_allocated_store_name(std::string* store_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_store_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_store_name(
      std::string* store_name);
  private:
  const std::string& _internal_store_name() const;
  void _internal_set_store_name(const std::string& value);
  std::string* _internal_mutable_store_name();
  public:

  // int32 parallelism = 3;
  void clear_parallelism();
  ::PROTOBUF_NAMESPACE_ID::int32 parallelism() const;
  void set_parallelism(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parallelism() const;
  void _internal_set_parallelism(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.GetBulkStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetBulkStateRequest_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr store_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 parallelism_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class GetBulkStateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.GetBulkStateResponse) */ {
 public:
  inline GetBulkStateResponse() : GetBulkStateResponse(nullptr) {};
  virtual ~GetBulkStateResponse();

  GetBulkStateResponse(const GetBulkStateResponse& from);
  GetBulkStateResponse(GetBulkStateResponse&& from) noexcept
    : GetBulkStateResponse() {
    *this = ::std::move(from);
  }

  inline GetBulkStateResponse& operator=(const GetBulkStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBulkStateResponse& operator=(GetBulkStateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBulkStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBulkStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetBulkStateResponse*>(
               &_GetBulkStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetBulkStateResponse& a, GetBulkStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBulkStateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBulkStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBulkStateResponse* New() const final {
    return CreateMaybeMessage<GetBulkStateResponse>(nullptr);
  }

  GetBulkStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBulkStateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBulkStateResponse& from);
  void MergeFrom(const GetBulkStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBulkStateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.GetBulkStateResponse";
  }
  protected:
  explicit GetBulkStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .dapr.proto.runtime.v1.BulkStateItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::dapr::proto::runtime::v1::BulkStateItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::BulkStateItem >*
      mutable_items();
  private:
  const ::dapr::proto::runtime::v1::BulkStateItem& _internal_items(int index) const;
  ::dapr::proto::runtime::v1::BulkStateItem* _internal_add_items();
  public:
  const ::dapr::proto::runtime::v1::BulkStateItem& items(int index) const;
  ::dapr::proto::runtime::v1::BulkStateItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::BulkStateItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.GetBulkStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::BulkStateItem > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class BulkStateItem_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BulkStateItem_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BulkStateItem_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  BulkStateItem_MetadataEntry_DoNotUse();
  BulkStateItem_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BulkStateItem_MetadataEntry_DoNotUse& other);
  static const BulkStateItem_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BulkStateItem_MetadataEntry_DoNotUse*>(&_BulkStateItem_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.BulkStateItem.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.BulkStateItem.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class BulkStateItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.BulkStateItem) */ {
 public:
  inline BulkStateItem() : BulkStateItem(nullptr) {};
  virtual ~BulkStateItem();

  BulkStateItem(const BulkStateItem& from);
  BulkStateItem(BulkStateItem&& from) noexcept
    : BulkStateItem() {
    *this = ::std::move(from);
  }

  inline BulkStateItem& operator=(const BulkStateItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkStateItem& operator=(BulkStateItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkStateItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BulkStateItem* internal_default_instance() {
    return reinterpret_cast<const BulkStateItem*>(
               &_BulkStateItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BulkStateItem& a, BulkStateItem& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkStateItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkStateItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkStateItem* New() const final {
    return CreateMaybeMessage<BulkStateItem>(nullptr);
  }

  BulkStateItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkStateItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkStateItem& from);
  void MergeFrom(const BulkStateItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkStateItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.BulkStateItem";
  }
  protected:
  explicit BulkStateItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 5,
    kKeyFieldNumber = 1,
    kDataFieldNumber = 2,
    kEtagFieldNumber = 3,
    kErrorFieldNumber = 4,
  };
  // map<string, string> metadata = 5;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string etag = 3;
  void clear_etag();
  const std::string& etag() const;
  void set_etag(const std::string& value);
  void set_etag(std::string&& value);
  void set_etag(const char* value);
  void set_etag(const char* value, size_t size);
  std::string* mutable_etag();
  std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_etag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_etag(
      std::string* etag);
  private:
  const std::string& _internal_etag() const;
  void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // string error = 4;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_error();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_error(
      std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.BulkStateItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BulkStateItem_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class GetStateResponse_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetStateResponse_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetStateResponse_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GetStateResponse_MetadataEntry_DoNotUse();
  GetStateResponse_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetStateResponse_MetadataEntry_DoNotUse& other);
  static const GetStateResponse_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetStateResponse_MetadataEntry_DoNotUse*>(&_GetStateResponse_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.GetStateResponse.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.GetStateResponse.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class GetStateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.GetStateResponse) */ {
 public:
  inline GetStateResponse() : GetStateResponse(nullptr) {};
  virtual ~GetStateResponse();

  GetStateResponse(const GetStateResponse& from);
  GetStateResponse(GetStateResponse&& from) noexcept
    : GetStateResponse() {
    *this = ::std::move(from);
  }

  inline GetStateResponse& operator=(const GetStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStateResponse& operator=(GetStateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetStateResponse*>(
               &_GetStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetStateResponse& a, GetStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStateResponse* New() const final {
    return CreateMaybeMessage<GetStateResponse>(nullptr);
  }

  GetStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStateResponse& from);
  void MergeFrom(const GetStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.GetStateResponse";
  }
  protected:
  explicit GetStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kDataFieldNumber = 1,
    kEtagFieldNumber = 2,
  };
  // map<string, string> metadata = 3;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string etag = 2;
  void clear_etag();
  const std::string& etag() const;
  void set_etag(const std::string& value);
  void set_etag(std::string&& value);
  void set_etag(const char* value);
  void set_etag(const char* value, size_t size);
  std::string* mutable_etag();
  std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_etag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_etag(
      std::string* etag);
  private:
  const std::string& _internal_etag() const;
  void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.GetStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetStateResponse_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class DeleteStateRequest_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DeleteStateRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DeleteStateRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  DeleteStateRequest_MetadataEntry_DoNotUse();
  DeleteStateRequest_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DeleteStateRequest_MetadataEntry_DoNotUse& other);
  static const DeleteStateRequest_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DeleteStateRequest_MetadataEntry_DoNotUse*>(&_DeleteStateRequest_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.DeleteStateRequest.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.DeleteStateRequest.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[10];
  }

  public:
};

// -------------------------------------------------------------------

class DeleteStateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.DeleteStateRequest) */ {
 public:
  inline DeleteStateRequest() : DeleteStateRequest(nullptr) {};
  virtual ~DeleteStateRequest();

  DeleteStateRequest(const DeleteStateRequest& from);
  DeleteStateRequest(DeleteStateRequest&& from) noexcept
    : DeleteStateRequest() {
    *this = ::std::move(from);
  }

  inline DeleteStateRequest& operator=(const DeleteStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteStateRequest& operator=(DeleteStateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteStateRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteStateRequest*>(
               &_DeleteStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeleteStateRequest& a, DeleteStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteStateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteStateRequest* New() const final {
    return CreateMaybeMessage<DeleteStateRequest>(nullptr);
  }

  DeleteStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteStateRequest& from);
  void MergeFrom(const DeleteStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.DeleteStateRequest";
  }
  protected:
  explicit DeleteStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 5,
    kStoreNameFieldNumber = 1,
    kKeyFieldNumber = 2,
    kEtagFieldNumber = 3,
    kOptionsFieldNumber = 4,
  };
  // map<string, string> metadata = 5;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string store_name = 1;
  void clear_store_name();
  const std::string& store_name() const;
  void set_store_name(const std::string& value);
  void set_store_name(std::string&& value);
  void set_store_name(const char* value);
  void set_store_name(const char* value, size_t size);
  std::string* mutable_store_name();
  std::string* release_store_name();
  void set_allocated_store_name(std::string* store_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_store_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_store_name(
      std::string* store_name);
  private:
  const std::string& _internal_store_name() const;
  void _internal_set_store_name(const std::string& value);
  std::string* _internal_mutable_store_name();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .dapr.proto.common.v1.Etag etag = 3;
  bool has_etag() const;
  private:
  bool _internal_has_etag() const;
  public:
  void clear_etag();
  const ::dapr::proto::common::v1::Etag& etag() const;
  ::dapr::proto::common::v1::Etag* release_etag();
  ::dapr::proto::common::v1::Etag* mutable_etag();
  void set_allocated_etag(::dapr::proto::common::v1::Etag* etag);
  private:
  const ::dapr::proto::common::v1::Etag& _internal_etag() const;
  ::dapr::proto::common::v1::Etag* _internal_mutable_etag();
  public:
  void unsafe_arena_set_allocated_etag(
      ::dapr::proto::common::v1::Etag* etag);
  ::dapr::proto::common::v1::Etag* unsafe_arena_release_etag();

  // .dapr.proto.common.v1.StateOptions options = 4;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::dapr::proto::common::v1::StateOptions& options() const;
  ::dapr::proto::common::v1::StateOptions* release_options();
  ::dapr::proto::common::v1::StateOptions* mutable_options();
  void set_allocated_options(::dapr::proto::common::v1::StateOptions* options);
  private:
  const ::dapr::proto::common::v1::StateOptions& _internal_options() const;
  ::dapr::proto::common::v1::StateOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::dapr::proto::common::v1::StateOptions* options);
  ::dapr::proto::common::v1::StateOptions* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.DeleteStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DeleteStateRequest_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr store_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::dapr::proto::common::v1::Etag* etag_;
  ::dapr::proto::common::v1::StateOptions* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class DeleteBulkStateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.DeleteBulkStateRequest) */ {
 public:
  inline DeleteBulkStateRequest() : DeleteBulkStateRequest(nullptr) {};
  virtual ~DeleteBulkStateRequest();

  DeleteBulkStateRequest(const DeleteBulkStateRequest& from);
  DeleteBulkStateRequest(DeleteBulkStateRequest&& from) noexcept
    : DeleteBulkStateRequest() {
    *this = ::std::move(from);
  }

  inline DeleteBulkStateRequest& operator=(const DeleteBulkStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteBulkStateRequest& operator=(DeleteBulkStateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteBulkStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteBulkStateRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteBulkStateRequest*>(
               &_DeleteBulkStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeleteBulkStateRequest& a, DeleteBulkStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteBulkStateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteBulkStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteBulkStateRequest* New() const final {
    return CreateMaybeMessage<DeleteBulkStateRequest>(nullptr);
  }

  DeleteBulkStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteBulkStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteBulkStateRequest& from);
  void MergeFrom(const DeleteBulkStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteBulkStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.DeleteBulkStateRequest";
  }
  protected:
  explicit DeleteBulkStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 2,
    kStoreNameFieldNumber = 1,
  };
  // repeated .dapr.proto.common.v1.StateItem states = 2;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  ::dapr::proto::common::v1::StateItem* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::common::v1::StateItem >*
      mutable_states();
  private:
  const ::dapr::proto::common::v1::StateItem& _internal_states(int index) const;
  ::dapr::proto::common::v1::StateItem* _internal_add_states();
  public:
  const ::dapr::proto::common::v1::StateItem& states(int index) const;
  ::dapr::proto::common::v1::StateItem* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::common::v1::StateItem >&
      states() const;

  // string store_name = 1;
  void clear_store_name();
  const std::string& store_name() const;
  void set_store_name(const std::string& value);
  void set_store_name(std::string&& value);
  void set_store_name(const char* value);
  void set_store_name(const char* value, size_t size);
  std::string* mutable_store_name();
  std::string* release_store_name();
  void set_allocated_store_name(std::string* store_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_store_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_store_name(
      std::string* store_name);
  private:
  const std::string& _internal_store_name() const;
  void _internal_set_store_name(const std::string& value);
  std::string* _internal_mutable_store_name();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.DeleteBulkStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::common::v1::StateItem > states_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr store_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SaveStateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SaveStateRequest) */ {
 public:
  inline SaveStateRequest() : SaveStateRequest(nullptr) {};
  virtual ~SaveStateRequest();

  SaveStateRequest(const SaveStateRequest& from);
  SaveStateRequest(SaveStateRequest&& from) noexcept
    : SaveStateRequest() {
    *this = ::std::move(from);
  }

  inline SaveStateRequest& operator=(const SaveStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveStateRequest& operator=(SaveStateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SaveStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveStateRequest* internal_default_instance() {
    return reinterpret_cast<const SaveStateRequest*>(
               &_SaveStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SaveStateRequest& a, SaveStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveStateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaveStateRequest* New() const final {
    return CreateMaybeMessage<SaveStateRequest>(nullptr);
  }

  SaveStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SaveStateRequest& from);
  void MergeFrom(const SaveStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SaveStateRequest";
  }
  protected:
  explicit SaveStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 2,
    kStoreNameFieldNumber = 1,
  };
  // repeated .dapr.proto.common.v1.StateItem states = 2;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  ::dapr::proto::common::v1::StateItem* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::common::v1::StateItem >*
      mutable_states();
  private:
  const ::dapr::proto::common::v1::StateItem& _internal_states(int index) const;
  ::dapr::proto::common::v1::StateItem* _internal_add_states();
  public:
  const ::dapr::proto::common::v1::StateItem& states(int index) const;
  ::dapr::proto::common::v1::StateItem* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::common::v1::StateItem >&
      states() const;

  // string store_name = 1;
  void clear_store_name();
  const std::string& store_name() const;
  void set_store_name(const std::string& value);
  void set_store_name(std::string&& value);
  void set_store_name(const char* value);
  void set_store_name(const char* value, size_t size);
  std::string* mutable_store_name();
  std::string* release_store_name();
  void set_allocated_store_name(std::string* store_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_store_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_store_name(
      std::string* store_name);
  private:
  const std::string& _internal_store_name() const;
  void _internal_set_store_name(const std::string& value);
  std::string* _internal_mutable_store_name();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SaveStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::common::v1::StateItem > states_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr store_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class QueryStateRequest_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryStateRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryStateRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  QueryStateRequest_MetadataEntry_DoNotUse();
  QueryStateRequest_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QueryStateRequest_MetadataEntry_DoNotUse& other);
  static const QueryStateRequest_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QueryStateRequest_MetadataEntry_DoNotUse*>(&_QueryStateRequest_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.QueryStateRequest.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.QueryStateRequest.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[14];
  }

  public:
};

// -------------------------------------------------------------------

class QueryStateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.QueryStateRequest) */ {
 public:
  inline QueryStateRequest() : QueryStateRequest(nullptr) {};
  virtual ~QueryStateRequest();

  QueryStateRequest(const QueryStateRequest& from);
  QueryStateRequest(QueryStateRequest&& from) noexcept
    : QueryStateRequest() {
    *this = ::std::move(from);
  }

  inline QueryStateRequest& operator=(const QueryStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryStateRequest& operator=(QueryStateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryStateRequest* internal_default_instance() {
    return reinterpret_cast<const QueryStateRequest*>(
               &_QueryStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(QueryStateRequest& a, QueryStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryStateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryStateRequest* New() const final {
    return CreateMaybeMessage<QueryStateRequest>(nullptr);
  }

  QueryStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryStateRequest& from);
  void MergeFrom(const QueryStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.QueryStateRequest";
  }
  protected:
  explicit QueryStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kStoreNameFieldNumber = 1,
    kQueryFieldNumber = 2,
  };
  // map<string, string> metadata = 3;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string store_name = 1[json_name = "storeName"];
  void clear_store_name();
  const std::string& store_name() const;
  void set_store_name(const std::string& value);
  void set_store_name(std::string&& value);
  void set_store_name(const char* value);
  void set_store_name(const char* value, size_t size);
  std::string* mutable_store_name();
  std::string* release_store_name();
  void set_allocated_store_name(std::string* store_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_store_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_store_name(
      std::string* store_name);
  private:
  const std::string& _internal_store_name() const;
  void _internal_set_store_name(const std::string& value);
  std::string* _internal_mutable_store_name();
  public:

  // string query = 2;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_query();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_query(
      std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.QueryStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      QueryStateRequest_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr store_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class QueryStateItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.QueryStateItem) */ {
 public:
  inline QueryStateItem() : QueryStateItem(nullptr) {};
  virtual ~QueryStateItem();

  QueryStateItem(const QueryStateItem& from);
  QueryStateItem(QueryStateItem&& from) noexcept
    : QueryStateItem() {
    *this = ::std::move(from);
  }

  inline QueryStateItem& operator=(const QueryStateItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryStateItem& operator=(QueryStateItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryStateItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryStateItem* internal_default_instance() {
    return reinterpret_cast<const QueryStateItem*>(
               &_QueryStateItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(QueryStateItem& a, QueryStateItem& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryStateItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryStateItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryStateItem* New() const final {
    return CreateMaybeMessage<QueryStateItem>(nullptr);
  }

  QueryStateItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryStateItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryStateItem& from);
  void MergeFrom(const QueryStateItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryStateItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.QueryStateItem";
  }
  protected:
  explicit QueryStateItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kDataFieldNumber = 2,
    kEtagFieldNumber = 3,
    kErrorFieldNumber = 4,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string etag = 3;
  void clear_etag();
  const std::string& etag() const;
  void set_etag(const std::string& value);
  void set_etag(std::string&& value);
  void set_etag(const char* value);
  void set_etag(const char* value, size_t size);
  std::string* mutable_etag();
  std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_etag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_etag(
      std::string* etag);
  private:
  const std::string& _internal_etag() const;
  void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // string error = 4;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_error();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_error(
      std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.QueryStateItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class QueryStateResponse_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryStateResponse_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryStateResponse_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  QueryStateResponse_MetadataEntry_DoNotUse();
  QueryStateResponse_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QueryStateResponse_MetadataEntry_DoNotUse& other);
  static const QueryStateResponse_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QueryStateResponse_MetadataEntry_DoNotUse*>(&_QueryStateResponse_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.QueryStateResponse.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.QueryStateResponse.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[17];
  }

  public:
};

// -------------------------------------------------------------------

class QueryStateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.QueryStateResponse) */ {
 public:
  inline QueryStateResponse() : QueryStateResponse(nullptr) {};
  virtual ~QueryStateResponse();

  QueryStateResponse(const QueryStateResponse& from);
  QueryStateResponse(QueryStateResponse&& from) noexcept
    : QueryStateResponse() {
    *this = ::std::move(from);
  }

  inline QueryStateResponse& operator=(const QueryStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryStateResponse& operator=(QueryStateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryStateResponse* internal_default_instance() {
    return reinterpret_cast<const QueryStateResponse*>(
               &_QueryStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(QueryStateResponse& a, QueryStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryStateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryStateResponse* New() const final {
    return CreateMaybeMessage<QueryStateResponse>(nullptr);
  }

  QueryStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryStateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryStateResponse& from);
  void MergeFrom(const QueryStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryStateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.QueryStateResponse";
  }
  protected:
  explicit QueryStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
    kMetadataFieldNumber = 3,
    kTokenFieldNumber = 2,
  };
  // repeated .dapr.proto.runtime.v1.QueryStateItem results = 1;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::dapr::proto::runtime::v1::QueryStateItem* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::QueryStateItem >*
      mutable_results();
  private:
  const ::dapr::proto::runtime::v1::QueryStateItem& _internal_results(int index) const;
  ::dapr::proto::runtime::v1::QueryStateItem* _internal_add_results();
  public:
  const ::dapr::proto::runtime::v1::QueryStateItem& results(int index) const;
  ::dapr::proto::runtime::v1::QueryStateItem* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::QueryStateItem >&
      results() const;

  // map<string, string> metadata = 3;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.QueryStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::QueryStateItem > results_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      QueryStateResponse_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class PublishEventRequest_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PublishEventRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PublishEventRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PublishEventRequest_MetadataEntry_DoNotUse();
  PublishEventRequest_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PublishEventRequest_MetadataEntry_DoNotUse& other);
  static const PublishEventRequest_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PublishEventRequest_MetadataEntry_DoNotUse*>(&_PublishEventRequest_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.PublishEventRequest.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.PublishEventRequest.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[19];
  }

  public:
};

// -------------------------------------------------------------------

class PublishEventRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.PublishEventRequest) */ {
 public:
  inline PublishEventRequest() : PublishEventRequest(nullptr) {};
  virtual ~PublishEventRequest();

  PublishEventRequest(const PublishEventRequest& from);
  PublishEventRequest(PublishEventRequest&& from) noexcept
    : PublishEventRequest() {
    *this = ::std::move(from);
  }

  inline PublishEventRequest& operator=(const PublishEventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishEventRequest& operator=(PublishEventRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublishEventRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishEventRequest* internal_default_instance() {
    return reinterpret_cast<const PublishEventRequest*>(
               &_PublishEventRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PublishEventRequest& a, PublishEventRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishEventRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishEventRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublishEventRequest* New() const final {
    return CreateMaybeMessage<PublishEventRequest>(nullptr);
  }

  PublishEventRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublishEventRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublishEventRequest& from);
  void MergeFrom(const PublishEventRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishEventRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.PublishEventRequest";
  }
  protected:
  explicit PublishEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 5,
    kPubsubNameFieldNumber = 1,
    kTopicFieldNumber = 2,
    kDataFieldNumber = 3,
    kDataContentTypeFieldNumber = 4,
  };
  // map<string, string> metadata = 5;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string pubsub_name = 1;
  void clear_pubsub_name();
  const std::string& pubsub_name() const;
  void set_pubsub_name(const std::string& value);
  void set_pubsub_name(std::string&& value);
  void set_pubsub_name(const char* value);
  void set_pubsub_name(const char* value, size_t size);
  std::string* mutable_pubsub_name();
  std::string* release_pubsub_name();
  void set_allocated_pubsub_name(std::string* pubsub_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pubsub_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pubsub_name(
      std::string* pubsub_name);
  private:
  const std::string& _internal_pubsub_name() const;
  void _internal_set_pubsub_name(const std::string& value);
  std::string* _internal_mutable_pubsub_name();
  public:

  // string topic = 2;
  void clear_topic();
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_topic();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_topic(
      std::string* topic);
  private:
  const std::string& _internal_topic() const;
  void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string data_content_type = 4;
  void clear_data_content_type();
  const std::string& data_content_type() const;
  void set_data_content_type(const std::string& value);
  void set_data_content_type(std::string&& value);
  void set_data_content_type(const char* value);
  void set_data_content_type(const char* value, size_t size);
  std::string* mutable_data_content_type();
  std::string* release_data_content_type();
  void set_allocated_data_content_type(std::string* data_content_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data_content_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data_content_type(
      std::string* data_content_type);
  private:
  const std::string& _internal_data_content_type() const;
  void _internal_set_data_content_type(const std::string& value);
  std::string* _internal_mutable_data_content_type();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.PublishEventRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PublishEventRequest_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubsub_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_content_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class BulkPublishRequest_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BulkPublishRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BulkPublishRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  BulkPublishRequest_MetadataEntry_DoNotUse();
  BulkPublishRequest_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BulkPublishRequest_MetadataEntry_DoNotUse& other);
  static const BulkPublishRequest_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BulkPublishRequest_MetadataEntry_DoNotUse*>(&_BulkPublishRequest_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.BulkPublishRequest.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.BulkPublishRequest.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[21];
  }

  public:
};

// -------------------------------------------------------------------

class BulkPublishRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.BulkPublishRequest) */ {
 public:
  inline BulkPublishRequest() : BulkPublishRequest(nullptr) {};
  virtual ~BulkPublishRequest();

  BulkPublishRequest(const BulkPublishRequest& from);
  BulkPublishRequest(BulkPublishRequest&& from) noexcept
    : BulkPublishRequest() {
    *this = ::std::move(from);
  }

  inline BulkPublishRequest& operator=(const BulkPublishRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkPublishRequest& operator=(BulkPublishRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkPublishRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BulkPublishRequest* internal_default_instance() {
    return reinterpret_cast<const BulkPublishRequest*>(
               &_BulkPublishRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(BulkPublishRequest& a, BulkPublishRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkPublishRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkPublishRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkPublishRequest* New() const final {
    return CreateMaybeMessage<BulkPublishRequest>(nullptr);
  }

  BulkPublishRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkPublishRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkPublishRequest& from);
  void MergeFrom(const BulkPublishRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkPublishRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.BulkPublishRequest";
  }
  protected:
  explicit BulkPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 3,
    kMetadataFieldNumber = 4,
    kPubsubNameFieldNumber = 1,
    kTopicFieldNumber = 2,
  };
  // repeated .dapr.proto.runtime.v1.BulkPublishRequestEntry entries = 3;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::dapr::proto::runtime::v1::BulkPublishRequestEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::BulkPublishRequestEntry >*
      mutable_entries();
  private:
  const ::dapr::proto::runtime::v1::BulkPublishRequestEntry& _internal_entries(int index) const;
  ::dapr::proto::runtime::v1::BulkPublishRequestEntry* _internal_add_entries();
  public:
  const ::dapr::proto::runtime::v1::BulkPublishRequestEntry& entries(int index) const;
  ::dapr::proto::runtime::v1::BulkPublishRequestEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::BulkPublishRequestEntry >&
      entries() const;

  // map<string, string> metadata = 4;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string pubsub_name = 1;
  void clear_pubsub_name();
  const std::string& pubsub_name() const;
  void set_pubsub_name(const std::string& value);
  void set_pubsub_name(std::string&& value);
  void set_pubsub_name(const char* value);
  void set_pubsub_name(const char* value, size_t size);
  std::string* mutable_pubsub_name();
  std::string* release_pubsub_name();
  void set_allocated_pubsub_name(std::string* pubsub_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pubsub_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pubsub_name(
      std::string* pubsub_name);
  private:
  const std::string& _internal_pubsub_name() const;
  void _internal_set_pubsub_name(const std::string& value);
  std::string* _internal_mutable_pubsub_name();
  public:

  // string topic = 2;
  void clear_topic();
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_topic();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_topic(
      std::string* topic);
  private:
  const std::string& _internal_topic() const;
  void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.BulkPublishRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::BulkPublishRequestEntry > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BulkPublishRequest_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubsub_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class BulkPublishRequestEntry_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BulkPublishRequestEntry_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BulkPublishRequestEntry_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  BulkPublishRequestEntry_MetadataEntry_DoNotUse();
  BulkPublishRequestEntry_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BulkPublishRequestEntry_MetadataEntry_DoNotUse& other);
  static const BulkPublishRequestEntry_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BulkPublishRequestEntry_MetadataEntry_DoNotUse*>(&_BulkPublishRequestEntry_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.BulkPublishRequestEntry.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.BulkPublishRequestEntry.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[23];
  }

  public:
};

// -------------------------------------------------------------------

class BulkPublishRequestEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.BulkPublishRequestEntry) */ {
 public:
  inline BulkPublishRequestEntry() : BulkPublishRequestEntry(nullptr) {};
  virtual ~BulkPublishRequestEntry();

  BulkPublishRequestEntry(const BulkPublishRequestEntry& from);
  BulkPublishRequestEntry(BulkPublishRequestEntry&& from) noexcept
    : BulkPublishRequestEntry() {
    *this = ::std::move(from);
  }

  inline BulkPublishRequestEntry& operator=(const BulkPublishRequestEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkPublishRequestEntry& operator=(BulkPublishRequestEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkPublishRequestEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BulkPublishRequestEntry* internal_default_instance() {
    return reinterpret_cast<const BulkPublishRequestEntry*>(
               &_BulkPublishRequestEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(BulkPublishRequestEntry& a, BulkPublishRequestEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkPublishRequestEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkPublishRequestEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkPublishRequestEntry* New() const final {
    return CreateMaybeMessage<BulkPublishRequestEntry>(nullptr);
  }

  BulkPublishRequestEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkPublishRequestEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkPublishRequestEntry& from);
  void MergeFrom(const BulkPublishRequestEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkPublishRequestEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.BulkPublishRequestEntry";
  }
  protected:
  explicit BulkPublishRequestEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 4,
    kEntryIdFieldNumber = 1,
    kEventFieldNumber = 2,
    kContentTypeFieldNumber = 3,
  };
  // map<string, string> metadata = 4;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string entry_id = 1;
  void clear_entry_id();
  const std::string& entry_id() const;
  void set_entry_id(const std::string& value);
  void set_entry_id(std::string&& value);
  void set_entry_id(const char* value);
  void set_entry_id(const char* value, size_t size);
  std::string* mutable_entry_id();
  std::string* release_entry_id();
  void set_allocated_entry_id(std::string* entry_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_entry_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_entry_id(
      std::string* entry_id);
  private:
  const std::string& _internal_entry_id() const;
  void _internal_set_entry_id(const std::string& value);
  std::string* _internal_mutable_entry_id();
  public:

  // bytes event = 2;
  void clear_event();
  const std::string& event() const;
  void set_event(const std::string& value);
  void set_event(std::string&& value);
  void set_event(const char* value);
  void set_event(const void* value, size_t size);
  std::string* mutable_event();
  std::string* release_event();
  void set_allocated_event(std::string* event);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_event();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_event(
      std::string* event);
  private:
  const std::string& _internal_event() const;
  void _internal_set_event(const std::string& value);
  std::string* _internal_mutable_event();
  public:

  // string content_type = 3;
  void clear_content_type();
  const std::string& content_type() const;
  void set_content_type(const std::string& value);
  void set_content_type(std::string&& value);
  void set_content_type(const char* value);
  void set_content_type(const char* value, size_t size);
  std::string* mutable_content_type();
  std::string* release_content_type();
  void set_allocated_content_type(std::string* content_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_content_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content_type(
      std::string* content_type);
  private:
  const std::string& _internal_content_type() const;
  void _internal_set_content_type(const std::string& value);
  std::string* _internal_mutable_content_type();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.BulkPublishRequestEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BulkPublishRequestEntry_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entry_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class BulkPublishResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.BulkPublishResponse) */ {
 public:
  inline BulkPublishResponse() : BulkPublishResponse(nullptr) {};
  virtual ~BulkPublishResponse();

  BulkPublishResponse(const BulkPublishResponse& from);
  BulkPublishResponse(BulkPublishResponse&& from) noexcept
    : BulkPublishResponse() {
    *this = ::std::move(from);
  }

  inline BulkPublishResponse& operator=(const BulkPublishResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkPublishResponse& operator=(BulkPublishResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkPublishResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BulkPublishResponse* internal_default_instance() {
    return reinterpret_cast<const BulkPublishResponse*>(
               &_BulkPublishResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(BulkPublishResponse& a, BulkPublishResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkPublishResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkPublishResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkPublishResponse* New() const final {
    return CreateMaybeMessage<BulkPublishResponse>(nullptr);
  }

  BulkPublishResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkPublishResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkPublishResponse& from);
  void MergeFrom(const BulkPublishResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkPublishResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.BulkPublishResponse";
  }
  protected:
  explicit BulkPublishResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFailedEntriesFieldNumber = 1,
  };
  // repeated .dapr.proto.runtime.v1.BulkPublishResponseFailedEntry failedEntries = 1;
  int failedentries_size() const;
  private:
  int _internal_failedentries_size() const;
  public:
  void clear_failedentries();
  ::dapr::proto::runtime::v1::BulkPublishResponseFailedEntry* mutable_failedentries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::BulkPublishResponseFailedEntry >*
      mutable_failedentries();
  private:
  const ::dapr::proto::runtime::v1::BulkPublishResponseFailedEntry& _internal_failedentries(int index) const;
  ::dapr::proto::runtime::v1::BulkPublishResponseFailedEntry* _internal_add_failedentries();
  public:
  const ::dapr::proto::runtime::v1::BulkPublishResponseFailedEntry& failedentries(int index) const;
  ::dapr::proto::runtime::v1::BulkPublishResponseFailedEntry* add_failedentries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::BulkPublishResponseFailedEntry >&
      failedentries() const;

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.BulkPublishResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::BulkPublishResponseFailedEntry > failedentries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class BulkPublishResponseFailedEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.BulkPublishResponseFailedEntry) */ {
 public:
  inline BulkPublishResponseFailedEntry() : BulkPublishResponseFailedEntry(nullptr) {};
  virtual ~BulkPublishResponseFailedEntry();

  BulkPublishResponseFailedEntry(const BulkPublishResponseFailedEntry& from);
  BulkPublishResponseFailedEntry(BulkPublishResponseFailedEntry&& from) noexcept
    : BulkPublishResponseFailedEntry() {
    *this = ::std::move(from);
  }

  inline BulkPublishResponseFailedEntry& operator=(const BulkPublishResponseFailedEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkPublishResponseFailedEntry& operator=(BulkPublishResponseFailedEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulkPublishResponseFailedEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BulkPublishResponseFailedEntry* internal_default_instance() {
    return reinterpret_cast<const BulkPublishResponseFailedEntry*>(
               &_BulkPublishResponseFailedEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(BulkPublishResponseFailedEntry& a, BulkPublishResponseFailedEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkPublishResponseFailedEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkPublishResponseFailedEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulkPublishResponseFailedEntry* New() const final {
    return CreateMaybeMessage<BulkPublishResponseFailedEntry>(nullptr);
  }

  BulkPublishResponseFailedEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulkPublishResponseFailedEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulkPublishResponseFailedEntry& from);
  void MergeFrom(const BulkPublishResponseFailedEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkPublishResponseFailedEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.BulkPublishResponseFailedEntry";
  }
  protected:
  explicit BulkPublishResponseFailedEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryIdFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string entry_id = 1;
  void clear_entry_id();
  const std::string& entry_id() const;
  void set_entry_id(const std::string& value);
  void set_entry_id(std::string&& value);
  void set_entry_id(const char* value);
  void set_entry_id(const char* value, size_t size);
  std::string* mutable_entry_id();
  std::string* release_entry_id();
  void set_allocated_entry_id(std::string* entry_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_entry_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_entry_id(
      std::string* entry_id);
  private:
  const std::string& _internal_entry_id() const;
  void _internal_set_entry_id(const std::string& value);
  std::string* _internal_mutable_entry_id();
  public:

  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_error();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_error(
      std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.BulkPublishResponseFailedEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entry_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SubscribeTopicEventsRequestAlpha1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SubscribeTopicEventsRequestAlpha1) */ {
 public:
  inline SubscribeTopicEventsRequestAlpha1() : SubscribeTopicEventsRequestAlpha1(nullptr) {};
  virtual ~SubscribeTopicEventsRequestAlpha1();

  SubscribeTopicEventsRequestAlpha1(const SubscribeTopicEventsRequestAlpha1& from);
  SubscribeTopicEventsRequestAlpha1(SubscribeTopicEventsRequestAlpha1&& from) noexcept
    : SubscribeTopicEventsRequestAlpha1() {
    *this = ::std::move(from);
  }

  inline SubscribeTopicEventsRequestAlpha1& operator=(const SubscribeTopicEventsRequestAlpha1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeTopicEventsRequestAlpha1& operator=(SubscribeTopicEventsRequestAlpha1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeTopicEventsRequestAlpha1& default_instance();

  enum SubscribeTopicEventsRequestTypeCase {
    kInitialRequest = 1,
    kEventProcessed = 2,
    SUBSCRIBE_TOPIC_EVENTS_REQUEST_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeTopicEventsRequestAlpha1* internal_default_instance() {
    return reinterpret_cast<const SubscribeTopicEventsRequestAlpha1*>(
               &_SubscribeTopicEventsRequestAlpha1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SubscribeTopicEventsRequestAlpha1& a, SubscribeTopicEventsRequestAlpha1& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeTopicEventsRequestAlpha1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeTopicEventsRequestAlpha1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeTopicEventsRequestAlpha1* New() const final {
    return CreateMaybeMessage<SubscribeTopicEventsRequestAlpha1>(nullptr);
  }

  SubscribeTopicEventsRequestAlpha1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeTopicEventsRequestAlpha1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeTopicEventsRequestAlpha1& from);
  void MergeFrom(const SubscribeTopicEventsRequestAlpha1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeTopicEventsRequestAlpha1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SubscribeTopicEventsRequestAlpha1";
  }
  protected:
  explicit SubscribeTopicEventsRequestAlpha1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitialRequestFieldNumber = 1,
    kEventProcessedFieldNumber = 2,
  };
  // .dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1 initial_request = 1;
  bool has_initial_request() const;
  private:
  bool _internal_has_initial_request() const;
  public:
  void clear_initial_request();
  const ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1& initial_request() const;
  ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1* release_initial_request();
  ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1* mutable_initial_request();
  void set_allocated_initial_request(::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1* initial_request);
  private:
  const ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1& _internal_initial_request() const;
  ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1* _internal_mutable_initial_request();
  public:
  void unsafe_arena_set_allocated_initial_request(
      ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1* initial_request);
  ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1* unsafe_arena_release_initial_request();

  // .dapr.proto.runtime.v1.SubscribeTopicEventsRequestProcessedAlpha1 event_processed = 2;
  bool has_event_processed() const;
  private:
  bool _internal_has_event_processed() const;
  public:
  void clear_event_processed();
  const ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestProcessedAlpha1& event_processed() const;
  ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestProcessedAlpha1* release_event_processed();
  ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestProcessedAlpha1* mutable_event_processed();
  void set_allocated_event_processed(::dapr::proto::runtime::v1::SubscribeTopicEventsRequestProcessedAlpha1* event_processed);
  private:
  const ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestProcessedAlpha1& _internal_event_processed() const;
  ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestProcessedAlpha1* _internal_mutable_event_processed();
  public:
  void unsafe_arena_set_allocated_event_processed(
      ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestProcessedAlpha1* event_processed);
  ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestProcessedAlpha1* unsafe_arena_release_event_processed();

  void clear_subscribe_topic_events_request_type();
  SubscribeTopicEventsRequestTypeCase subscribe_topic_events_request_type_case() const;
  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SubscribeTopicEventsRequestAlpha1)
 private:
  class _Internal;
  void set_has_initial_request();
  void set_has_event_processed();

  inline bool has_subscribe_topic_events_request_type() const;
  inline void clear_has_subscribe_topic_events_request_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union SubscribeTopicEventsRequestTypeUnion {
    SubscribeTopicEventsRequestTypeUnion() {}
    ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1* initial_request_;
    ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestProcessedAlpha1* event_processed_;
  } subscribe_topic_events_request_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SubscribeTopicEventsRequestInitialAlpha1_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SubscribeTopicEventsRequestInitialAlpha1_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SubscribeTopicEventsRequestInitialAlpha1_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  SubscribeTopicEventsRequestInitialAlpha1_MetadataEntry_DoNotUse();
  SubscribeTopicEventsRequestInitialAlpha1_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SubscribeTopicEventsRequestInitialAlpha1_MetadataEntry_DoNotUse& other);
  static const SubscribeTopicEventsRequestInitialAlpha1_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SubscribeTopicEventsRequestInitialAlpha1_MetadataEntry_DoNotUse*>(&_SubscribeTopicEventsRequestInitialAlpha1_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[28];
  }

  public:
};

// -------------------------------------------------------------------

class SubscribeTopicEventsRequestInitialAlpha1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1) */ {
 public:
  inline SubscribeTopicEventsRequestInitialAlpha1() : SubscribeTopicEventsRequestInitialAlpha1(nullptr) {};
  virtual ~SubscribeTopicEventsRequestInitialAlpha1();

  SubscribeTopicEventsRequestInitialAlpha1(const SubscribeTopicEventsRequestInitialAlpha1& from);
  SubscribeTopicEventsRequestInitialAlpha1(SubscribeTopicEventsRequestInitialAlpha1&& from) noexcept
    : SubscribeTopicEventsRequestInitialAlpha1() {
    *this = ::std::move(from);
  }

  inline SubscribeTopicEventsRequestInitialAlpha1& operator=(const SubscribeTopicEventsRequestInitialAlpha1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeTopicEventsRequestInitialAlpha1& operator=(SubscribeTopicEventsRequestInitialAlpha1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeTopicEventsRequestInitialAlpha1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeTopicEventsRequestInitialAlpha1* internal_default_instance() {
    return reinterpret_cast<const SubscribeTopicEventsRequestInitialAlpha1*>(
               &_SubscribeTopicEventsRequestInitialAlpha1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SubscribeTopicEventsRequestInitialAlpha1& a, SubscribeTopicEventsRequestInitialAlpha1& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeTopicEventsRequestInitialAlpha1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeTopicEventsRequestInitialAlpha1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeTopicEventsRequestInitialAlpha1* New() const final {
    return CreateMaybeMessage<SubscribeTopicEventsRequestInitialAlpha1>(nullptr);
  }

  SubscribeTopicEventsRequestInitialAlpha1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeTopicEventsRequestInitialAlpha1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeTopicEventsRequestInitialAlpha1& from);
  void MergeFrom(const SubscribeTopicEventsRequestInitialAlpha1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeTopicEventsRequestInitialAlpha1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1";
  }
  protected:
  explicit SubscribeTopicEventsRequestInitialAlpha1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kPubsubNameFieldNumber = 1,
    kTopicFieldNumber = 2,
    kDeadLetterTopicFieldNumber = 4,
  };
  // map<string, string> metadata = 3;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string pubsub_name = 1;
  void clear_pubsub_name();
  const std::string& pubsub_name() const;
  void set_pubsub_name(const std::string& value);
  void set_pubsub_name(std::string&& value);
  void set_pubsub_name(const char* value);
  void set_pubsub_name(const char* value, size_t size);
  std::string* mutable_pubsub_name();
  std::string* release_pubsub_name();
  void set_allocated_pubsub_name(std::string* pubsub_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pubsub_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pubsub_name(
      std::string* pubsub_name);
  private:
  const std::string& _internal_pubsub_name() const;
  void _internal_set_pubsub_name(const std::string& value);
  std::string* _internal_mutable_pubsub_name();
  public:

  // string topic = 2;
  void clear_topic();
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_topic();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_topic(
      std::string* topic);
  private:
  const std::string& _internal_topic() const;
  void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // string dead_letter_topic = 4;
  bool has_dead_letter_topic() const;
  private:
  bool _internal_has_dead_letter_topic() const;
  public:
  void clear_dead_letter_topic();
  const std::string& dead_letter_topic() const;
  void set_dead_letter_topic(const std::string& value);
  void set_dead_letter_topic(std::string&& value);
  void set_dead_letter_topic(const char* value);
  void set_dead_letter_topic(const char* value, size_t size);
  std::string* mutable_dead_letter_topic();
  std::string* release_dead_letter_topic();
  void set_allocated_dead_letter_topic(std::string* dead_letter_topic);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dead_letter_topic();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dead_letter_topic(
      std::string* dead_letter_topic);
  private:
  const std::string& _internal_dead_letter_topic() const;
  void _internal_set_dead_letter_topic(const std::string& value);
  std::string* _internal_mutable_dead_letter_topic();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SubscribeTopicEventsRequestInitialAlpha1_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubsub_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dead_letter_topic_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SubscribeTopicEventsRequestProcessedAlpha1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SubscribeTopicEventsRequestProcessedAlpha1) */ {
 public:
  inline SubscribeTopicEventsRequestProcessedAlpha1() : SubscribeTopicEventsRequestProcessedAlpha1(nullptr) {};
  virtual ~SubscribeTopicEventsRequestProcessedAlpha1();

  SubscribeTopicEventsRequestProcessedAlpha1(const SubscribeTopicEventsRequestProcessedAlpha1& from);
  SubscribeTopicEventsRequestProcessedAlpha1(SubscribeTopicEventsRequestProcessedAlpha1&& from) noexcept
    : SubscribeTopicEventsRequestProcessedAlpha1() {
    *this = ::std::move(from);
  }

  inline SubscribeTopicEventsRequestProcessedAlpha1& operator=(const SubscribeTopicEventsRequestProcessedAlpha1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeTopicEventsRequestProcessedAlpha1& operator=(SubscribeTopicEventsRequestProcessedAlpha1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeTopicEventsRequestProcessedAlpha1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeTopicEventsRequestProcessedAlpha1* internal_default_instance() {
    return reinterpret_cast<const SubscribeTopicEventsRequestProcessedAlpha1*>(
               &_SubscribeTopicEventsRequestProcessedAlpha1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SubscribeTopicEventsRequestProcessedAlpha1& a, SubscribeTopicEventsRequestProcessedAlpha1& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeTopicEventsRequestProcessedAlpha1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeTopicEventsRequestProcessedAlpha1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeTopicEventsRequestProcessedAlpha1* New() const final {
    return CreateMaybeMessage<SubscribeTopicEventsRequestProcessedAlpha1>(nullptr);
  }

  SubscribeTopicEventsRequestProcessedAlpha1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeTopicEventsRequestProcessedAlpha1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeTopicEventsRequestProcessedAlpha1& from);
  void MergeFrom(const SubscribeTopicEventsRequestProcessedAlpha1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeTopicEventsRequestProcessedAlpha1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SubscribeTopicEventsRequestProcessedAlpha1";
  }
  protected:
  explicit SubscribeTopicEventsRequestProcessedAlpha1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .dapr.proto.runtime.v1.TopicEventResponse status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::dapr::proto::runtime::v1::TopicEventResponse& status() const;
  ::dapr::proto::runtime::v1::TopicEventResponse* release_status();
  ::dapr::proto::runtime::v1::TopicEventResponse* mutable_status();
  void set_allocated_status(::dapr::proto::runtime::v1::TopicEventResponse* status);
  private:
  const ::dapr::proto::runtime::v1::TopicEventResponse& _internal_status() const;
  ::dapr::proto::runtime::v1::TopicEventResponse* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::dapr::proto::runtime::v1::TopicEventResponse* status);
  ::dapr::proto::runtime::v1::TopicEventResponse* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SubscribeTopicEventsRequestProcessedAlpha1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::dapr::proto::runtime::v1::TopicEventResponse* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SubscribeTopicEventsResponseAlpha1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SubscribeTopicEventsResponseAlpha1) */ {
 public:
  inline SubscribeTopicEventsResponseAlpha1() : SubscribeTopicEventsResponseAlpha1(nullptr) {};
  virtual ~SubscribeTopicEventsResponseAlpha1();

  SubscribeTopicEventsResponseAlpha1(const SubscribeTopicEventsResponseAlpha1& from);
  SubscribeTopicEventsResponseAlpha1(SubscribeTopicEventsResponseAlpha1&& from) noexcept
    : SubscribeTopicEventsResponseAlpha1() {
    *this = ::std::move(from);
  }

  inline SubscribeTopicEventsResponseAlpha1& operator=(const SubscribeTopicEventsResponseAlpha1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeTopicEventsResponseAlpha1& operator=(SubscribeTopicEventsResponseAlpha1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeTopicEventsResponseAlpha1& default_instance();

  enum SubscribeTopicEventsResponseTypeCase {
    kInitialResponse = 1,
    kEventMessage = 2,
    SUBSCRIBE_TOPIC_EVENTS_RESPONSE_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeTopicEventsResponseAlpha1* internal_default_instance() {
    return reinterpret_cast<const SubscribeTopicEventsResponseAlpha1*>(
               &_SubscribeTopicEventsResponseAlpha1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SubscribeTopicEventsResponseAlpha1& a, SubscribeTopicEventsResponseAlpha1& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeTopicEventsResponseAlpha1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeTopicEventsResponseAlpha1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeTopicEventsResponseAlpha1* New() const final {
    return CreateMaybeMessage<SubscribeTopicEventsResponseAlpha1>(nullptr);
  }

  SubscribeTopicEventsResponseAlpha1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeTopicEventsResponseAlpha1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeTopicEventsResponseAlpha1& from);
  void MergeFrom(const SubscribeTopicEventsResponseAlpha1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeTopicEventsResponseAlpha1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SubscribeTopicEventsResponseAlpha1";
  }
  protected:
  explicit SubscribeTopicEventsResponseAlpha1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitialResponseFieldNumber = 1,
    kEventMessageFieldNumber = 2,
  };
  // .dapr.proto.runtime.v1.SubscribeTopicEventsResponseInitialAlpha1 initial_response = 1;
  bool has_initial_response() const;
  private:
  bool _internal_has_initial_response() const;
  public:
  void clear_initial_response();
  const ::dapr::proto::runtime::v1::SubscribeTopicEventsResponseInitialAlpha1& initial_response() const;
  ::dapr::proto::runtime::v1::SubscribeTopicEventsResponseInitialAlpha1* release_initial_response();
  ::dapr::proto::runtime::v1::SubscribeTopicEventsResponseInitialAlpha1* mutable_initial_response();
  void set_allocated_initial_response(::dapr::proto::runtime::v1::SubscribeTopicEventsResponseInitialAlpha1* initial_response);
  private:
  const ::dapr::proto::runtime::v1::SubscribeTopicEventsResponseInitialAlpha1& _internal_initial_response() const;
  ::dapr::proto::runtime::v1::SubscribeTopicEventsResponseInitialAlpha1* _internal_mutable_initial_response();
  public:
  void unsafe_arena_set_allocated_initial_response(
      ::dapr::proto::runtime::v1::SubscribeTopicEventsResponseInitialAlpha1* initial_response);
  ::dapr::proto::runtime::v1::SubscribeTopicEventsResponseInitialAlpha1* unsafe_arena_release_initial_response();

  // .dapr.proto.runtime.v1.TopicEventRequest event_message = 2;
  bool has_event_message() const;
  private:
  bool _internal_has_event_message() const;
  public:
  void clear_event_message();
  const ::dapr::proto::runtime::v1::TopicEventRequest& event_message() const;
  ::dapr::proto::runtime::v1::TopicEventRequest* release_event_message();
  ::dapr::proto::runtime::v1::TopicEventRequest* mutable_event_message();
  void set_allocated_event_message(::dapr::proto::runtime::v1::TopicEventRequest* event_message);
  private:
  const ::dapr::proto::runtime::v1::TopicEventRequest& _internal_event_message() const;
  ::dapr::proto::runtime::v1::TopicEventRequest* _internal_mutable_event_message();
  public:
  void unsafe_arena_set_allocated_event_message(
      ::dapr::proto::runtime::v1::TopicEventRequest* event_message);
  ::dapr::proto::runtime::v1::TopicEventRequest* unsafe_arena_release_event_message();

  void clear_subscribe_topic_events_response_type();
  SubscribeTopicEventsResponseTypeCase subscribe_topic_events_response_type_case() const;
  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SubscribeTopicEventsResponseAlpha1)
 private:
  class _Internal;
  void set_has_initial_response();
  void set_has_event_message();

  inline bool has_subscribe_topic_events_response_type() const;
  inline void clear_has_subscribe_topic_events_response_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union SubscribeTopicEventsResponseTypeUnion {
    SubscribeTopicEventsResponseTypeUnion() {}
    ::dapr::proto::runtime::v1::SubscribeTopicEventsResponseInitialAlpha1* initial_response_;
    ::dapr::proto::runtime::v1::TopicEventRequest* event_message_;
  } subscribe_topic_events_response_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SubscribeTopicEventsResponseInitialAlpha1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SubscribeTopicEventsResponseInitialAlpha1) */ {
 public:
  inline SubscribeTopicEventsResponseInitialAlpha1() : SubscribeTopicEventsResponseInitialAlpha1(nullptr) {};
  virtual ~SubscribeTopicEventsResponseInitialAlpha1();

  SubscribeTopicEventsResponseInitialAlpha1(const SubscribeTopicEventsResponseInitialAlpha1& from);
  SubscribeTopicEventsResponseInitialAlpha1(SubscribeTopicEventsResponseInitialAlpha1&& from) noexcept
    : SubscribeTopicEventsResponseInitialAlpha1() {
    *this = ::std::move(from);
  }

  inline SubscribeTopicEventsResponseInitialAlpha1& operator=(const SubscribeTopicEventsResponseInitialAlpha1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeTopicEventsResponseInitialAlpha1& operator=(SubscribeTopicEventsResponseInitialAlpha1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeTopicEventsResponseInitialAlpha1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeTopicEventsResponseInitialAlpha1* internal_default_instance() {
    return reinterpret_cast<const SubscribeTopicEventsResponseInitialAlpha1*>(
               &_SubscribeTopicEventsResponseInitialAlpha1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SubscribeTopicEventsResponseInitialAlpha1& a, SubscribeTopicEventsResponseInitialAlpha1& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeTopicEventsResponseInitialAlpha1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeTopicEventsResponseInitialAlpha1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeTopicEventsResponseInitialAlpha1* New() const final {
    return CreateMaybeMessage<SubscribeTopicEventsResponseInitialAlpha1>(nullptr);
  }

  SubscribeTopicEventsResponseInitialAlpha1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeTopicEventsResponseInitialAlpha1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeTopicEventsResponseInitialAlpha1& from);
  void MergeFrom(const SubscribeTopicEventsResponseInitialAlpha1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeTopicEventsResponseInitialAlpha1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SubscribeTopicEventsResponseInitialAlpha1";
  }
  protected:
  explicit SubscribeTopicEventsResponseInitialAlpha1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SubscribeTopicEventsResponseInitialAlpha1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class InvokeBindingRequest_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InvokeBindingRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InvokeBindingRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  InvokeBindingRequest_MetadataEntry_DoNotUse();
  InvokeBindingRequest_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InvokeBindingRequest_MetadataEntry_DoNotUse& other);
  static const InvokeBindingRequest_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InvokeBindingRequest_MetadataEntry_DoNotUse*>(&_InvokeBindingRequest_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.InvokeBindingRequest.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.InvokeBindingRequest.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[33];
  }

  public:
};

// -------------------------------------------------------------------

class InvokeBindingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.InvokeBindingRequest) */ {
 public:
  inline InvokeBindingRequest() : InvokeBindingRequest(nullptr) {};
  virtual ~InvokeBindingRequest();

  InvokeBindingRequest(const InvokeBindingRequest& from);
  InvokeBindingRequest(InvokeBindingRequest&& from) noexcept
    : InvokeBindingRequest() {
    *this = ::std::move(from);
  }

  inline InvokeBindingRequest& operator=(const InvokeBindingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvokeBindingRequest& operator=(InvokeBindingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InvokeBindingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvokeBindingRequest* internal_default_instance() {
    return reinterpret_cast<const InvokeBindingRequest*>(
               &_InvokeBindingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(InvokeBindingRequest& a, InvokeBindingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InvokeBindingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvokeBindingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvokeBindingRequest* New() const final {
    return CreateMaybeMessage<InvokeBindingRequest>(nullptr);
  }

  InvokeBindingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvokeBindingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InvokeBindingRequest& from);
  void MergeFrom(const InvokeBindingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvokeBindingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.InvokeBindingRequest";
  }
  protected:
  explicit InvokeBindingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kNameFieldNumber = 1,
    kDataFieldNumber = 2,
    kOperationFieldNumber = 4,
  };
  // map<string, string> metadata = 3;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string operation = 4;
  void clear_operation();
  const std::string& operation() const;
  void set_operation(const std::string& value);
  void set_operation(std::string&& value);
  void set_operation(const char* value);
  void set_operation(const char* value, size_t size);
  std::string* mutable_operation();
  std::string* release_operation();
  void set_allocated_operation(std::string* operation);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_operation();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_operation(
      std::string* operation);
  private:
  const std::string& _internal_operation() const;
  void _internal_set_operation(const std::string& value);
  std::string* _internal_mutable_operation();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.InvokeBindingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      InvokeBindingRequest_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class InvokeBindingResponse_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InvokeBindingResponse_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InvokeBindingResponse_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  InvokeBindingResponse_MetadataEntry_DoNotUse();
  InvokeBindingResponse_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InvokeBindingResponse_MetadataEntry_DoNotUse& other);
  static const InvokeBindingResponse_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InvokeBindingResponse_MetadataEntry_DoNotUse*>(&_InvokeBindingResponse_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.InvokeBindingResponse.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.InvokeBindingResponse.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[35];
  }

  public:
};

// -------------------------------------------------------------------

class InvokeBindingResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.InvokeBindingResponse) */ {
 public:
  inline InvokeBindingResponse() : InvokeBindingResponse(nullptr) {};
  virtual ~InvokeBindingResponse();

  InvokeBindingResponse(const InvokeBindingResponse& from);
  InvokeBindingResponse(InvokeBindingResponse&& from) noexcept
    : InvokeBindingResponse() {
    *this = ::std::move(from);
  }

  inline InvokeBindingResponse& operator=(const InvokeBindingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvokeBindingResponse& operator=(InvokeBindingResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InvokeBindingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvokeBindingResponse* internal_default_instance() {
    return reinterpret_cast<const InvokeBindingResponse*>(
               &_InvokeBindingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(InvokeBindingResponse& a, InvokeBindingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InvokeBindingResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvokeBindingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvokeBindingResponse* New() const final {
    return CreateMaybeMessage<InvokeBindingResponse>(nullptr);
  }

  InvokeBindingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvokeBindingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InvokeBindingResponse& from);
  void MergeFrom(const InvokeBindingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvokeBindingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.InvokeBindingResponse";
  }
  protected:
  explicit InvokeBindingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 2,
    kDataFieldNumber = 1,
  };
  // map<string, string> metadata = 2;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.InvokeBindingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      InvokeBindingResponse_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class GetSecretRequest_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetSecretRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetSecretRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GetSecretRequest_MetadataEntry_DoNotUse();
  GetSecretRequest_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetSecretRequest_MetadataEntry_DoNotUse& other);
  static const GetSecretRequest_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetSecretRequest_MetadataEntry_DoNotUse*>(&_GetSecretRequest_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.GetSecretRequest.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.GetSecretRequest.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[37];
  }

  public:
};

// -------------------------------------------------------------------

class GetSecretRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.GetSecretRequest) */ {
 public:
  inline GetSecretRequest() : GetSecretRequest(nullptr) {};
  virtual ~GetSecretRequest();

  GetSecretRequest(const GetSecretRequest& from);
  GetSecretRequest(GetSecretRequest&& from) noexcept
    : GetSecretRequest() {
    *this = ::std::move(from);
  }

  inline GetSecretRequest& operator=(const GetSecretRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSecretRequest& operator=(GetSecretRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSecretRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSecretRequest* internal_default_instance() {
    return reinterpret_cast<const GetSecretRequest*>(
               &_GetSecretRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GetSecretRequest& a, GetSecretRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSecretRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSecretRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSecretRequest* New() const final {
    return CreateMaybeMessage<GetSecretRequest>(nullptr);
  }

  GetSecretRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSecretRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSecretRequest& from);
  void MergeFrom(const GetSecretRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSecretRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.GetSecretRequest";
  }
  protected:
  explicit GetSecretRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kStoreNameFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // map<string, string> metadata = 3;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string store_name = 1[json_name = "storeName"];
  void clear_store_name();
  const std::string& store_name() const;
  void set_store_name(const std::string& value);
  void set_store_name(std::string&& value);
  void set_store_name(const char* value);
  void set_store_name(const char* value, size_t size);
  std::string* mutable_store_name();
  std::string* release_store_name();
  void set_allocated_store_name(std::string* store_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_store_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_store_name(
      std::string* store_name);
  private:
  const std::string& _internal_store_name() const;
  void _internal_set_store_name(const std::string& value);
  std::string* _internal_mutable_store_name();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.GetSecretRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetSecretRequest_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr store_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class GetSecretResponse_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetSecretResponse_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetSecretResponse_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GetSecretResponse_DataEntry_DoNotUse();
  GetSecretResponse_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetSecretResponse_DataEntry_DoNotUse& other);
  static const GetSecretResponse_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetSecretResponse_DataEntry_DoNotUse*>(&_GetSecretResponse_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.GetSecretResponse.DataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.GetSecretResponse.DataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[39];
  }

  public:
};

// -------------------------------------------------------------------

class GetSecretResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.GetSecretResponse) */ {
 public:
  inline GetSecretResponse() : GetSecretResponse(nullptr) {};
  virtual ~GetSecretResponse();

  GetSecretResponse(const GetSecretResponse& from);
  GetSecretResponse(GetSecretResponse&& from) noexcept
    : GetSecretResponse() {
    *this = ::std::move(from);
  }

  inline GetSecretResponse& operator=(const GetSecretResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSecretResponse& operator=(GetSecretResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSecretResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSecretResponse* internal_default_instance() {
    return reinterpret_cast<const GetSecretResponse*>(
               &_GetSecretResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(GetSecretResponse& a, GetSecretResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSecretResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSecretResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSecretResponse* New() const final {
    return CreateMaybeMessage<GetSecretResponse>(nullptr);
  }

  GetSecretResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSecretResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSecretResponse& from);
  void MergeFrom(const GetSecretResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSecretResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.GetSecretResponse";
  }
  protected:
  explicit GetSecretResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // map<string, string> data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.GetSecretResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetSecretResponse_DataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class GetBulkSecretRequest_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetBulkSecretRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetBulkSecretRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GetBulkSecretRequest_MetadataEntry_DoNotUse();
  GetBulkSecretRequest_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetBulkSecretRequest_MetadataEntry_DoNotUse& other);
  static const GetBulkSecretRequest_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetBulkSecretRequest_MetadataEntry_DoNotUse*>(&_GetBulkSecretRequest_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.GetBulkSecretRequest.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.GetBulkSecretRequest.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[41];
  }

  public:
};

// -------------------------------------------------------------------

class GetBulkSecretRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.GetBulkSecretRequest) */ {
 public:
  inline GetBulkSecretRequest() : GetBulkSecretRequest(nullptr) {};
  virtual ~GetBulkSecretRequest();

  GetBulkSecretRequest(const GetBulkSecretRequest& from);
  GetBulkSecretRequest(GetBulkSecretRequest&& from) noexcept
    : GetBulkSecretRequest() {
    *this = ::std::move(from);
  }

  inline GetBulkSecretRequest& operator=(const GetBulkSecretRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBulkSecretRequest& operator=(GetBulkSecretRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBulkSecretRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBulkSecretRequest* internal_default_instance() {
    return reinterpret_cast<const GetBulkSecretRequest*>(
               &_GetBulkSecretRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(GetBulkSecretRequest& a, GetBulkSecretRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBulkSecretRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBulkSecretRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBulkSecretRequest* New() const final {
    return CreateMaybeMessage<GetBulkSecretRequest>(nullptr);
  }

  GetBulkSecretRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBulkSecretRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBulkSecretRequest& from);
  void MergeFrom(const GetBulkSecretRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBulkSecretRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.GetBulkSecretRequest";
  }
  protected:
  explicit GetBulkSecretRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 2,
    kStoreNameFieldNumber = 1,
  };
  // map<string, string> metadata = 2;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string store_name = 1[json_name = "storeName"];
  void clear_store_name();
  const std::string& store_name() const;
  void set_store_name(const std::string& value);
  void set_store_name(std::string&& value);
  void set_store_name(const char* value);
  void set_store_name(const char* value, size_t size);
  std::string* mutable_store_name();
  std::string* release_store_name();
  void set_allocated_store_name(std::string* store_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_store_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_store_name(
      std::string* store_name);
  private:
  const std::string& _internal_store_name() const;
  void _internal_set_store_name(const std::string& value);
  std::string* _internal_mutable_store_name();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.GetBulkSecretRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetBulkSecretRequest_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr store_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SecretResponse_SecretsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SecretResponse_SecretsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SecretResponse_SecretsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  SecretResponse_SecretsEntry_DoNotUse();
  SecretResponse_SecretsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SecretResponse_SecretsEntry_DoNotUse& other);
  static const SecretResponse_SecretsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SecretResponse_SecretsEntry_DoNotUse*>(&_SecretResponse_SecretsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.SecretResponse.SecretsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.SecretResponse.SecretsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[43];
  }

  public:
};

// -------------------------------------------------------------------

class SecretResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SecretResponse) */ {
 public:
  inline SecretResponse() : SecretResponse(nullptr) {};
  virtual ~SecretResponse();

  SecretResponse(const SecretResponse& from);
  SecretResponse(SecretResponse&& from) noexcept
    : SecretResponse() {
    *this = ::std::move(from);
  }

  inline SecretResponse& operator=(const SecretResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecretResponse& operator=(SecretResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecretResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecretResponse* internal_default_instance() {
    return reinterpret_cast<const SecretResponse*>(
               &_SecretResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(SecretResponse& a, SecretResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SecretResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecretResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecretResponse* New() const final {
    return CreateMaybeMessage<SecretResponse>(nullptr);
  }

  SecretResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecretResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecretResponse& from);
  void MergeFrom(const SecretResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecretResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SecretResponse";
  }
  protected:
  explicit SecretResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSecretsFieldNumber = 1,
  };
  // map<string, string> secrets = 1;
  int secrets_size() const;
  private:
  int _internal_secrets_size() const;
  public:
  void clear_secrets();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_secrets() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_secrets();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      secrets() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_secrets();

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SecretResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SecretResponse_SecretsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > secrets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class GetBulkSecretResponse_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetBulkSecretResponse_DataEntry_DoNotUse, 
    std::string, ::dapr::proto::runtime::v1::SecretResponse,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetBulkSecretResponse_DataEntry_DoNotUse, 
    std::string, ::dapr::proto::runtime::v1::SecretResponse,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GetBulkSecretResponse_DataEntry_DoNotUse();
  GetBulkSecretResponse_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetBulkSecretResponse_DataEntry_DoNotUse& other);
  static const GetBulkSecretResponse_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetBulkSecretResponse_DataEntry_DoNotUse*>(&_GetBulkSecretResponse_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.GetBulkSecretResponse.DataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[45];
  }

  public:
};

// -------------------------------------------------------------------

class GetBulkSecretResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.GetBulkSecretResponse) */ {
 public:
  inline GetBulkSecretResponse() : GetBulkSecretResponse(nullptr) {};
  virtual ~GetBulkSecretResponse();

  GetBulkSecretResponse(const GetBulkSecretResponse& from);
  GetBulkSecretResponse(GetBulkSecretResponse&& from) noexcept
    : GetBulkSecretResponse() {
    *this = ::std::move(from);
  }

  inline GetBulkSecretResponse& operator=(const GetBulkSecretResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBulkSecretResponse& operator=(GetBulkSecretResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBulkSecretResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBulkSecretResponse* internal_default_instance() {
    return reinterpret_cast<const GetBulkSecretResponse*>(
               &_GetBulkSecretResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(GetBulkSecretResponse& a, GetBulkSecretResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBulkSecretResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBulkSecretResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBulkSecretResponse* New() const final {
    return CreateMaybeMessage<GetBulkSecretResponse>(nullptr);
  }

  GetBulkSecretResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBulkSecretResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBulkSecretResponse& from);
  void MergeFrom(const GetBulkSecretResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBulkSecretResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.GetBulkSecretResponse";
  }
  protected:
  explicit GetBulkSecretResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // map<string, .dapr.proto.runtime.v1.SecretResponse> data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::runtime::v1::SecretResponse >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::runtime::v1::SecretResponse >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::runtime::v1::SecretResponse >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::runtime::v1::SecretResponse >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.GetBulkSecretResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetBulkSecretResponse_DataEntry_DoNotUse,
      std::string, ::dapr::proto::runtime::v1::SecretResponse,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class TransactionalStateOperation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.TransactionalStateOperation) */ {
 public:
  inline TransactionalStateOperation() : TransactionalStateOperation(nullptr) {};
  virtual ~TransactionalStateOperation();

  TransactionalStateOperation(const TransactionalStateOperation& from);
  TransactionalStateOperation(TransactionalStateOperation&& from) noexcept
    : TransactionalStateOperation() {
    *this = ::std::move(from);
  }

  inline TransactionalStateOperation& operator=(const TransactionalStateOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionalStateOperation& operator=(TransactionalStateOperation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionalStateOperation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionalStateOperation* internal_default_instance() {
    return reinterpret_cast<const TransactionalStateOperation*>(
               &_TransactionalStateOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(TransactionalStateOperation& a, TransactionalStateOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionalStateOperation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionalStateOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionalStateOperation* New() const final {
    return CreateMaybeMessage<TransactionalStateOperation>(nullptr);
  }

  TransactionalStateOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionalStateOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionalStateOperation& from);
  void MergeFrom(const TransactionalStateOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionalStateOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.TransactionalStateOperation";
  }
  protected:
  explicit TransactionalStateOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationTypeFieldNumber = 1,
    kRequestFieldNumber = 2,
  };
  // string operationType = 1;
  void clear_operationtype();
  const std::string& operationtype() const;
  void set_operationtype(const std::string& value);
  void set_operationtype(std::string&& value);
  void set_operationtype(const char* value);
  void set_operationtype(const char* value, size_t size);
  std::string* mutable_operationtype();
  std::string* release_operationtype();
  void set_allocated_operationtype(std::string* operationtype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_operationtype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_operationtype(
      std::string* operationtype);
  private:
  const std::string& _internal_operationtype() const;
  void _internal_set_operationtype(const std::string& value);
  std::string* _internal_mutable_operationtype();
  public:

  // .dapr.proto.common.v1.StateItem request = 2;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::dapr::proto::common::v1::StateItem& request() const;
  ::dapr::proto::common::v1::StateItem* release_request();
  ::dapr::proto::common::v1::StateItem* mutable_request();
  void set_allocated_request(::dapr::proto::common::v1::StateItem* request);
  private:
  const ::dapr::proto::common::v1::StateItem& _internal_request() const;
  ::dapr::proto::common::v1::StateItem* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::dapr::proto::common::v1::StateItem* request);
  ::dapr::proto::common::v1::StateItem* unsafe_arena_release_request();

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.TransactionalStateOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operationtype_;
  ::dapr::proto::common::v1::StateItem* request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class ExecuteStateTransactionRequest_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ExecuteStateTransactionRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ExecuteStateTransactionRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ExecuteStateTransactionRequest_MetadataEntry_DoNotUse();
  ExecuteStateTransactionRequest_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ExecuteStateTransactionRequest_MetadataEntry_DoNotUse& other);
  static const ExecuteStateTransactionRequest_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ExecuteStateTransactionRequest_MetadataEntry_DoNotUse*>(&_ExecuteStateTransactionRequest_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.ExecuteStateTransactionRequest.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.ExecuteStateTransactionRequest.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[48];
  }

  public:
};

// -------------------------------------------------------------------

class ExecuteStateTransactionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.ExecuteStateTransactionRequest) */ {
 public:
  inline ExecuteStateTransactionRequest() : ExecuteStateTransactionRequest(nullptr) {};
  virtual ~ExecuteStateTransactionRequest();

  ExecuteStateTransactionRequest(const ExecuteStateTransactionRequest& from);
  ExecuteStateTransactionRequest(ExecuteStateTransactionRequest&& from) noexcept
    : ExecuteStateTransactionRequest() {
    *this = ::std::move(from);
  }

  inline ExecuteStateTransactionRequest& operator=(const ExecuteStateTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteStateTransactionRequest& operator=(ExecuteStateTransactionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteStateTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecuteStateTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const ExecuteStateTransactionRequest*>(
               &_ExecuteStateTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(ExecuteStateTransactionRequest& a, ExecuteStateTransactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteStateTransactionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteStateTransactionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteStateTransactionRequest* New() const final {
    return CreateMaybeMessage<ExecuteStateTransactionRequest>(nullptr);
  }

  ExecuteStateTransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteStateTransactionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteStateTransactionRequest& from);
  void MergeFrom(const ExecuteStateTransactionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteStateTransactionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.ExecuteStateTransactionRequest";
  }
  protected:
  explicit ExecuteStateTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kOperationsFieldNumber = 2,
    kMetadataFieldNumber = 3,
    kStoreNameFieldNumber = 1,
  };
  // repeated .dapr.proto.runtime.v1.TransactionalStateOperation operations = 2;
  int operations_size() const;
  private:
  int _internal_operations_size() const;
  public:
  void clear_operations();
  ::dapr::proto::runtime::v1::TransactionalStateOperation* mutable_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::TransactionalStateOperation >*
      mutable_operations();
  private:
  const ::dapr::proto::runtime::v1::TransactionalStateOperation& _internal_operations(int index) const;
  ::dapr::proto::runtime::v1::TransactionalStateOperation* _internal_add_operations();
  public:
  const ::dapr::proto::runtime::v1::TransactionalStateOperation& operations(int index) const;
  ::dapr::proto::runtime::v1::TransactionalStateOperation* add_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::TransactionalStateOperation >&
      operations() const;

  // map<string, string> metadata = 3;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string storeName = 1;
  void clear_storename();
  const std::string& storename() const;
  void set_storename(const std::string& value);
  void set_storename(std::string&& value);
  void set_storename(const char* value);
  void set_storename(const char* value, size_t size);
  std::string* mutable_storename();
  std::string* release_storename();
  void set_allocated_storename(std::string* storename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_storename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_storename(
      std::string* storename);
  private:
  const std::string& _internal_storename() const;
  void _internal_set_storename(const std::string& value);
  std::string* _internal_mutable_storename();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.ExecuteStateTransactionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::TransactionalStateOperation > operations_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ExecuteStateTransactionRequest_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class RegisterActorTimerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.RegisterActorTimerRequest) */ {
 public:
  inline RegisterActorTimerRequest() : RegisterActorTimerRequest(nullptr) {};
  virtual ~RegisterActorTimerRequest();

  RegisterActorTimerRequest(const RegisterActorTimerRequest& from);
  RegisterActorTimerRequest(RegisterActorTimerRequest&& from) noexcept
    : RegisterActorTimerRequest() {
    *this = ::std::move(from);
  }

  inline RegisterActorTimerRequest& operator=(const RegisterActorTimerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterActorTimerRequest& operator=(RegisterActorTimerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterActorTimerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterActorTimerRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterActorTimerRequest*>(
               &_RegisterActorTimerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(RegisterActorTimerRequest& a, RegisterActorTimerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterActorTimerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterActorTimerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterActorTimerRequest* New() const final {
    return CreateMaybeMessage<RegisterActorTimerRequest>(nullptr);
  }

  RegisterActorTimerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterActorTimerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterActorTimerRequest& from);
  void MergeFrom(const RegisterActorTimerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterActorTimerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.RegisterActorTimerRequest";
  }
  protected:
  explicit RegisterActorTimerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorTypeFieldNumber = 1,
    kActorIdFieldNumber = 2,
    kNameFieldNumber = 3,
    kDueTimeFieldNumber = 4,
    kPeriodFieldNumber = 5,
    kCallbackFieldNumber = 6,
    kDataFieldNumber = 7,
    kTtlFieldNumber = 8,
  };
  // string actor_type = 1[json_name = "actorType"];
  void clear_actor_type();
  const std::string& actor_type() const;
  void set_actor_type(const std::string& value);
  void set_actor_type(std::string&& value);
  void set_actor_type(const char* value);
  void set_actor_type(const char* value, size_t size);
  std::string* mutable_actor_type();
  std::string* release_actor_type();
  void set_allocated_actor_type(std::string* actor_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_actor_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_actor_type(
      std::string* actor_type);
  private:
  const std::string& _internal_actor_type() const;
  void _internal_set_actor_type(const std::string& value);
  std::string* _internal_mutable_actor_type();
  public:

  // string actor_id = 2[json_name = "actorId"];
  void clear_actor_id();
  const std::string& actor_id() const;
  void set_actor_id(const std::string& value);
  void set_actor_id(std::string&& value);
  void set_actor_id(const char* value);
  void set_actor_id(const char* value, size_t size);
  std::string* mutable_actor_id();
  std::string* release_actor_id();
  void set_allocated_actor_id(std::string* actor_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_actor_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_actor_id(
      std::string* actor_id);
  private:
  const std::string& _internal_actor_id() const;
  void _internal_set_actor_id(const std::string& value);
  std::string* _internal_mutable_actor_id();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string due_time = 4[json_name = "dueTime"];
  void clear_due_time();
  const std::string& due_time() const;
  void set_due_time(const std::string& value);
  void set_due_time(std::string&& value);
  void set_due_time(const char* value);
  void set_due_time(const char* value, size_t size);
  std::string* mutable_due_time();
  std::string* release_due_time();
  void set_allocated_due_time(std::string* due_time);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_due_time();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_due_time(
      std::string* due_time);
  private:
  const std::string& _internal_due_time() const;
  void _internal_set_due_time(const std::string& value);
  std::string* _internal_mutable_due_time();
  public:

  // string period = 5;
  void clear_period();
  const std::string& period() const;
  void set_period(const std::string& value);
  void set_period(std::string&& value);
  void set_period(const char* value);
  void set_period(const char* value, size_t size);
  std::string* mutable_period();
  std::string* release_period();
  void set_allocated_period(std::string* period);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_period();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_period(
      std::string* period);
  private:
  const std::string& _internal_period() const;
  void _internal_set_period(const std::string& value);
  std::string* _internal_mutable_period();
  public:

  // string callback = 6;
  void clear_callback();
  const std::string& callback() const;
  void set_callback(const std::string& value);
  void set_callback(std::string&& value);
  void set_callback(const char* value);
  void set_callback(const char* value, size_t size);
  std::string* mutable_callback();
  std::string* release_callback();
  void set_allocated_callback(std::string* callback);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_callback();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_callback(
      std::string* callback);
  private:
  const std::string& _internal_callback() const;
  void _internal_set_callback(const std::string& value);
  std::string* _internal_mutable_callback();
  public:

  // bytes data = 7;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string ttl = 8;
  void clear_ttl();
  const std::string& ttl() const;
  void set_ttl(const std::string& value);
  void set_ttl(std::string&& value);
  void set_ttl(const char* value);
  void set_ttl(const char* value, size_t size);
  std::string* mutable_ttl();
  std::string* release_ttl();
  void set_allocated_ttl(std::string* ttl);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ttl();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ttl(
      std::string* ttl);
  private:
  const std::string& _internal_ttl() const;
  void _internal_set_ttl(const std::string& value);
  std::string* _internal_mutable_ttl();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.RegisterActorTimerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actor_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr due_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr period_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callback_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ttl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class UnregisterActorTimerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.UnregisterActorTimerRequest) */ {
 public:
  inline UnregisterActorTimerRequest() : UnregisterActorTimerRequest(nullptr) {};
  virtual ~UnregisterActorTimerRequest();

  UnregisterActorTimerRequest(const UnregisterActorTimerRequest& from);
  UnregisterActorTimerRequest(UnregisterActorTimerRequest&& from) noexcept
    : UnregisterActorTimerRequest() {
    *this = ::std::move(from);
  }

  inline UnregisterActorTimerRequest& operator=(const UnregisterActorTimerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnregisterActorTimerRequest& operator=(UnregisterActorTimerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnregisterActorTimerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnregisterActorTimerRequest* internal_default_instance() {
    return reinterpret_cast<const UnregisterActorTimerRequest*>(
               &_UnregisterActorTimerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(UnregisterActorTimerRequest& a, UnregisterActorTimerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnregisterActorTimerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnregisterActorTimerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnregisterActorTimerRequest* New() const final {
    return CreateMaybeMessage<UnregisterActorTimerRequest>(nullptr);
  }

  UnregisterActorTimerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnregisterActorTimerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnregisterActorTimerRequest& from);
  void MergeFrom(const UnregisterActorTimerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnregisterActorTimerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.UnregisterActorTimerRequest";
  }
  protected:
  explicit UnregisterActorTimerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorTypeFieldNumber = 1,
    kActorIdFieldNumber = 2,
    kNameFieldNumber = 3,
  };
  // string actor_type = 1[json_name = "actorType"];
  void clear_actor_type();
  const std::string& actor_type() const;
  void set_actor_type(const std::string& value);
  void set_actor_type(std::string&& value);
  void set_actor_type(const char* value);
  void set_actor_type(const char* value, size_t size);
  std::string* mutable_actor_type();
  std::string* release_actor_type();
  void set_allocated_actor_type(std::string* actor_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_actor_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_actor_type(
      std::string* actor_type);
  private:
  const std::string& _internal_actor_type() const;
  void _internal_set_actor_type(const std::string& value);
  std::string* _internal_mutable_actor_type();
  public:

  // string actor_id = 2[json_name = "actorId"];
  void clear_actor_id();
  const std::string& actor_id() const;
  void set_actor_id(const std::string& value);
  void set_actor_id(std::string&& value);
  void set_actor_id(const char* value);
  void set_actor_id(const char* value, size_t size);
  std::string* mutable_actor_id();
  std::string* release_actor_id();
  void set_allocated_actor_id(std::string* actor_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_actor_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_actor_id(
      std::string* actor_id);
  private:
  const std::string& _internal_actor_id() const;
  void _internal_set_actor_id(const std::string& value);
  std::string* _internal_mutable_actor_id();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.UnregisterActorTimerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actor_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class RegisterActorReminderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.RegisterActorReminderRequest) */ {
 public:
  inline RegisterActorReminderRequest() : RegisterActorReminderRequest(nullptr) {};
  virtual ~RegisterActorReminderRequest();

  RegisterActorReminderRequest(const RegisterActorReminderRequest& from);
  RegisterActorReminderRequest(RegisterActorReminderRequest&& from) noexcept
    : RegisterActorReminderRequest() {
    *this = ::std::move(from);
  }

  inline RegisterActorReminderRequest& operator=(const RegisterActorReminderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterActorReminderRequest& operator=(RegisterActorReminderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterActorReminderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterActorReminderRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterActorReminderRequest*>(
               &_RegisterActorReminderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(RegisterActorReminderRequest& a, RegisterActorReminderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterActorReminderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterActorReminderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterActorReminderRequest* New() const final {
    return CreateMaybeMessage<RegisterActorReminderRequest>(nullptr);
  }

  RegisterActorReminderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterActorReminderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterActorReminderRequest& from);
  void MergeFrom(const RegisterActorReminderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterActorReminderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.RegisterActorReminderRequest";
  }
  protected:
  explicit RegisterActorReminderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorTypeFieldNumber = 1,
    kActorIdFieldNumber = 2,
    kNameFieldNumber = 3,
    kDueTimeFieldNumber = 4,
    kPeriodFieldNumber = 5,
    kDataFieldNumber = 6,
    kTtlFieldNumber = 7,
  };
  // string actor_type = 1[json_name = "actorType"];
  void clear_actor_type();
  const std::string& actor_type() const;
  void set_actor_type(const std::string& value);
  void set_actor_type(std::string&& value);
  void set_actor_type(const char* value);
  void set_actor_type(const char* value, size_t size);
  std::string* mutable_actor_type();
  std::string* release_actor_type();
  void set_allocated_actor_type(std::string* actor_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_actor_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_actor_type(
      std::string* actor_type);
  private:
  const std::string& _internal_actor_type() const;
  void _internal_set_actor_type(const std::string& value);
  std::string* _internal_mutable_actor_type();
  public:

  // string actor_id = 2[json_name = "actorId"];
  void clear_actor_id();
  const std::string& actor_id() const;
  void set_actor_id(const std::string& value);
  void set_actor_id(std::string&& value);
  void set_actor_id(const char* value);
  void set_actor_id(const char* value, size_t size);
  std::string* mutable_actor_id();
  std::string* release_actor_id();
  void set_allocated_actor_id(std::string* actor_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_actor_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_actor_id(
      std::string* actor_id);
  private:
  const std::string& _internal_actor_id() const;
  void _internal_set_actor_id(const std::string& value);
  std::string* _internal_mutable_actor_id();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string due_time = 4[json_name = "dueTime"];
  void clear_due_time();
  const std::string& due_time() const;
  void set_due_time(const std::string& value);
  void set_due_time(std::string&& value);
  void set_due_time(const char* value);
  void set_due_time(const char* value, size_t size);
  std::string* mutable_due_time();
  std::string* release_due_time();
  void set_allocated_due_time(std::string* due_time);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_due_time();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_due_time(
      std::string* due_time);
  private:
  const std::string& _internal_due_time() const;
  void _internal_set_due_time(const std::string& value);
  std::string* _internal_mutable_due_time();
  public:

  // string period = 5;
  void clear_period();
  const std::string& period() const;
  void set_period(const std::string& value);
  void set_period(std::string&& value);
  void set_period(const char* value);
  void set_period(const char* value, size_t size);
  std::string* mutable_period();
  std::string* release_period();
  void set_allocated_period(std::string* period);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_period();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_period(
      std::string* period);
  private:
  const std::string& _internal_period() const;
  void _internal_set_period(const std::string& value);
  std::string* _internal_mutable_period();
  public:

  // bytes data = 6;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string ttl = 7;
  void clear_ttl();
  const std::string& ttl() const;
  void set_ttl(const std::string& value);
  void set_ttl(std::string&& value);
  void set_ttl(const char* value);
  void set_ttl(const char* value, size_t size);
  std::string* mutable_ttl();
  std::string* release_ttl();
  void set_allocated_ttl(std::string* ttl);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ttl();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ttl(
      std::string* ttl);
  private:
  const std::string& _internal_ttl() const;
  void _internal_set_ttl(const std::string& value);
  std::string* _internal_mutable_ttl();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.RegisterActorReminderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actor_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr due_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr period_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ttl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class UnregisterActorReminderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.UnregisterActorReminderRequest) */ {
 public:
  inline UnregisterActorReminderRequest() : UnregisterActorReminderRequest(nullptr) {};
  virtual ~UnregisterActorReminderRequest();

  UnregisterActorReminderRequest(const UnregisterActorReminderRequest& from);
  UnregisterActorReminderRequest(UnregisterActorReminderRequest&& from) noexcept
    : UnregisterActorReminderRequest() {
    *this = ::std::move(from);
  }

  inline UnregisterActorReminderRequest& operator=(const UnregisterActorReminderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnregisterActorReminderRequest& operator=(UnregisterActorReminderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnregisterActorReminderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnregisterActorReminderRequest* internal_default_instance() {
    return reinterpret_cast<const UnregisterActorReminderRequest*>(
               &_UnregisterActorReminderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(UnregisterActorReminderRequest& a, UnregisterActorReminderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnregisterActorReminderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnregisterActorReminderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnregisterActorReminderRequest* New() const final {
    return CreateMaybeMessage<UnregisterActorReminderRequest>(nullptr);
  }

  UnregisterActorReminderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnregisterActorReminderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnregisterActorReminderRequest& from);
  void MergeFrom(const UnregisterActorReminderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnregisterActorReminderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.UnregisterActorReminderRequest";
  }
  protected:
  explicit UnregisterActorReminderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorTypeFieldNumber = 1,
    kActorIdFieldNumber = 2,
    kNameFieldNumber = 3,
  };
  // string actor_type = 1[json_name = "actorType"];
  void clear_actor_type();
  const std::string& actor_type() const;
  void set_actor_type(const std::string& value);
  void set_actor_type(std::string&& value);
  void set_actor_type(const char* value);
  void set_actor_type(const char* value, size_t size);
  std::string* mutable_actor_type();
  std::string* release_actor_type();
  void set_allocated_actor_type(std::string* actor_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_actor_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_actor_type(
      std::string* actor_type);
  private:
  const std::string& _internal_actor_type() const;
  void _internal_set_actor_type(const std::string& value);
  std::string* _internal_mutable_actor_type();
  public:

  // string actor_id = 2[json_name = "actorId"];
  void clear_actor_id();
  const std::string& actor_id() const;
  void set_actor_id(const std::string& value);
  void set_actor_id(std::string&& value);
  void set_actor_id(const char* value);
  void set_actor_id(const char* value, size_t size);
  std::string* mutable_actor_id();
  std::string* release_actor_id();
  void set_allocated_actor_id(std::string* actor_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_actor_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_actor_id(
      std::string* actor_id);
  private:
  const std::string& _internal_actor_id() const;
  void _internal_set_actor_id(const std::string& value);
  std::string* _internal_mutable_actor_id();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.UnregisterActorReminderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actor_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class GetActorStateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.GetActorStateRequest) */ {
 public:
  inline GetActorStateRequest() : GetActorStateRequest(nullptr) {};
  virtual ~GetActorStateRequest();

  GetActorStateRequest(const GetActorStateRequest& from);
  GetActorStateRequest(GetActorStateRequest&& from) noexcept
    : GetActorStateRequest() {
    *this = ::std::move(from);
  }

  inline GetActorStateRequest& operator=(const GetActorStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetActorStateRequest& operator=(GetActorStateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetActorStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetActorStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetActorStateRequest*>(
               &_GetActorStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GetActorStateRequest& a, GetActorStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetActorStateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetActorStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetActorStateRequest* New() const final {
    return CreateMaybeMessage<GetActorStateRequest>(nullptr);
  }

  GetActorStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetActorStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetActorStateRequest& from);
  void MergeFrom(const GetActorStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetActorStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.GetActorStateRequest";
  }
  protected:
  explicit GetActorStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorTypeFieldNumber = 1,
    kActorIdFieldNumber = 2,
    kKeyFieldNumber = 3,
  };
  // string actor_type = 1[json_name = "actorType"];
  void clear_actor_type();
  const std::string& actor_type() const;
  void set_actor_type(const std::string& value);
  void set_actor_type(std::string&& value);
  void set_actor_type(const char* value);
  void set_actor_type(const char* value, size_t size);
  std::string* mutable_actor_type();
  std::string* release_actor_type();
  void set_allocated_actor_type(std::string* actor_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_actor_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_actor_type(
      std::string* actor_type);
  private:
  const std::string& _internal_actor_type() const;
  void _internal_set_actor_type(const std::string& value);
  std::string* _internal_mutable_actor_type();
  public:

  // string actor_id = 2[json_name = "actorId"];
  void clear_actor_id();
  const std::string& actor_id() const;
  void set_actor_id(const std::string& value);
  void set_actor_id(std::string&& value);
  void set_actor_id(const char* value);
  void set_actor_id(const char* value, size_t size);
  std::string* mutable_actor_id();
  std::string* release_actor_id();
  void set_allocated_actor_id(std::string* actor_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_actor_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_actor_id(
      std::string* actor_id);
  private:
  const std::string& _internal_actor_id() const;
  void _internal_set_actor_id(const std::string& value);
  std::string* _internal_mutable_actor_id();
  public:

  // string key = 3;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.GetActorStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actor_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class GetActorStateResponse_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetActorStateResponse_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetActorStateResponse_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GetActorStateResponse_MetadataEntry_DoNotUse();
  GetActorStateResponse_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetActorStateResponse_MetadataEntry_DoNotUse& other);
  static const GetActorStateResponse_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetActorStateResponse_MetadataEntry_DoNotUse*>(&_GetActorStateResponse_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.GetActorStateResponse.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.GetActorStateResponse.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[55];
  }

  public:
};

// -------------------------------------------------------------------

class GetActorStateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.GetActorStateResponse) */ {
 public:
  inline GetActorStateResponse() : GetActorStateResponse(nullptr) {};
  virtual ~GetActorStateResponse();

  GetActorStateResponse(const GetActorStateResponse& from);
  GetActorStateResponse(GetActorStateResponse&& from) noexcept
    : GetActorStateResponse() {
    *this = ::std::move(from);
  }

  inline GetActorStateResponse& operator=(const GetActorStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetActorStateResponse& operator=(GetActorStateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetActorStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetActorStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetActorStateResponse*>(
               &_GetActorStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(GetActorStateResponse& a, GetActorStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetActorStateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetActorStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetActorStateResponse* New() const final {
    return CreateMaybeMessage<GetActorStateResponse>(nullptr);
  }

  GetActorStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetActorStateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetActorStateResponse& from);
  void MergeFrom(const GetActorStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetActorStateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.GetActorStateResponse";
  }
  protected:
  explicit GetActorStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 2,
    kDataFieldNumber = 1,
  };
  // map<string, string> metadata = 2;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.GetActorStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetActorStateResponse_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class ExecuteActorStateTransactionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest) */ {
 public:
  inline ExecuteActorStateTransactionRequest() : ExecuteActorStateTransactionRequest(nullptr) {};
  virtual ~ExecuteActorStateTransactionRequest();

  ExecuteActorStateTransactionRequest(const ExecuteActorStateTransactionRequest& from);
  ExecuteActorStateTransactionRequest(ExecuteActorStateTransactionRequest&& from) noexcept
    : ExecuteActorStateTransactionRequest() {
    *this = ::std::move(from);
  }

  inline ExecuteActorStateTransactionRequest& operator=(const ExecuteActorStateTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteActorStateTransactionRequest& operator=(ExecuteActorStateTransactionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteActorStateTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecuteActorStateTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const ExecuteActorStateTransactionRequest*>(
               &_ExecuteActorStateTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(ExecuteActorStateTransactionRequest& a, ExecuteActorStateTransactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteActorStateTransactionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteActorStateTransactionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteActorStateTransactionRequest* New() const final {
    return CreateMaybeMessage<ExecuteActorStateTransactionRequest>(nullptr);
  }

  ExecuteActorStateTransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteActorStateTransactionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteActorStateTransactionRequest& from);
  void MergeFrom(const ExecuteActorStateTransactionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteActorStateTransactionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest";
  }
  protected:
  explicit ExecuteActorStateTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationsFieldNumber = 3,
    kActorTypeFieldNumber = 1,
    kActorIdFieldNumber = 2,
  };
  // repeated .dapr.proto.runtime.v1.TransactionalActorStateOperation operations = 3;
  int operations_size() const;
  private:
  int _internal_operations_size() const;
  public:
  void clear_operations();
  ::dapr::proto::runtime::v1::TransactionalActorStateOperation* mutable_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::TransactionalActorStateOperation >*
      mutable_operations();
  private:
  const ::dapr::proto::runtime::v1::TransactionalActorStateOperation& _internal_operations(int index) const;
  ::dapr::proto::runtime::v1::TransactionalActorStateOperation* _internal_add_operations();
  public:
  const ::dapr::proto::runtime::v1::TransactionalActorStateOperation& operations(int index) const;
  ::dapr::proto::runtime::v1::TransactionalActorStateOperation* add_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::TransactionalActorStateOperation >&
      operations() const;

  // string actor_type = 1[json_name = "actorType"];
  void clear_actor_type();
  const std::string& actor_type() const;
  void set_actor_type(const std::string& value);
  void set_actor_type(std::string&& value);
  void set_actor_type(const char* value);
  void set_actor_type(const char* value, size_t size);
  std::string* mutable_actor_type();
  std::string* release_actor_type();
  void set_allocated_actor_type(std::string* actor_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_actor_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_actor_type(
      std::string* actor_type);
  private:
  const std::string& _internal_actor_type() const;
  void _internal_set_actor_type(const std::string& value);
  std::string* _internal_mutable_actor_type();
  public:

  // string actor_id = 2[json_name = "actorId"];
  void clear_actor_id();
  const std::string& actor_id() const;
  void set_actor_id(const std::string& value);
  void set_actor_id(std::string&& value);
  void set_actor_id(const char* value);
  void set_actor_id(const char* value, size_t size);
  std::string* mutable_actor_id();
  std::string* release_actor_id();
  void set_allocated_actor_id(std::string* actor_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_actor_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_actor_id(
      std::string* actor_id);
  private:
  const std::string& _internal_actor_id() const;
  void _internal_set_actor_id(const std::string& value);
  std::string* _internal_mutable_actor_id();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::TransactionalActorStateOperation > operations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actor_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actor_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class TransactionalActorStateOperation_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TransactionalActorStateOperation_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TransactionalActorStateOperation_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  TransactionalActorStateOperation_MetadataEntry_DoNotUse();
  TransactionalActorStateOperation_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TransactionalActorStateOperation_MetadataEntry_DoNotUse& other);
  static const TransactionalActorStateOperation_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TransactionalActorStateOperation_MetadataEntry_DoNotUse*>(&_TransactionalActorStateOperation_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.TransactionalActorStateOperation.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.TransactionalActorStateOperation.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[58];
  }

  public:
};

// -------------------------------------------------------------------

class TransactionalActorStateOperation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.TransactionalActorStateOperation) */ {
 public:
  inline TransactionalActorStateOperation() : TransactionalActorStateOperation(nullptr) {};
  virtual ~TransactionalActorStateOperation();

  TransactionalActorStateOperation(const TransactionalActorStateOperation& from);
  TransactionalActorStateOperation(TransactionalActorStateOperation&& from) noexcept
    : TransactionalActorStateOperation() {
    *this = ::std::move(from);
  }

  inline TransactionalActorStateOperation& operator=(const TransactionalActorStateOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionalActorStateOperation& operator=(TransactionalActorStateOperation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionalActorStateOperation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionalActorStateOperation* internal_default_instance() {
    return reinterpret_cast<const TransactionalActorStateOperation*>(
               &_TransactionalActorStateOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(TransactionalActorStateOperation& a, TransactionalActorStateOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionalActorStateOperation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionalActorStateOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionalActorStateOperation* New() const final {
    return CreateMaybeMessage<TransactionalActorStateOperation>(nullptr);
  }

  TransactionalActorStateOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionalActorStateOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionalActorStateOperation& from);
  void MergeFrom(const TransactionalActorStateOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionalActorStateOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.TransactionalActorStateOperation";
  }
  protected:
  explicit TransactionalActorStateOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 4,
    kOperationTypeFieldNumber = 1,
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // map<string, string> metadata = 4;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string operationType = 1;
  void clear_operationtype();
  const std::string& operationtype() const;
  void set_operationtype(const std::string& value);
  void set_operationtype(std::string&& value);
  void set_operationtype(const char* value);
  void set_operationtype(const char* value, size_t size);
  std::string* mutable_operationtype();
  std::string* release_operationtype();
  void set_allocated_operationtype(std::string* operationtype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_operationtype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_operationtype(
      std::string* operationtype);
  private:
  const std::string& _internal_operationtype() const;
  void _internal_set_operationtype(const std::string& value);
  std::string* _internal_mutable_operationtype();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .google.protobuf.Any value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const PROTOBUF_NAMESPACE_ID::Any& value() const;
  PROTOBUF_NAMESPACE_ID::Any* release_value();
  PROTOBUF_NAMESPACE_ID::Any* mutable_value();
  void set_allocated_value(PROTOBUF_NAMESPACE_ID::Any* value);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_value() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      PROTOBUF_NAMESPACE_ID::Any* value);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.TransactionalActorStateOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TransactionalActorStateOperation_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operationtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  PROTOBUF_NAMESPACE_ID::Any* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class InvokeActorRequest_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InvokeActorRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InvokeActorRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  InvokeActorRequest_MetadataEntry_DoNotUse();
  InvokeActorRequest_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InvokeActorRequest_MetadataEntry_DoNotUse& other);
  static const InvokeActorRequest_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InvokeActorRequest_MetadataEntry_DoNotUse*>(&_InvokeActorRequest_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.InvokeActorRequest.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.InvokeActorRequest.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[60];
  }

  public:
};

// -------------------------------------------------------------------

class InvokeActorRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.InvokeActorRequest) */ {
 public:
  inline InvokeActorRequest() : InvokeActorRequest(nullptr) {};
  virtual ~InvokeActorRequest();

  InvokeActorRequest(const InvokeActorRequest& from);
  InvokeActorRequest(InvokeActorRequest&& from) noexcept
    : InvokeActorRequest() {
    *this = ::std::move(from);
  }

  inline InvokeActorRequest& operator=(const InvokeActorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvokeActorRequest& operator=(InvokeActorRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InvokeActorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvokeActorRequest* internal_default_instance() {
    return reinterpret_cast<const InvokeActorRequest*>(
               &_InvokeActorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(InvokeActorRequest& a, InvokeActorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InvokeActorRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvokeActorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvokeActorRequest* New() const final {
    return CreateMaybeMessage<InvokeActorRequest>(nullptr);
  }

  InvokeActorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvokeActorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InvokeActorRequest& from);
  void MergeFrom(const InvokeActorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvokeActorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.InvokeActorRequest";
  }
  protected:
  explicit InvokeActorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 5,
    kActorTypeFieldNumber = 1,
    kActorIdFieldNumber = 2,
    kMethodFieldNumber = 3,
    kDataFieldNumber = 4,
  };
  // map<string, string> metadata = 5;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string actor_type = 1[json_name = "actorType"];
  void clear_actor_type();
  const std::string& actor_type() const;
  void set_actor_type(const std::string& value);
  void set_actor_type(std::string&& value);
  void set_actor_type(const char* value);
  void set_actor_type(const char* value, size_t size);
  std::string* mutable_actor_type();
  std::string* release_actor_type();
  void set_allocated_actor_type(std::string* actor_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_actor_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_actor_type(
      std::string* actor_type);
  private:
  const std::string& _internal_actor_type() const;
  void _internal_set_actor_type(const std::string& value);
  std::string* _internal_mutable_actor_type();
  public:

  // string actor_id = 2[json_name = "actorId"];
  void clear_actor_id();
  const std::string& actor_id() const;
  void set_actor_id(const std::string& value);
  void set_actor_id(std::string&& value);
  void set_actor_id(const char* value);
  void set_actor_id(const char* value, size_t size);
  std::string* mutable_actor_id();
  std::string* release_actor_id();
  void set_allocated_actor_id(std::string* actor_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_actor_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_actor_id(
      std::string* actor_id);
  private:
  const std::string& _internal_actor_id() const;
  void _internal_set_actor_id(const std::string& value);
  std::string* _internal_mutable_actor_id();
  public:

  // string method = 3;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_method();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_method(
      std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.InvokeActorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      InvokeActorRequest_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actor_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class InvokeActorResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.InvokeActorResponse) */ {
 public:
  inline InvokeActorResponse() : InvokeActorResponse(nullptr) {};
  virtual ~InvokeActorResponse();

  InvokeActorResponse(const InvokeActorResponse& from);
  InvokeActorResponse(InvokeActorResponse&& from) noexcept
    : InvokeActorResponse() {
    *this = ::std::move(from);
  }

  inline InvokeActorResponse& operator=(const InvokeActorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvokeActorResponse& operator=(InvokeActorResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InvokeActorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvokeActorResponse* internal_default_instance() {
    return reinterpret_cast<const InvokeActorResponse*>(
               &_InvokeActorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(InvokeActorResponse& a, InvokeActorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InvokeActorResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvokeActorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvokeActorResponse* New() const final {
    return CreateMaybeMessage<InvokeActorResponse>(nullptr);
  }

  InvokeActorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvokeActorResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InvokeActorResponse& from);
  void MergeFrom(const InvokeActorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvokeActorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.InvokeActorResponse";
  }
  protected:
  explicit InvokeActorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.InvokeActorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class GetMetadataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.GetMetadataRequest) */ {
 public:
  inline GetMetadataRequest() : GetMetadataRequest(nullptr) {};
  virtual ~GetMetadataRequest();

  GetMetadataRequest(const GetMetadataRequest& from);
  GetMetadataRequest(GetMetadataRequest&& from) noexcept
    : GetMetadataRequest() {
    *this = ::std::move(from);
  }

  inline GetMetadataRequest& operator=(const GetMetadataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMetadataRequest& operator=(GetMetadataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMetadataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMetadataRequest* internal_default_instance() {
    return reinterpret_cast<const GetMetadataRequest*>(
               &_GetMetadataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(GetMetadataRequest& a, GetMetadataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMetadataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMetadataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMetadataRequest* New() const final {
    return CreateMaybeMessage<GetMetadataRequest>(nullptr);
  }

  GetMetadataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMetadataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMetadataRequest& from);
  void MergeFrom(const GetMetadataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMetadataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.GetMetadataRequest";
  }
  protected:
  explicit GetMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.GetMetadataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class GetMetadataResponse_ExtendedMetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetMetadataResponse_ExtendedMetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetMetadataResponse_ExtendedMetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GetMetadataResponse_ExtendedMetadataEntry_DoNotUse();
  GetMetadataResponse_ExtendedMetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetMetadataResponse_ExtendedMetadataEntry_DoNotUse& other);
  static const GetMetadataResponse_ExtendedMetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetMetadataResponse_ExtendedMetadataEntry_DoNotUse*>(&_GetMetadataResponse_ExtendedMetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.GetMetadataResponse.ExtendedMetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.GetMetadataResponse.ExtendedMetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[64];
  }

  public:
};

// -------------------------------------------------------------------

class GetMetadataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.GetMetadataResponse) */ {
 public:
  inline GetMetadataResponse() : GetMetadataResponse(nullptr) {};
  virtual ~GetMetadataResponse();

  GetMetadataResponse(const GetMetadataResponse& from);
  GetMetadataResponse(GetMetadataResponse&& from) noexcept
    : GetMetadataResponse() {
    *this = ::std::move(from);
  }

  inline GetMetadataResponse& operator=(const GetMetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMetadataResponse& operator=(GetMetadataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMetadataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMetadataResponse* internal_default_instance() {
    return reinterpret_cast<const GetMetadataResponse*>(
               &_GetMetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(GetMetadataResponse& a, GetMetadataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMetadataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMetadataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMetadataResponse* New() const final {
    return CreateMaybeMessage<GetMetadataResponse>(nullptr);
  }

  GetMetadataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMetadataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMetadataResponse& from);
  void MergeFrom(const GetMetadataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMetadataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.GetMetadataResponse";
  }
  protected:
  explicit GetMetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kActiveActorsCountFieldNumber = 2,
    kRegisteredComponentsFieldNumber = 3,
    kExtendedMetadataFieldNumber = 4,
    kSubscriptionsFieldNumber = 5,
    kHttpEndpointsFieldNumber = 6,
    kEnabledFeaturesFieldNumber = 9,
    kIdFieldNumber = 1,
    kRuntimeVersionFieldNumber = 8,
    kAppConnectionPropertiesFieldNumber = 7,
    kActorRuntimeFieldNumber = 10,
  };
  // repeated .dapr.proto.runtime.v1.ActiveActorsCount active_actors_count = 2[json_name = "actors", deprecated = true];
  PROTOBUF_DEPRECATED int active_actors_count_size() const;
  private:
  int _internal_active_actors_count_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_active_actors_count();
  PROTOBUF_DEPRECATED ::dapr::proto::runtime::v1::ActiveActorsCount* mutable_active_actors_count(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::ActiveActorsCount >*
      mutable_active_actors_count();
  private:
  const ::dapr::proto::runtime::v1::ActiveActorsCount& _internal_active_actors_count(int index) const;
  ::dapr::proto::runtime::v1::ActiveActorsCount* _internal_add_active_actors_count();
  public:
  PROTOBUF_DEPRECATED const ::dapr::proto::runtime::v1::ActiveActorsCount& active_actors_count(int index) const;
  PROTOBUF_DEPRECATED ::dapr::proto::runtime::v1::ActiveActorsCount* add_active_actors_count();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::ActiveActorsCount >&
      active_actors_count() const;

  // repeated .dapr.proto.runtime.v1.RegisteredComponents registered_components = 3[json_name = "components"];
  int registered_components_size() const;
  private:
  int _internal_registered_components_size() const;
  public:
  void clear_registered_components();
  ::dapr::proto::runtime::v1::RegisteredComponents* mutable_registered_components(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::RegisteredComponents >*
      mutable_registered_components();
  private:
  const ::dapr::proto::runtime::v1::RegisteredComponents& _internal_registered_components(int index) const;
  ::dapr::proto::runtime::v1::RegisteredComponents* _internal_add_registered_components();
  public:
  const ::dapr::proto::runtime::v1::RegisteredComponents& registered_components(int index) const;
  ::dapr::proto::runtime::v1::RegisteredComponents* add_registered_components();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::RegisteredComponents >&
      registered_components() const;

  // map<string, string> extended_metadata = 4[json_name = "extended"];
  int extended_metadata_size() const;
  private:
  int _internal_extended_metadata_size() const;
  public:
  void clear_extended_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_extended_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_extended_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      extended_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_extended_metadata();

  // repeated .dapr.proto.runtime.v1.PubsubSubscription subscriptions = 5[json_name = "subscriptions"];
  int subscriptions_size() const;
  private:
  int _internal_subscriptions_size() const;
  public:
  void clear_subscriptions();
  ::dapr::proto::runtime::v1::PubsubSubscription* mutable_subscriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::PubsubSubscription >*
      mutable_subscriptions();
  private:
  const ::dapr::proto::runtime::v1::PubsubSubscription& _internal_subscriptions(int index) const;
  ::dapr::proto::runtime::v1::PubsubSubscription* _internal_add_subscriptions();
  public:
  const ::dapr::proto::runtime::v1::PubsubSubscription& subscriptions(int index) const;
  ::dapr::proto::runtime::v1::PubsubSubscription* add_subscriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::PubsubSubscription >&
      subscriptions() const;

  // repeated .dapr.proto.runtime.v1.MetadataHTTPEndpoint http_endpoints = 6[json_name = "httpEndpoints"];
  int http_endpoints_size() const;
  private:
  int _internal_http_endpoints_size() const;
  public:
  void clear_http_endpoints();
  ::dapr::proto::runtime::v1::MetadataHTTPEndpoint* mutable_http_endpoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::MetadataHTTPEndpoint >*
      mutable_http_endpoints();
  private:
  const ::dapr::proto::runtime::v1::MetadataHTTPEndpoint& _internal_http_endpoints(int index) const;
  ::dapr::proto::runtime::v1::MetadataHTTPEndpoint* _internal_add_http_endpoints();
  public:
  const ::dapr::proto::runtime::v1::MetadataHTTPEndpoint& http_endpoints(int index) const;
  ::dapr::proto::runtime::v1::MetadataHTTPEndpoint* add_http_endpoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::MetadataHTTPEndpoint >&
      http_endpoints() const;

  // repeated string enabled_features = 9[json_name = "enabledFeatures"];
  int enabled_features_size() const;
  private:
  int _internal_enabled_features_size() const;
  public:
  void clear_enabled_features();
  const std::string& enabled_features(int index) const;
  std::string* mutable_enabled_features(int index);
  void set_enabled_features(int index, const std::string& value);
  void set_enabled_features(int index, std::string&& value);
  void set_enabled_features(int index, const char* value);
  void set_enabled_features(int index, const char* value, size_t size);
  std::string* add_enabled_features();
  void add_enabled_features(const std::string& value);
  void add_enabled_features(std::string&& value);
  void add_enabled_features(const char* value);
  void add_enabled_features(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& enabled_features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_enabled_features();
  private:
  const std::string& _internal_enabled_features(int index) const;
  std::string* _internal_add_enabled_features();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string runtime_version = 8[json_name = "runtimeVersion"];
  void clear_runtime_version();
  const std::string& runtime_version() const;
  void set_runtime_version(const std::string& value);
  void set_runtime_version(std::string&& value);
  void set_runtime_version(const char* value);
  void set_runtime_version(const char* value, size_t size);
  std::string* mutable_runtime_version();
  std::string* release_runtime_version();
  void set_allocated_runtime_version(std::string* runtime_version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_runtime_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_runtime_version(
      std::string* runtime_version);
  private:
  const std::string& _internal_runtime_version() const;
  void _internal_set_runtime_version(const std::string& value);
  std::string* _internal_mutable_runtime_version();
  public:

  // .dapr.proto.runtime.v1.AppConnectionProperties app_connection_properties = 7[json_name = "appConnectionProperties"];
  bool has_app_connection_properties() const;
  private:
  bool _internal_has_app_connection_properties() const;
  public:
  void clear_app_connection_properties();
  const ::dapr::proto::runtime::v1::AppConnectionProperties& app_connection_properties() const;
  ::dapr::proto::runtime::v1::AppConnectionProperties* release_app_connection_properties();
  ::dapr::proto::runtime::v1::AppConnectionProperties* mutable_app_connection_properties();
  void set_allocated_app_connection_properties(::dapr::proto::runtime::v1::AppConnectionProperties* app_connection_properties);
  private:
  const ::dapr::proto::runtime::v1::AppConnectionProperties& _internal_app_connection_properties() const;
  ::dapr::proto::runtime::v1::AppConnectionProperties* _internal_mutable_app_connection_properties();
  public:
  void unsafe_arena_set_allocated_app_connection_properties(
      ::dapr::proto::runtime::v1::AppConnectionProperties* app_connection_properties);
  ::dapr::proto::runtime::v1::AppConnectionProperties* unsafe_arena_release_app_connection_properties();

  // .dapr.proto.runtime.v1.ActorRuntime actor_runtime = 10[json_name = "actorRuntime"];
  bool has_actor_runtime() const;
  private:
  bool _internal_has_actor_runtime() const;
  public:
  void clear_actor_runtime();
  const ::dapr::proto::runtime::v1::ActorRuntime& actor_runtime() const;
  ::dapr::proto::runtime::v1::ActorRuntime* release_actor_runtime();
  ::dapr::proto::runtime::v1::ActorRuntime* mutable_actor_runtime();
  void set_allocated_actor_runtime(::dapr::proto::runtime::v1::ActorRuntime* actor_runtime);
  private:
  const ::dapr::proto::runtime::v1::ActorRuntime& _internal_actor_runtime() const;
  ::dapr::proto::runtime::v1::ActorRuntime* _internal_mutable_actor_runtime();
  public:
  void unsafe_arena_set_allocated_actor_runtime(
      ::dapr::proto::runtime::v1::ActorRuntime* actor_runtime);
  ::dapr::proto::runtime::v1::ActorRuntime* unsafe_arena_release_actor_runtime();

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.GetMetadataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::ActiveActorsCount > active_actors_count_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::RegisteredComponents > registered_components_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetMetadataResponse_ExtendedMetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > extended_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::PubsubSubscription > subscriptions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::MetadataHTTPEndpoint > http_endpoints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> enabled_features_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_version_;
  ::dapr::proto::runtime::v1::AppConnectionProperties* app_connection_properties_;
  ::dapr::proto::runtime::v1::ActorRuntime* actor_runtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class ActorRuntime PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.ActorRuntime) */ {
 public:
  inline ActorRuntime() : ActorRuntime(nullptr) {};
  virtual ~ActorRuntime();

  ActorRuntime(const ActorRuntime& from);
  ActorRuntime(ActorRuntime&& from) noexcept
    : ActorRuntime() {
    *this = ::std::move(from);
  }

  inline ActorRuntime& operator=(const ActorRuntime& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorRuntime& operator=(ActorRuntime&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActorRuntime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActorRuntime* internal_default_instance() {
    return reinterpret_cast<const ActorRuntime*>(
               &_ActorRuntime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(ActorRuntime& a, ActorRuntime& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorRuntime* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorRuntime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActorRuntime* New() const final {
    return CreateMaybeMessage<ActorRuntime>(nullptr);
  }

  ActorRuntime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActorRuntime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActorRuntime& from);
  void MergeFrom(const ActorRuntime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActorRuntime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.ActorRuntime";
  }
  protected:
  explicit ActorRuntime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ActorRuntime_ActorRuntimeStatus ActorRuntimeStatus;
  static constexpr ActorRuntimeStatus INITIALIZING =
    ActorRuntime_ActorRuntimeStatus_INITIALIZING;
  static constexpr ActorRuntimeStatus DISABLED =
    ActorRuntime_ActorRuntimeStatus_DISABLED;
  static constexpr ActorRuntimeStatus RUNNING =
    ActorRuntime_ActorRuntimeStatus_RUNNING;
  static inline bool ActorRuntimeStatus_IsValid(int value) {
    return ActorRuntime_ActorRuntimeStatus_IsValid(value);
  }
  static constexpr ActorRuntimeStatus ActorRuntimeStatus_MIN =
    ActorRuntime_ActorRuntimeStatus_ActorRuntimeStatus_MIN;
  static constexpr ActorRuntimeStatus ActorRuntimeStatus_MAX =
    ActorRuntime_ActorRuntimeStatus_ActorRuntimeStatus_MAX;
  static constexpr int ActorRuntimeStatus_ARRAYSIZE =
    ActorRuntime_ActorRuntimeStatus_ActorRuntimeStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ActorRuntimeStatus_descriptor() {
    return ActorRuntime_ActorRuntimeStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& ActorRuntimeStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ActorRuntimeStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ActorRuntimeStatus_Name.");
    return ActorRuntime_ActorRuntimeStatus_Name(enum_t_value);
  }
  static inline bool ActorRuntimeStatus_Parse(const std::string& name,
      ActorRuntimeStatus* value) {
    return ActorRuntime_ActorRuntimeStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kActiveActorsFieldNumber = 2,
    kPlacementFieldNumber = 4,
    kRuntimeStatusFieldNumber = 1,
    kHostReadyFieldNumber = 3,
  };
  // repeated .dapr.proto.runtime.v1.ActiveActorsCount active_actors = 2[json_name = "activeActors"];
  int active_actors_size() const;
  private:
  int _internal_active_actors_size() const;
  public:
  void clear_active_actors();
  ::dapr::proto::runtime::v1::ActiveActorsCount* mutable_active_actors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::ActiveActorsCount >*
      mutable_active_actors();
  private:
  const ::dapr::proto::runtime::v1::ActiveActorsCount& _internal_active_actors(int index) const;
  ::dapr::proto::runtime::v1::ActiveActorsCount* _internal_add_active_actors();
  public:
  const ::dapr::proto::runtime::v1::ActiveActorsCount& active_actors(int index) const;
  ::dapr::proto::runtime::v1::ActiveActorsCount* add_active_actors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::ActiveActorsCount >&
      active_actors() const;

  // string placement = 4[json_name = "placement"];
  void clear_placement();
  const std::string& placement() const;
  void set_placement(const std::string& value);
  void set_placement(std::string&& value);
  void set_placement(const char* value);
  void set_placement(const char* value, size_t size);
  std::string* mutable_placement();
  std::string* release_placement();
  void set_allocated_placement(std::string* placement);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_placement();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_placement(
      std::string* placement);
  private:
  const std::string& _internal_placement() const;
  void _internal_set_placement(const std::string& value);
  std::string* _internal_mutable_placement();
  public:

  // .dapr.proto.runtime.v1.ActorRuntime.ActorRuntimeStatus runtime_status = 1[json_name = "runtimeStatus"];
  void clear_runtime_status();
  ::dapr::proto::runtime::v1::ActorRuntime_ActorRuntimeStatus runtime_status() const;
  void set_runtime_status(::dapr::proto::runtime::v1::ActorRuntime_ActorRuntimeStatus value);
  private:
  ::dapr::proto::runtime::v1::ActorRuntime_ActorRuntimeStatus _internal_runtime_status() const;
  void _internal_set_runtime_status(::dapr::proto::runtime::v1::ActorRuntime_ActorRuntimeStatus value);
  public:

  // bool host_ready = 3[json_name = "hostReady"];
  void clear_host_ready();
  bool host_ready() const;
  void set_host_ready(bool value);
  private:
  bool _internal_host_ready() const;
  void _internal_set_host_ready(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.ActorRuntime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::ActiveActorsCount > active_actors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr placement_;
  int runtime_status_;
  bool host_ready_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class ActiveActorsCount PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.ActiveActorsCount) */ {
 public:
  inline ActiveActorsCount() : ActiveActorsCount(nullptr) {};
  virtual ~ActiveActorsCount();

  ActiveActorsCount(const ActiveActorsCount& from);
  ActiveActorsCount(ActiveActorsCount&& from) noexcept
    : ActiveActorsCount() {
    *this = ::std::move(from);
  }

  inline ActiveActorsCount& operator=(const ActiveActorsCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveActorsCount& operator=(ActiveActorsCount&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActiveActorsCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActiveActorsCount* internal_default_instance() {
    return reinterpret_cast<const ActiveActorsCount*>(
               &_ActiveActorsCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(ActiveActorsCount& a, ActiveActorsCount& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveActorsCount* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActiveActorsCount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActiveActorsCount* New() const final {
    return CreateMaybeMessage<ActiveActorsCount>(nullptr);
  }

  ActiveActorsCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActiveActorsCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActiveActorsCount& from);
  void MergeFrom(const ActiveActorsCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActiveActorsCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.ActiveActorsCount";
  }
  protected:
  explicit ActiveActorsCount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.ActiveActorsCount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class RegisteredComponents PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.RegisteredComponents) */ {
 public:
  inline RegisteredComponents() : RegisteredComponents(nullptr) {};
  virtual ~RegisteredComponents();

  RegisteredComponents(const RegisteredComponents& from);
  RegisteredComponents(RegisteredComponents&& from) noexcept
    : RegisteredComponents() {
    *this = ::std::move(from);
  }

  inline RegisteredComponents& operator=(const RegisteredComponents& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisteredComponents& operator=(RegisteredComponents&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisteredComponents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisteredComponents* internal_default_instance() {
    return reinterpret_cast<const RegisteredComponents*>(
               &_RegisteredComponents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(RegisteredComponents& a, RegisteredComponents& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisteredComponents* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisteredComponents* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisteredComponents* New() const final {
    return CreateMaybeMessage<RegisteredComponents>(nullptr);
  }

  RegisteredComponents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisteredComponents>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisteredComponents& from);
  void MergeFrom(const RegisteredComponents& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisteredComponents* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.RegisteredComponents";
  }
  protected:
  explicit RegisteredComponents(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapabilitiesFieldNumber = 4,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kVersionFieldNumber = 3,
  };
  // repeated string capabilities = 4;
  int capabilities_size() const;
  private:
  int _internal_capabilities_size() const;
  public:
  void clear_capabilities();
  const std::string& capabilities(int index) const;
  std::string* mutable_capabilities(int index);
  void set_capabilities(int index, const std::string& value);
  void set_capabilities(int index, std::string&& value);
  void set_capabilities(int index, const char* value);
  void set_capabilities(int index, const char* value, size_t size);
  std::string* add_capabilities();
  void add_capabilities(const std::string& value);
  void add_capabilities(std::string&& value);
  void add_capabilities(const char* value);
  void add_capabilities(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& capabilities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_capabilities();
  private:
  const std::string& _internal_capabilities(int index) const;
  std::string* _internal_add_capabilities();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string version = 3;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_version(
      std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.RegisteredComponents)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> capabilities_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class MetadataHTTPEndpoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.MetadataHTTPEndpoint) */ {
 public:
  inline MetadataHTTPEndpoint() : MetadataHTTPEndpoint(nullptr) {};
  virtual ~MetadataHTTPEndpoint();

  MetadataHTTPEndpoint(const MetadataHTTPEndpoint& from);
  MetadataHTTPEndpoint(MetadataHTTPEndpoint&& from) noexcept
    : MetadataHTTPEndpoint() {
    *this = ::std::move(from);
  }

  inline MetadataHTTPEndpoint& operator=(const MetadataHTTPEndpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetadataHTTPEndpoint& operator=(MetadataHTTPEndpoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetadataHTTPEndpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetadataHTTPEndpoint* internal_default_instance() {
    return reinterpret_cast<const MetadataHTTPEndpoint*>(
               &_MetadataHTTPEndpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(MetadataHTTPEndpoint& a, MetadataHTTPEndpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(MetadataHTTPEndpoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetadataHTTPEndpoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetadataHTTPEndpoint* New() const final {
    return CreateMaybeMessage<MetadataHTTPEndpoint>(nullptr);
  }

  MetadataHTTPEndpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetadataHTTPEndpoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetadataHTTPEndpoint& from);
  void MergeFrom(const MetadataHTTPEndpoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetadataHTTPEndpoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.MetadataHTTPEndpoint";
  }
  protected:
  explicit MetadataHTTPEndpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.MetadataHTTPEndpoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class AppConnectionProperties PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.AppConnectionProperties) */ {
 public:
  inline AppConnectionProperties() : AppConnectionProperties(nullptr) {};
  virtual ~AppConnectionProperties();

  AppConnectionProperties(const AppConnectionProperties& from);
  AppConnectionProperties(AppConnectionProperties&& from) noexcept
    : AppConnectionProperties() {
    *this = ::std::move(from);
  }

  inline AppConnectionProperties& operator=(const AppConnectionProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppConnectionProperties& operator=(AppConnectionProperties&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppConnectionProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppConnectionProperties* internal_default_instance() {
    return reinterpret_cast<const AppConnectionProperties*>(
               &_AppConnectionProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(AppConnectionProperties& a, AppConnectionProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(AppConnectionProperties* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppConnectionProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppConnectionProperties* New() const final {
    return CreateMaybeMessage<AppConnectionProperties>(nullptr);
  }

  AppConnectionProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppConnectionProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppConnectionProperties& from);
  void MergeFrom(const AppConnectionProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppConnectionProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.AppConnectionProperties";
  }
  protected:
  explicit AppConnectionProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolFieldNumber = 2,
    kChannelAddressFieldNumber = 3,
    kHealthFieldNumber = 5,
    kPortFieldNumber = 1,
    kMaxConcurrencyFieldNumber = 4,
  };
  // string protocol = 2;
  void clear_protocol();
  const std::string& protocol() const;
  void set_protocol(const std::string& value);
  void set_protocol(std::string&& value);
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  std::string* mutable_protocol();
  std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_protocol();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_protocol(
      std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // string channel_address = 3[json_name = "channelAddress"];
  void clear_channel_address();
  const std::string& channel_address() const;
  void set_channel_address(const std::string& value);
  void set_channel_address(std::string&& value);
  void set_channel_address(const char* value);
  void set_channel_address(const char* value, size_t size);
  std::string* mutable_channel_address();
  std::string* release_channel_address();
  void set_allocated_channel_address(std::string* channel_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_channel_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_channel_address(
      std::string* channel_address);
  private:
  const std::string& _internal_channel_address() const;
  void _internal_set_channel_address(const std::string& value);
  std::string* _internal_mutable_channel_address();
  public:

  // .dapr.proto.runtime.v1.AppConnectionHealthProperties health = 5;
  bool has_health() const;
  private:
  bool _internal_has_health() const;
  public:
  void clear_health();
  const ::dapr::proto::runtime::v1::AppConnectionHealthProperties& health() const;
  ::dapr::proto::runtime::v1::AppConnectionHealthProperties* release_health();
  ::dapr::proto::runtime::v1::AppConnectionHealthProperties* mutable_health();
  void set_allocated_health(::dapr::proto::runtime::v1::AppConnectionHealthProperties* health);
  private:
  const ::dapr::proto::runtime::v1::AppConnectionHealthProperties& _internal_health() const;
  ::dapr::proto::runtime::v1::AppConnectionHealthProperties* _internal_mutable_health();
  public:
  void unsafe_arena_set_allocated_health(
      ::dapr::proto::runtime::v1::AppConnectionHealthProperties* health);
  ::dapr::proto::runtime::v1::AppConnectionHealthProperties* unsafe_arena_release_health();

  // int32 port = 1;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_concurrency = 4[json_name = "maxConcurrency"];
  void clear_max_concurrency();
  ::PROTOBUF_NAMESPACE_ID::int32 max_concurrency() const;
  void set_max_concurrency(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_concurrency() const;
  void _internal_set_max_concurrency(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.AppConnectionProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_address_;
  ::dapr::proto::runtime::v1::AppConnectionHealthProperties* health_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_concurrency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class AppConnectionHealthProperties PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.AppConnectionHealthProperties) */ {
 public:
  inline AppConnectionHealthProperties() : AppConnectionHealthProperties(nullptr) {};
  virtual ~AppConnectionHealthProperties();

  AppConnectionHealthProperties(const AppConnectionHealthProperties& from);
  AppConnectionHealthProperties(AppConnectionHealthProperties&& from) noexcept
    : AppConnectionHealthProperties() {
    *this = ::std::move(from);
  }

  inline AppConnectionHealthProperties& operator=(const AppConnectionHealthProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppConnectionHealthProperties& operator=(AppConnectionHealthProperties&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppConnectionHealthProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppConnectionHealthProperties* internal_default_instance() {
    return reinterpret_cast<const AppConnectionHealthProperties*>(
               &_AppConnectionHealthProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(AppConnectionHealthProperties& a, AppConnectionHealthProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(AppConnectionHealthProperties* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppConnectionHealthProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppConnectionHealthProperties* New() const final {
    return CreateMaybeMessage<AppConnectionHealthProperties>(nullptr);
  }

  AppConnectionHealthProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppConnectionHealthProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppConnectionHealthProperties& from);
  void MergeFrom(const AppConnectionHealthProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppConnectionHealthProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.AppConnectionHealthProperties";
  }
  protected:
  explicit AppConnectionHealthProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHealthCheckPathFieldNumber = 1,
    kHealthProbeIntervalFieldNumber = 2,
    kHealthProbeTimeoutFieldNumber = 3,
    kHealthThresholdFieldNumber = 4,
  };
  // string health_check_path = 1[json_name = "healthCheckPath"];
  void clear_health_check_path();
  const std::string& health_check_path() const;
  void set_health_check_path(const std::string& value);
  void set_health_check_path(std::string&& value);
  void set_health_check_path(const char* value);
  void set_health_check_path(const char* value, size_t size);
  std::string* mutable_health_check_path();
  std::string* release_health_check_path();
  void set_allocated_health_check_path(std::string* health_check_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_health_check_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_health_check_path(
      std::string* health_check_path);
  private:
  const std::string& _internal_health_check_path() const;
  void _internal_set_health_check_path(const std::string& value);
  std::string* _internal_mutable_health_check_path();
  public:

  // string health_probe_interval = 2[json_name = "healthProbeInterval"];
  void clear_health_probe_interval();
  const std::string& health_probe_interval() const;
  void set_health_probe_interval(const std::string& value);
  void set_health_probe_interval(std::string&& value);
  void set_health_probe_interval(const char* value);
  void set_health_probe_interval(const char* value, size_t size);
  std::string* mutable_health_probe_interval();
  std::string* release_health_probe_interval();
  void set_allocated_health_probe_interval(std::string* health_probe_interval);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_health_probe_interval();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_health_probe_interval(
      std::string* health_probe_interval);
  private:
  const std::string& _internal_health_probe_interval() const;
  void _internal_set_health_probe_interval(const std::string& value);
  std::string* _internal_mutable_health_probe_interval();
  public:

  // string health_probe_timeout = 3[json_name = "healthProbeTimeout"];
  void clear_health_probe_timeout();
  const std::string& health_probe_timeout() const;
  void set_health_probe_timeout(const std::string& value);
  void set_health_probe_timeout(std::string&& value);
  void set_health_probe_timeout(const char* value);
  void set_health_probe_timeout(const char* value, size_t size);
  std::string* mutable_health_probe_timeout();
  std::string* release_health_probe_timeout();
  void set_allocated_health_probe_timeout(std::string* health_probe_timeout);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_health_probe_timeout();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_health_probe_timeout(
      std::string* health_probe_timeout);
  private:
  const std::string& _internal_health_probe_timeout() const;
  void _internal_set_health_probe_timeout(const std::string& value);
  std::string* _internal_mutable_health_probe_timeout();
  public:

  // int32 health_threshold = 4[json_name = "healthThreshold"];
  void clear_health_threshold();
  ::PROTOBUF_NAMESPACE_ID::int32 health_threshold() const;
  void set_health_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_health_threshold() const;
  void _internal_set_health_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.AppConnectionHealthProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr health_check_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr health_probe_interval_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr health_probe_timeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 health_threshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class PubsubSubscription_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PubsubSubscription_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PubsubSubscription_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PubsubSubscription_MetadataEntry_DoNotUse();
  PubsubSubscription_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PubsubSubscription_MetadataEntry_DoNotUse& other);
  static const PubsubSubscription_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PubsubSubscription_MetadataEntry_DoNotUse*>(&_PubsubSubscription_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.PubsubSubscription.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.PubsubSubscription.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[72];
  }

  public:
};

// -------------------------------------------------------------------

class PubsubSubscription PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.PubsubSubscription) */ {
 public:
  inline PubsubSubscription() : PubsubSubscription(nullptr) {};
  virtual ~PubsubSubscription();

  PubsubSubscription(const PubsubSubscription& from);
  PubsubSubscription(PubsubSubscription&& from) noexcept
    : PubsubSubscription() {
    *this = ::std::move(from);
  }

  inline PubsubSubscription& operator=(const PubsubSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline PubsubSubscription& operator=(PubsubSubscription&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PubsubSubscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PubsubSubscription* internal_default_instance() {
    return reinterpret_cast<const PubsubSubscription*>(
               &_PubsubSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(PubsubSubscription& a, PubsubSubscription& b) {
    a.Swap(&b);
  }
  inline void Swap(PubsubSubscription* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PubsubSubscription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PubsubSubscription* New() const final {
    return CreateMaybeMessage<PubsubSubscription>(nullptr);
  }

  PubsubSubscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PubsubSubscription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PubsubSubscription& from);
  void MergeFrom(const PubsubSubscription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PubsubSubscription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.PubsubSubscription";
  }
  protected:
  explicit PubsubSubscription(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kPubsubNameFieldNumber = 1,
    kTopicFieldNumber = 2,
    kDeadLetterTopicFieldNumber = 5,
    kRulesFieldNumber = 4,
    kTypeFieldNumber = 6,
  };
  // map<string, string> metadata = 3[json_name = "metadata"];
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string pubsub_name = 1[json_name = "pubsubname"];
  void clear_pubsub_name();
  const std::string& pubsub_name() const;
  void set_pubsub_name(const std::string& value);
  void set_pubsub_name(std::string&& value);
  void set_pubsub_name(const char* value);
  void set_pubsub_name(const char* value, size_t size);
  std::string* mutable_pubsub_name();
  std::string* release_pubsub_name();
  void set_allocated_pubsub_name(std::string* pubsub_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pubsub_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pubsub_name(
      std::string* pubsub_name);
  private:
  const std::string& _internal_pubsub_name() const;
  void _internal_set_pubsub_name(const std::string& value);
  std::string* _internal_mutable_pubsub_name();
  public:

  // string topic = 2[json_name = "topic"];
  void clear_topic();
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_topic();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_topic(
      std::string* topic);
  private:
  const std::string& _internal_topic() const;
  void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // string dead_letter_topic = 5[json_name = "deadLetterTopic"];
  void clear_dead_letter_topic();
  const std::string& dead_letter_topic() const;
  void set_dead_letter_topic(const std::string& value);
  void set_dead_letter_topic(std::string&& value);
  void set_dead_letter_topic(const char* value);
  void set_dead_letter_topic(const char* value, size_t size);
  std::string* mutable_dead_letter_topic();
  std::string* release_dead_letter_topic();
  void set_allocated_dead_letter_topic(std::string* dead_letter_topic);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dead_letter_topic();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dead_letter_topic(
      std::string* dead_letter_topic);
  private:
  const std::string& _internal_dead_letter_topic() const;
  void _internal_set_dead_letter_topic(const std::string& value);
  std::string* _internal_mutable_dead_letter_topic();
  public:

  // .dapr.proto.runtime.v1.PubsubSubscriptionRules rules = 4[json_name = "rules"];
  bool has_rules() const;
  private:
  bool _internal_has_rules() const;
  public:
  void clear_rules();
  const ::dapr::proto::runtime::v1::PubsubSubscriptionRules& rules() const;
  ::dapr::proto::runtime::v1::PubsubSubscriptionRules* release_rules();
  ::dapr::proto::runtime::v1::PubsubSubscriptionRules* mutable_rules();
  void set_allocated_rules(::dapr::proto::runtime::v1::PubsubSubscriptionRules* rules);
  private:
  const ::dapr::proto::runtime::v1::PubsubSubscriptionRules& _internal_rules() const;
  ::dapr::proto::runtime::v1::PubsubSubscriptionRules* _internal_mutable_rules();
  public:
  void unsafe_arena_set_allocated_rules(
      ::dapr::proto::runtime::v1::PubsubSubscriptionRules* rules);
  ::dapr::proto::runtime::v1::PubsubSubscriptionRules* unsafe_arena_release_rules();

  // .dapr.proto.runtime.v1.PubsubSubscriptionType type = 6[json_name = "type"];
  void clear_type();
  ::dapr::proto::runtime::v1::PubsubSubscriptionType type() const;
  void set_type(::dapr::proto::runtime::v1::PubsubSubscriptionType value);
  private:
  ::dapr::proto::runtime::v1::PubsubSubscriptionType _internal_type() const;
  void _internal_set_type(::dapr::proto::runtime::v1::PubsubSubscriptionType value);
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.PubsubSubscription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PubsubSubscription_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubsub_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dead_letter_topic_;
  ::dapr::proto::runtime::v1::PubsubSubscriptionRules* rules_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class PubsubSubscriptionRules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.PubsubSubscriptionRules) */ {
 public:
  inline PubsubSubscriptionRules() : PubsubSubscriptionRules(nullptr) {};
  virtual ~PubsubSubscriptionRules();

  PubsubSubscriptionRules(const PubsubSubscriptionRules& from);
  PubsubSubscriptionRules(PubsubSubscriptionRules&& from) noexcept
    : PubsubSubscriptionRules() {
    *this = ::std::move(from);
  }

  inline PubsubSubscriptionRules& operator=(const PubsubSubscriptionRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline PubsubSubscriptionRules& operator=(PubsubSubscriptionRules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PubsubSubscriptionRules& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PubsubSubscriptionRules* internal_default_instance() {
    return reinterpret_cast<const PubsubSubscriptionRules*>(
               &_PubsubSubscriptionRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(PubsubSubscriptionRules& a, PubsubSubscriptionRules& b) {
    a.Swap(&b);
  }
  inline void Swap(PubsubSubscriptionRules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PubsubSubscriptionRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PubsubSubscriptionRules* New() const final {
    return CreateMaybeMessage<PubsubSubscriptionRules>(nullptr);
  }

  PubsubSubscriptionRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PubsubSubscriptionRules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PubsubSubscriptionRules& from);
  void MergeFrom(const PubsubSubscriptionRules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PubsubSubscriptionRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.PubsubSubscriptionRules";
  }
  protected:
  explicit PubsubSubscriptionRules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 1,
  };
  // repeated .dapr.proto.runtime.v1.PubsubSubscriptionRule rules = 1;
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  ::dapr::proto::runtime::v1::PubsubSubscriptionRule* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::PubsubSubscriptionRule >*
      mutable_rules();
  private:
  const ::dapr::proto::runtime::v1::PubsubSubscriptionRule& _internal_rules(int index) const;
  ::dapr::proto::runtime::v1::PubsubSubscriptionRule* _internal_add_rules();
  public:
  const ::dapr::proto::runtime::v1::PubsubSubscriptionRule& rules(int index) const;
  ::dapr::proto::runtime::v1::PubsubSubscriptionRule* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::PubsubSubscriptionRule >&
      rules() const;

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.PubsubSubscriptionRules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::PubsubSubscriptionRule > rules_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class PubsubSubscriptionRule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.PubsubSubscriptionRule) */ {
 public:
  inline PubsubSubscriptionRule() : PubsubSubscriptionRule(nullptr) {};
  virtual ~PubsubSubscriptionRule();

  PubsubSubscriptionRule(const PubsubSubscriptionRule& from);
  PubsubSubscriptionRule(PubsubSubscriptionRule&& from) noexcept
    : PubsubSubscriptionRule() {
    *this = ::std::move(from);
  }

  inline PubsubSubscriptionRule& operator=(const PubsubSubscriptionRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline PubsubSubscriptionRule& operator=(PubsubSubscriptionRule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PubsubSubscriptionRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PubsubSubscriptionRule* internal_default_instance() {
    return reinterpret_cast<const PubsubSubscriptionRule*>(
               &_PubsubSubscriptionRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(PubsubSubscriptionRule& a, PubsubSubscriptionRule& b) {
    a.Swap(&b);
  }
  inline void Swap(PubsubSubscriptionRule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PubsubSubscriptionRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PubsubSubscriptionRule* New() const final {
    return CreateMaybeMessage<PubsubSubscriptionRule>(nullptr);
  }

  PubsubSubscriptionRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PubsubSubscriptionRule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PubsubSubscriptionRule& from);
  void MergeFrom(const PubsubSubscriptionRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PubsubSubscriptionRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.PubsubSubscriptionRule";
  }
  protected:
  explicit PubsubSubscriptionRule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchFieldNumber = 1,
    kPathFieldNumber = 2,
  };
  // string match = 1;
  void clear_match();
  const std::string& match() const;
  void set_match(const std::string& value);
  void set_match(std::string&& value);
  void set_match(const char* value);
  void set_match(const char* value, size_t size);
  std::string* mutable_match();
  std::string* release_match();
  void set_allocated_match(std::string* match);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_match();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_match(
      std::string* match);
  private:
  const std::string& _internal_match() const;
  void _internal_set_match(const std::string& value);
  std::string* _internal_mutable_match();
  public:

  // string path = 2;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path(
      std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.PubsubSubscriptionRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr match_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SetMetadataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SetMetadataRequest) */ {
 public:
  inline SetMetadataRequest() : SetMetadataRequest(nullptr) {};
  virtual ~SetMetadataRequest();

  SetMetadataRequest(const SetMetadataRequest& from);
  SetMetadataRequest(SetMetadataRequest&& from) noexcept
    : SetMetadataRequest() {
    *this = ::std::move(from);
  }

  inline SetMetadataRequest& operator=(const SetMetadataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMetadataRequest& operator=(SetMetadataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetMetadataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMetadataRequest* internal_default_instance() {
    return reinterpret_cast<const SetMetadataRequest*>(
               &_SetMetadataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(SetMetadataRequest& a, SetMetadataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetMetadataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetMetadataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetMetadataRequest* New() const final {
    return CreateMaybeMessage<SetMetadataRequest>(nullptr);
  }

  SetMetadataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetMetadataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetMetadataRequest& from);
  void MergeFrom(const SetMetadataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMetadataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SetMetadataRequest";
  }
  protected:
  explicit SetMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SetMetadataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class GetConfigurationRequest_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetConfigurationRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetConfigurationRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GetConfigurationRequest_MetadataEntry_DoNotUse();
  GetConfigurationRequest_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetConfigurationRequest_MetadataEntry_DoNotUse& other);
  static const GetConfigurationRequest_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetConfigurationRequest_MetadataEntry_DoNotUse*>(&_GetConfigurationRequest_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.GetConfigurationRequest.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.GetConfigurationRequest.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[77];
  }

  public:
};

// -------------------------------------------------------------------

class GetConfigurationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.GetConfigurationRequest) */ {
 public:
  inline GetConfigurationRequest() : GetConfigurationRequest(nullptr) {};
  virtual ~GetConfigurationRequest();

  GetConfigurationRequest(const GetConfigurationRequest& from);
  GetConfigurationRequest(GetConfigurationRequest&& from) noexcept
    : GetConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline GetConfigurationRequest& operator=(const GetConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfigurationRequest& operator=(GetConfigurationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConfigurationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const GetConfigurationRequest*>(
               &_GetConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(GetConfigurationRequest& a, GetConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfigurationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConfigurationRequest* New() const final {
    return CreateMaybeMessage<GetConfigurationRequest>(nullptr);
  }

  GetConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConfigurationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConfigurationRequest& from);
  void MergeFrom(const GetConfigurationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConfigurationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.GetConfigurationRequest";
  }
  protected:
  explicit GetConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
    kMetadataFieldNumber = 3,
    kStoreNameFieldNumber = 1,
  };
  // repeated string keys = 2;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();
  private:
  const std::string& _internal_keys(int index) const;
  std::string* _internal_add_keys();
  public:

  // map<string, string> metadata = 3;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string store_name = 1;
  void clear_store_name();
  const std::string& store_name() const;
  void set_store_name(const std::string& value);
  void set_store_name(std::string&& value);
  void set_store_name(const char* value);
  void set_store_name(const char* value, size_t size);
  std::string* mutable_store_name();
  std::string* release_store_name();
  void set_allocated_store_name(std::string* store_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_store_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_store_name(
      std::string* store_name);
  private:
  const std::string& _internal_store_name() const;
  void _internal_set_store_name(const std::string& value);
  std::string* _internal_mutable_store_name();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.GetConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetConfigurationRequest_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr store_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class GetConfigurationResponse_ItemsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetConfigurationResponse_ItemsEntry_DoNotUse, 
    std::string, ::dapr::proto::common::v1::ConfigurationItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetConfigurationResponse_ItemsEntry_DoNotUse, 
    std::string, ::dapr::proto::common::v1::ConfigurationItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GetConfigurationResponse_ItemsEntry_DoNotUse();
  GetConfigurationResponse_ItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetConfigurationResponse_ItemsEntry_DoNotUse& other);
  static const GetConfigurationResponse_ItemsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetConfigurationResponse_ItemsEntry_DoNotUse*>(&_GetConfigurationResponse_ItemsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.GetConfigurationResponse.ItemsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[79];
  }

  public:
};

// -------------------------------------------------------------------

class GetConfigurationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.GetConfigurationResponse) */ {
 public:
  inline GetConfigurationResponse() : GetConfigurationResponse(nullptr) {};
  virtual ~GetConfigurationResponse();

  GetConfigurationResponse(const GetConfigurationResponse& from);
  GetConfigurationResponse(GetConfigurationResponse&& from) noexcept
    : GetConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline GetConfigurationResponse& operator=(const GetConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfigurationResponse& operator=(GetConfigurationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConfigurationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const GetConfigurationResponse*>(
               &_GetConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(GetConfigurationResponse& a, GetConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfigurationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConfigurationResponse* New() const final {
    return CreateMaybeMessage<GetConfigurationResponse>(nullptr);
  }

  GetConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConfigurationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConfigurationResponse& from);
  void MergeFrom(const GetConfigurationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConfigurationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.GetConfigurationResponse";
  }
  protected:
  explicit GetConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // map<string, .dapr.proto.common.v1.ConfigurationItem> items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::common::v1::ConfigurationItem >&
      _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::common::v1::ConfigurationItem >*
      _internal_mutable_items();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::common::v1::ConfigurationItem >&
      items() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::common::v1::ConfigurationItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.GetConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetConfigurationResponse_ItemsEntry_DoNotUse,
      std::string, ::dapr::proto::common::v1::ConfigurationItem,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SubscribeConfigurationRequest_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SubscribeConfigurationRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SubscribeConfigurationRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  SubscribeConfigurationRequest_MetadataEntry_DoNotUse();
  SubscribeConfigurationRequest_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SubscribeConfigurationRequest_MetadataEntry_DoNotUse& other);
  static const SubscribeConfigurationRequest_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SubscribeConfigurationRequest_MetadataEntry_DoNotUse*>(&_SubscribeConfigurationRequest_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.SubscribeConfigurationRequest.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.SubscribeConfigurationRequest.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[81];
  }

  public:
};

// -------------------------------------------------------------------

class SubscribeConfigurationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SubscribeConfigurationRequest) */ {
 public:
  inline SubscribeConfigurationRequest() : SubscribeConfigurationRequest(nullptr) {};
  virtual ~SubscribeConfigurationRequest();

  SubscribeConfigurationRequest(const SubscribeConfigurationRequest& from);
  SubscribeConfigurationRequest(SubscribeConfigurationRequest&& from) noexcept
    : SubscribeConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeConfigurationRequest& operator=(const SubscribeConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeConfigurationRequest& operator=(SubscribeConfigurationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeConfigurationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeConfigurationRequest*>(
               &_SubscribeConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(SubscribeConfigurationRequest& a, SubscribeConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeConfigurationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeConfigurationRequest* New() const final {
    return CreateMaybeMessage<SubscribeConfigurationRequest>(nullptr);
  }

  SubscribeConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeConfigurationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeConfigurationRequest& from);
  void MergeFrom(const SubscribeConfigurationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeConfigurationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SubscribeConfigurationRequest";
  }
  protected:
  explicit SubscribeConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
    kMetadataFieldNumber = 3,
    kStoreNameFieldNumber = 1,
  };
  // repeated string keys = 2;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();
  private:
  const std::string& _internal_keys(int index) const;
  std::string* _internal_add_keys();
  public:

  // map<string, string> metadata = 3;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string store_name = 1;
  void clear_store_name();
  const std::string& store_name() const;
  void set_store_name(const std::string& value);
  void set_store_name(std::string&& value);
  void set_store_name(const char* value);
  void set_store_name(const char* value, size_t size);
  std::string* mutable_store_name();
  std::string* release_store_name();
  void set_allocated_store_name(std::string* store_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_store_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_store_name(
      std::string* store_name);
  private:
  const std::string& _internal_store_name() const;
  void _internal_set_store_name(const std::string& value);
  std::string* _internal_mutable_store_name();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SubscribeConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SubscribeConfigurationRequest_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr store_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class UnsubscribeConfigurationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.UnsubscribeConfigurationRequest) */ {
 public:
  inline UnsubscribeConfigurationRequest() : UnsubscribeConfigurationRequest(nullptr) {};
  virtual ~UnsubscribeConfigurationRequest();

  UnsubscribeConfigurationRequest(const UnsubscribeConfigurationRequest& from);
  UnsubscribeConfigurationRequest(UnsubscribeConfigurationRequest&& from) noexcept
    : UnsubscribeConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline UnsubscribeConfigurationRequest& operator=(const UnsubscribeConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnsubscribeConfigurationRequest& operator=(UnsubscribeConfigurationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnsubscribeConfigurationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnsubscribeConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const UnsubscribeConfigurationRequest*>(
               &_UnsubscribeConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(UnsubscribeConfigurationRequest& a, UnsubscribeConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnsubscribeConfigurationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnsubscribeConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnsubscribeConfigurationRequest* New() const final {
    return CreateMaybeMessage<UnsubscribeConfigurationRequest>(nullptr);
  }

  UnsubscribeConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnsubscribeConfigurationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnsubscribeConfigurationRequest& from);
  void MergeFrom(const UnsubscribeConfigurationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnsubscribeConfigurationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.UnsubscribeConfigurationRequest";
  }
  protected:
  explicit UnsubscribeConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoreNameFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string store_name = 1;
  void clear_store_name();
  const std::string& store_name() const;
  void set_store_name(const std::string& value);
  void set_store_name(std::string&& value);
  void set_store_name(const char* value);
  void set_store_name(const char* value, size_t size);
  std::string* mutable_store_name();
  std::string* release_store_name();
  void set_allocated_store_name(std::string* store_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_store_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_store_name(
      std::string* store_name);
  private:
  const std::string& _internal_store_name() const;
  void _internal_set_store_name(const std::string& value);
  std::string* _internal_mutable_store_name();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.UnsubscribeConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr store_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SubscribeConfigurationResponse_ItemsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SubscribeConfigurationResponse_ItemsEntry_DoNotUse, 
    std::string, ::dapr::proto::common::v1::ConfigurationItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SubscribeConfigurationResponse_ItemsEntry_DoNotUse, 
    std::string, ::dapr::proto::common::v1::ConfigurationItem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SubscribeConfigurationResponse_ItemsEntry_DoNotUse();
  SubscribeConfigurationResponse_ItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SubscribeConfigurationResponse_ItemsEntry_DoNotUse& other);
  static const SubscribeConfigurationResponse_ItemsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SubscribeConfigurationResponse_ItemsEntry_DoNotUse*>(&_SubscribeConfigurationResponse_ItemsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.SubscribeConfigurationResponse.ItemsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[84];
  }

  public:
};

// -------------------------------------------------------------------

class SubscribeConfigurationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SubscribeConfigurationResponse) */ {
 public:
  inline SubscribeConfigurationResponse() : SubscribeConfigurationResponse(nullptr) {};
  virtual ~SubscribeConfigurationResponse();

  SubscribeConfigurationResponse(const SubscribeConfigurationResponse& from);
  SubscribeConfigurationResponse(SubscribeConfigurationResponse&& from) noexcept
    : SubscribeConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline SubscribeConfigurationResponse& operator=(const SubscribeConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeConfigurationResponse& operator=(SubscribeConfigurationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeConfigurationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const SubscribeConfigurationResponse*>(
               &_SubscribeConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(SubscribeConfigurationResponse& a, SubscribeConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeConfigurationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeConfigurationResponse* New() const final {
    return CreateMaybeMessage<SubscribeConfigurationResponse>(nullptr);
  }

  SubscribeConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeConfigurationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeConfigurationResponse& from);
  void MergeFrom(const SubscribeConfigurationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeConfigurationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SubscribeConfigurationResponse";
  }
  protected:
  explicit SubscribeConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // map<string, .dapr.proto.common.v1.ConfigurationItem> items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::common::v1::ConfigurationItem >&
      _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::common::v1::ConfigurationItem >*
      _internal_mutable_items();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::common::v1::ConfigurationItem >&
      items() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::common::v1::ConfigurationItem >*
      mutable_items();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SubscribeConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SubscribeConfigurationResponse_ItemsEntry_DoNotUse,
      std::string, ::dapr::proto::common::v1::ConfigurationItem,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class UnsubscribeConfigurationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.UnsubscribeConfigurationResponse) */ {
 public:
  inline UnsubscribeConfigurationResponse() : UnsubscribeConfigurationResponse(nullptr) {};
  virtual ~UnsubscribeConfigurationResponse();

  UnsubscribeConfigurationResponse(const UnsubscribeConfigurationResponse& from);
  UnsubscribeConfigurationResponse(UnsubscribeConfigurationResponse&& from) noexcept
    : UnsubscribeConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline UnsubscribeConfigurationResponse& operator=(const UnsubscribeConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnsubscribeConfigurationResponse& operator=(UnsubscribeConfigurationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnsubscribeConfigurationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnsubscribeConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const UnsubscribeConfigurationResponse*>(
               &_UnsubscribeConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(UnsubscribeConfigurationResponse& a, UnsubscribeConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnsubscribeConfigurationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnsubscribeConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnsubscribeConfigurationResponse* New() const final {
    return CreateMaybeMessage<UnsubscribeConfigurationResponse>(nullptr);
  }

  UnsubscribeConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnsubscribeConfigurationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnsubscribeConfigurationResponse& from);
  void MergeFrom(const UnsubscribeConfigurationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnsubscribeConfigurationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.UnsubscribeConfigurationResponse";
  }
  protected:
  explicit UnsubscribeConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kOkFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.UnsubscribeConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class TryLockRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.TryLockRequest) */ {
 public:
  inline TryLockRequest() : TryLockRequest(nullptr) {};
  virtual ~TryLockRequest();

  TryLockRequest(const TryLockRequest& from);
  TryLockRequest(TryLockRequest&& from) noexcept
    : TryLockRequest() {
    *this = ::std::move(from);
  }

  inline TryLockRequest& operator=(const TryLockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TryLockRequest& operator=(TryLockRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TryLockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TryLockRequest* internal_default_instance() {
    return reinterpret_cast<const TryLockRequest*>(
               &_TryLockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(TryLockRequest& a, TryLockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TryLockRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TryLockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TryLockRequest* New() const final {
    return CreateMaybeMessage<TryLockRequest>(nullptr);
  }

  TryLockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TryLockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TryLockRequest& from);
  void MergeFrom(const TryLockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TryLockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.TryLockRequest";
  }
  protected:
  explicit TryLockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoreNameFieldNumber = 1,
    kResourceIdFieldNumber = 2,
    kLockOwnerFieldNumber = 3,
    kExpiryInSecondsFieldNumber = 4,
  };
  // string store_name = 1[json_name = "storeName"];
  void clear_store_name();
  const std::string& store_name() const;
  void set_store_name(const std::string& value);
  void set_store_name(std::string&& value);
  void set_store_name(const char* value);
  void set_store_name(const char* value, size_t size);
  std::string* mutable_store_name();
  std::string* release_store_name();
  void set_allocated_store_name(std::string* store_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_store_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_store_name(
      std::string* store_name);
  private:
  const std::string& _internal_store_name() const;
  void _internal_set_store_name(const std::string& value);
  std::string* _internal_mutable_store_name();
  public:

  // string resource_id = 2[json_name = "resourceId"];
  void clear_resource_id();
  const std::string& resource_id() const;
  void set_resource_id(const std::string& value);
  void set_resource_id(std::string&& value);
  void set_resource_id(const char* value);
  void set_resource_id(const char* value, size_t size);
  std::string* mutable_resource_id();
  std::string* release_resource_id();
  void set_allocated_resource_id(std::string* resource_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_resource_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_resource_id(
      std::string* resource_id);
  private:
  const std::string& _internal_resource_id() const;
  void _internal_set_resource_id(const std::string& value);
  std::string* _internal_mutable_resource_id();
  public:

  // string lock_owner = 3[json_name = "lockOwner"];
  void clear_lock_owner();
  const std::string& lock_owner() const;
  void set_lock_owner(const std::string& value);
  void set_lock_owner(std::string&& value);
  void set_lock_owner(const char* value);
  void set_lock_owner(const char* value, size_t size);
  std::string* mutable_lock_owner();
  std::string* release_lock_owner();
  void set_allocated_lock_owner(std::string* lock_owner);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_lock_owner();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_lock_owner(
      std::string* lock_owner);
  private:
  const std::string& _internal_lock_owner() const;
  void _internal_set_lock_owner(const std::string& value);
  std::string* _internal_mutable_lock_owner();
  public:

  // int32 expiry_in_seconds = 4[json_name = "expiryInSeconds"];
  void clear_expiry_in_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 expiry_in_seconds() const;
  void set_expiry_in_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expiry_in_seconds() const;
  void _internal_set_expiry_in_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.TryLockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr store_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lock_owner_;
  ::PROTOBUF_NAMESPACE_ID::int32 expiry_in_seconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class TryLockResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.TryLockResponse) */ {
 public:
  inline TryLockResponse() : TryLockResponse(nullptr) {};
  virtual ~TryLockResponse();

  TryLockResponse(const TryLockResponse& from);
  TryLockResponse(TryLockResponse&& from) noexcept
    : TryLockResponse() {
    *this = ::std::move(from);
  }

  inline TryLockResponse& operator=(const TryLockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TryLockResponse& operator=(TryLockResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TryLockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TryLockResponse* internal_default_instance() {
    return reinterpret_cast<const TryLockResponse*>(
               &_TryLockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(TryLockResponse& a, TryLockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TryLockResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TryLockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TryLockResponse* New() const final {
    return CreateMaybeMessage<TryLockResponse>(nullptr);
  }

  TryLockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TryLockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TryLockResponse& from);
  void MergeFrom(const TryLockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TryLockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.TryLockResponse";
  }
  protected:
  explicit TryLockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.TryLockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class UnlockRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.UnlockRequest) */ {
 public:
  inline UnlockRequest() : UnlockRequest(nullptr) {};
  virtual ~UnlockRequest();

  UnlockRequest(const UnlockRequest& from);
  UnlockRequest(UnlockRequest&& from) noexcept
    : UnlockRequest() {
    *this = ::std::move(from);
  }

  inline UnlockRequest& operator=(const UnlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnlockRequest& operator=(UnlockRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnlockRequest* internal_default_instance() {
    return reinterpret_cast<const UnlockRequest*>(
               &_UnlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(UnlockRequest& a, UnlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnlockRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnlockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnlockRequest* New() const final {
    return CreateMaybeMessage<UnlockRequest>(nullptr);
  }

  UnlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnlockRequest& from);
  void MergeFrom(const UnlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.UnlockRequest";
  }
  protected:
  explicit UnlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoreNameFieldNumber = 1,
    kResourceIdFieldNumber = 2,
    kLockOwnerFieldNumber = 3,
  };
  // string store_name = 1[json_name = "storeName"];
  void clear_store_name();
  const std::string& store_name() const;
  void set_store_name(const std::string& value);
  void set_store_name(std::string&& value);
  void set_store_name(const char* value);
  void set_store_name(const char* value, size_t size);
  std::string* mutable_store_name();
  std::string* release_store_name();
  void set_allocated_store_name(std::string* store_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_store_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_store_name(
      std::string* store_name);
  private:
  const std::string& _internal_store_name() const;
  void _internal_set_store_name(const std::string& value);
  std::string* _internal_mutable_store_name();
  public:

  // string resource_id = 2[json_name = "resourceId"];
  void clear_resource_id();
  const std::string& resource_id() const;
  void set_resource_id(const std::string& value);
  void set_resource_id(std::string&& value);
  void set_resource_id(const char* value);
  void set_resource_id(const char* value, size_t size);
  std::string* mutable_resource_id();
  std::string* release_resource_id();
  void set_allocated_resource_id(std::string* resource_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_resource_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_resource_id(
      std::string* resource_id);
  private:
  const std::string& _internal_resource_id() const;
  void _internal_set_resource_id(const std::string& value);
  std::string* _internal_mutable_resource_id();
  public:

  // string lock_owner = 3[json_name = "lockOwner"];
  void clear_lock_owner();
  const std::string& lock_owner() const;
  void set_lock_owner(const std::string& value);
  void set_lock_owner(std::string&& value);
  void set_lock_owner(const char* value);
  void set_lock_owner(const char* value, size_t size);
  std::string* mutable_lock_owner();
  std::string* release_lock_owner();
  void set_allocated_lock_owner(std::string* lock_owner);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_lock_owner();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_lock_owner(
      std::string* lock_owner);
  private:
  const std::string& _internal_lock_owner() const;
  void _internal_set_lock_owner(const std::string& value);
  std::string* _internal_mutable_lock_owner();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.UnlockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr store_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lock_owner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class UnlockResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.UnlockResponse) */ {
 public:
  inline UnlockResponse() : UnlockResponse(nullptr) {};
  virtual ~UnlockResponse();

  UnlockResponse(const UnlockResponse& from);
  UnlockResponse(UnlockResponse&& from) noexcept
    : UnlockResponse() {
    *this = ::std::move(from);
  }

  inline UnlockResponse& operator=(const UnlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnlockResponse& operator=(UnlockResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnlockResponse* internal_default_instance() {
    return reinterpret_cast<const UnlockResponse*>(
               &_UnlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(UnlockResponse& a, UnlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnlockResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnlockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnlockResponse* New() const final {
    return CreateMaybeMessage<UnlockResponse>(nullptr);
  }

  UnlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnlockResponse& from);
  void MergeFrom(const UnlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.UnlockResponse";
  }
  protected:
  explicit UnlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UnlockResponse_Status Status;
  static constexpr Status SUCCESS =
    UnlockResponse_Status_SUCCESS;
  static constexpr Status LOCK_DOES_NOT_EXIST =
    UnlockResponse_Status_LOCK_DOES_NOT_EXIST;
  static constexpr Status LOCK_BELONGS_TO_OTHERS =
    UnlockResponse_Status_LOCK_BELONGS_TO_OTHERS;
  static constexpr Status INTERNAL_ERROR =
    UnlockResponse_Status_INTERNAL_ERROR;
  static inline bool Status_IsValid(int value) {
    return UnlockResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    UnlockResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    UnlockResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    UnlockResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return UnlockResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return UnlockResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return UnlockResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .dapr.proto.runtime.v1.UnlockResponse.Status status = 1;
  void clear_status();
  ::dapr::proto::runtime::v1::UnlockResponse_Status status() const;
  void set_status(::dapr::proto::runtime::v1::UnlockResponse_Status value);
  private:
  ::dapr::proto::runtime::v1::UnlockResponse_Status _internal_status() const;
  void _internal_set_status(::dapr::proto::runtime::v1::UnlockResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.UnlockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SubtleGetKeyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SubtleGetKeyRequest) */ {
 public:
  inline SubtleGetKeyRequest() : SubtleGetKeyRequest(nullptr) {};
  virtual ~SubtleGetKeyRequest();

  SubtleGetKeyRequest(const SubtleGetKeyRequest& from);
  SubtleGetKeyRequest(SubtleGetKeyRequest&& from) noexcept
    : SubtleGetKeyRequest() {
    *this = ::std::move(from);
  }

  inline SubtleGetKeyRequest& operator=(const SubtleGetKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubtleGetKeyRequest& operator=(SubtleGetKeyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubtleGetKeyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubtleGetKeyRequest* internal_default_instance() {
    return reinterpret_cast<const SubtleGetKeyRequest*>(
               &_SubtleGetKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(SubtleGetKeyRequest& a, SubtleGetKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubtleGetKeyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubtleGetKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubtleGetKeyRequest* New() const final {
    return CreateMaybeMessage<SubtleGetKeyRequest>(nullptr);
  }

  SubtleGetKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubtleGetKeyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubtleGetKeyRequest& from);
  void MergeFrom(const SubtleGetKeyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubtleGetKeyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SubtleGetKeyRequest";
  }
  protected:
  explicit SubtleGetKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SubtleGetKeyRequest_KeyFormat KeyFormat;
  static constexpr KeyFormat PEM =
    SubtleGetKeyRequest_KeyFormat_PEM;
  static constexpr KeyFormat JSON =
    SubtleGetKeyRequest_KeyFormat_JSON;
  static inline bool KeyFormat_IsValid(int value) {
    return SubtleGetKeyRequest_KeyFormat_IsValid(value);
  }
  static constexpr KeyFormat KeyFormat_MIN =
    SubtleGetKeyRequest_KeyFormat_KeyFormat_MIN;
  static constexpr KeyFormat KeyFormat_MAX =
    SubtleGetKeyRequest_KeyFormat_KeyFormat_MAX;
  static constexpr int KeyFormat_ARRAYSIZE =
    SubtleGetKeyRequest_KeyFormat_KeyFormat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  KeyFormat_descriptor() {
    return SubtleGetKeyRequest_KeyFormat_descriptor();
  }
  template<typename T>
  static inline const std::string& KeyFormat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, KeyFormat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function KeyFormat_Name.");
    return SubtleGetKeyRequest_KeyFormat_Name(enum_t_value);
  }
  static inline bool KeyFormat_Parse(const std::string& name,
      KeyFormat* value) {
    return SubtleGetKeyRequest_KeyFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kComponentNameFieldNumber = 1,
    kNameFieldNumber = 2,
    kFormatFieldNumber = 3,
  };
  // string component_name = 1[json_name = "componentName"];
  void clear_component_name();
  const std::string& component_name() const;
  void set_component_name(const std::string& value);
  void set_component_name(std::string&& value);
  void set_component_name(const char* value);
  void set_component_name(const char* value, size_t size);
  std::string* mutable_component_name();
  std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_component_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_component_name(
      std::string* component_name);
  private:
  const std::string& _internal_component_name() const;
  void _internal_set_component_name(const std::string& value);
  std::string* _internal_mutable_component_name();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .dapr.proto.runtime.v1.SubtleGetKeyRequest.KeyFormat format = 3;
  void clear_format();
  ::dapr::proto::runtime::v1::SubtleGetKeyRequest_KeyFormat format() const;
  void set_format(::dapr::proto::runtime::v1::SubtleGetKeyRequest_KeyFormat value);
  private:
  ::dapr::proto::runtime::v1::SubtleGetKeyRequest_KeyFormat _internal_format() const;
  void _internal_set_format(::dapr::proto::runtime::v1::SubtleGetKeyRequest_KeyFormat value);
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SubtleGetKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SubtleGetKeyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SubtleGetKeyResponse) */ {
 public:
  inline SubtleGetKeyResponse() : SubtleGetKeyResponse(nullptr) {};
  virtual ~SubtleGetKeyResponse();

  SubtleGetKeyResponse(const SubtleGetKeyResponse& from);
  SubtleGetKeyResponse(SubtleGetKeyResponse&& from) noexcept
    : SubtleGetKeyResponse() {
    *this = ::std::move(from);
  }

  inline SubtleGetKeyResponse& operator=(const SubtleGetKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubtleGetKeyResponse& operator=(SubtleGetKeyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubtleGetKeyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubtleGetKeyResponse* internal_default_instance() {
    return reinterpret_cast<const SubtleGetKeyResponse*>(
               &_SubtleGetKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(SubtleGetKeyResponse& a, SubtleGetKeyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubtleGetKeyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubtleGetKeyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubtleGetKeyResponse* New() const final {
    return CreateMaybeMessage<SubtleGetKeyResponse>(nullptr);
  }

  SubtleGetKeyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubtleGetKeyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubtleGetKeyResponse& from);
  void MergeFrom(const SubtleGetKeyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubtleGetKeyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SubtleGetKeyResponse";
  }
  protected:
  explicit SubtleGetKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPublicKeyFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string public_key = 2[json_name = "publicKey"];
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_public_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_public_key(
      std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SubtleGetKeyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SubtleEncryptRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SubtleEncryptRequest) */ {
 public:
  inline SubtleEncryptRequest() : SubtleEncryptRequest(nullptr) {};
  virtual ~SubtleEncryptRequest();

  SubtleEncryptRequest(const SubtleEncryptRequest& from);
  SubtleEncryptRequest(SubtleEncryptRequest&& from) noexcept
    : SubtleEncryptRequest() {
    *this = ::std::move(from);
  }

  inline SubtleEncryptRequest& operator=(const SubtleEncryptRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubtleEncryptRequest& operator=(SubtleEncryptRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubtleEncryptRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubtleEncryptRequest* internal_default_instance() {
    return reinterpret_cast<const SubtleEncryptRequest*>(
               &_SubtleEncryptRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(SubtleEncryptRequest& a, SubtleEncryptRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubtleEncryptRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubtleEncryptRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubtleEncryptRequest* New() const final {
    return CreateMaybeMessage<SubtleEncryptRequest>(nullptr);
  }

  SubtleEncryptRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubtleEncryptRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubtleEncryptRequest& from);
  void MergeFrom(const SubtleEncryptRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubtleEncryptRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SubtleEncryptRequest";
  }
  protected:
  explicit SubtleEncryptRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentNameFieldNumber = 1,
    kPlaintextFieldNumber = 2,
    kAlgorithmFieldNumber = 3,
    kKeyNameFieldNumber = 4,
    kNonceFieldNumber = 5,
    kAssociatedDataFieldNumber = 6,
  };
  // string component_name = 1[json_name = "componentName"];
  void clear_component_name();
  const std::string& component_name() const;
  void set_component_name(const std::string& value);
  void set_component_name(std::string&& value);
  void set_component_name(const char* value);
  void set_component_name(const char* value, size_t size);
  std::string* mutable_component_name();
  std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_component_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_component_name(
      std::string* component_name);
  private:
  const std::string& _internal_component_name() const;
  void _internal_set_component_name(const std::string& value);
  std::string* _internal_mutable_component_name();
  public:

  // bytes plaintext = 2;
  void clear_plaintext();
  const std::string& plaintext() const;
  void set_plaintext(const std::string& value);
  void set_plaintext(std::string&& value);
  void set_plaintext(const char* value);
  void set_plaintext(const void* value, size_t size);
  std::string* mutable_plaintext();
  std::string* release_plaintext();
  void set_allocated_plaintext(std::string* plaintext);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_plaintext();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_plaintext(
      std::string* plaintext);
  private:
  const std::string& _internal_plaintext() const;
  void _internal_set_plaintext(const std::string& value);
  std::string* _internal_mutable_plaintext();
  public:

  // string algorithm = 3;
  void clear_algorithm();
  const std::string& algorithm() const;
  void set_algorithm(const std::string& value);
  void set_algorithm(std::string&& value);
  void set_algorithm(const char* value);
  void set_algorithm(const char* value, size_t size);
  std::string* mutable_algorithm();
  std::string* release_algorithm();
  void set_allocated_algorithm(std::string* algorithm);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_algorithm();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_algorithm(
      std::string* algorithm);
  private:
  const std::string& _internal_algorithm() const;
  void _internal_set_algorithm(const std::string& value);
  std::string* _internal_mutable_algorithm();
  public:

  // string key_name = 4[json_name = "keyName"];
  void clear_key_name();
  const std::string& key_name() const;
  void set_key_name(const std::string& value);
  void set_key_name(std::string&& value);
  void set_key_name(const char* value);
  void set_key_name(const char* value, size_t size);
  std::string* mutable_key_name();
  std::string* release_key_name();
  void set_allocated_key_name(std::string* key_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key_name(
      std::string* key_name);
  private:
  const std::string& _internal_key_name() const;
  void _internal_set_key_name(const std::string& value);
  std::string* _internal_mutable_key_name();
  public:

  // bytes nonce = 5;
  void clear_nonce();
  const std::string& nonce() const;
  void set_nonce(const std::string& value);
  void set_nonce(std::string&& value);
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  std::string* mutable_nonce();
  std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nonce();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nonce(
      std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // bytes associated_data = 6[json_name = "associatedData"];
  void clear_associated_data();
  const std::string& associated_data() const;
  void set_associated_data(const std::string& value);
  void set_associated_data(std::string&& value);
  void set_associated_data(const char* value);
  void set_associated_data(const void* value, size_t size);
  std::string* mutable_associated_data();
  std::string* release_associated_data();
  void set_allocated_associated_data(std::string* associated_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_associated_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_associated_data(
      std::string* associated_data);
  private:
  const std::string& _internal_associated_data() const;
  void _internal_set_associated_data(const std::string& value);
  std::string* _internal_mutable_associated_data();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SubtleEncryptRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintext_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr associated_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SubtleEncryptResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SubtleEncryptResponse) */ {
 public:
  inline SubtleEncryptResponse() : SubtleEncryptResponse(nullptr) {};
  virtual ~SubtleEncryptResponse();

  SubtleEncryptResponse(const SubtleEncryptResponse& from);
  SubtleEncryptResponse(SubtleEncryptResponse&& from) noexcept
    : SubtleEncryptResponse() {
    *this = ::std::move(from);
  }

  inline SubtleEncryptResponse& operator=(const SubtleEncryptResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubtleEncryptResponse& operator=(SubtleEncryptResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubtleEncryptResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubtleEncryptResponse* internal_default_instance() {
    return reinterpret_cast<const SubtleEncryptResponse*>(
               &_SubtleEncryptResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(SubtleEncryptResponse& a, SubtleEncryptResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubtleEncryptResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubtleEncryptResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubtleEncryptResponse* New() const final {
    return CreateMaybeMessage<SubtleEncryptResponse>(nullptr);
  }

  SubtleEncryptResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubtleEncryptResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubtleEncryptResponse& from);
  void MergeFrom(const SubtleEncryptResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubtleEncryptResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SubtleEncryptResponse";
  }
  protected:
  explicit SubtleEncryptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCiphertextFieldNumber = 1,
    kTagFieldNumber = 2,
  };
  // bytes ciphertext = 1;
  void clear_ciphertext();
  const std::string& ciphertext() const;
  void set_ciphertext(const std::string& value);
  void set_ciphertext(std::string&& value);
  void set_ciphertext(const char* value);
  void set_ciphertext(const void* value, size_t size);
  std::string* mutable_ciphertext();
  std::string* release_ciphertext();
  void set_allocated_ciphertext(std::string* ciphertext);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ciphertext();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ciphertext(
      std::string* ciphertext);
  private:
  const std::string& _internal_ciphertext() const;
  void _internal_set_ciphertext(const std::string& value);
  std::string* _internal_mutable_ciphertext();
  public:

  // bytes tag = 2;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const void* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tag(
      std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SubtleEncryptResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ciphertext_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SubtleDecryptRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SubtleDecryptRequest) */ {
 public:
  inline SubtleDecryptRequest() : SubtleDecryptRequest(nullptr) {};
  virtual ~SubtleDecryptRequest();

  SubtleDecryptRequest(const SubtleDecryptRequest& from);
  SubtleDecryptRequest(SubtleDecryptRequest&& from) noexcept
    : SubtleDecryptRequest() {
    *this = ::std::move(from);
  }

  inline SubtleDecryptRequest& operator=(const SubtleDecryptRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubtleDecryptRequest& operator=(SubtleDecryptRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubtleDecryptRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubtleDecryptRequest* internal_default_instance() {
    return reinterpret_cast<const SubtleDecryptRequest*>(
               &_SubtleDecryptRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(SubtleDecryptRequest& a, SubtleDecryptRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubtleDecryptRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubtleDecryptRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubtleDecryptRequest* New() const final {
    return CreateMaybeMessage<SubtleDecryptRequest>(nullptr);
  }

  SubtleDecryptRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubtleDecryptRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubtleDecryptRequest& from);
  void MergeFrom(const SubtleDecryptRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubtleDecryptRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SubtleDecryptRequest";
  }
  protected:
  explicit SubtleDecryptRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentNameFieldNumber = 1,
    kCiphertextFieldNumber = 2,
    kAlgorithmFieldNumber = 3,
    kKeyNameFieldNumber = 4,
    kNonceFieldNumber = 5,
    kTagFieldNumber = 6,
    kAssociatedDataFieldNumber = 7,
  };
  // string component_name = 1[json_name = "componentName"];
  void clear_component_name();
  const std::string& component_name() const;
  void set_component_name(const std::string& value);
  void set_component_name(std::string&& value);
  void set_component_name(const char* value);
  void set_component_name(const char* value, size_t size);
  std::string* mutable_component_name();
  std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_component_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_component_name(
      std::string* component_name);
  private:
  const std::string& _internal_component_name() const;
  void _internal_set_component_name(const std::string& value);
  std::string* _internal_mutable_component_name();
  public:

  // bytes ciphertext = 2;
  void clear_ciphertext();
  const std::string& ciphertext() const;
  void set_ciphertext(const std::string& value);
  void set_ciphertext(std::string&& value);
  void set_ciphertext(const char* value);
  void set_ciphertext(const void* value, size_t size);
  std::string* mutable_ciphertext();
  std::string* release_ciphertext();
  void set_allocated_ciphertext(std::string* ciphertext);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ciphertext();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ciphertext(
      std::string* ciphertext);
  private:
  const std::string& _internal_ciphertext() const;
  void _internal_set_ciphertext(const std::string& value);
  std::string* _internal_mutable_ciphertext();
  public:

  // string algorithm = 3;
  void clear_algorithm();
  const std::string& algorithm() const;
  void set_algorithm(const std::string& value);
  void set_algorithm(std::string&& value);
  void set_algorithm(const char* value);
  void set_algorithm(const char* value, size_t size);
  std::string* mutable_algorithm();
  std::string* release_algorithm();
  void set_allocated_algorithm(std::string* algorithm);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_algorithm();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_algorithm(
      std::string* algorithm);
  private:
  const std::string& _internal_algorithm() const;
  void _internal_set_algorithm(const std::string& value);
  std::string* _internal_mutable_algorithm();
  public:

  // string key_name = 4[json_name = "keyName"];
  void clear_key_name();
  const std::string& key_name() const;
  void set_key_name(const std::string& value);
  void set_key_name(std::string&& value);
  void set_key_name(const char* value);
  void set_key_name(const char* value, size_t size);
  std::string* mutable_key_name();
  std::string* release_key_name();
  void set_allocated_key_name(std::string* key_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key_name(
      std::string* key_name);
  private:
  const std::string& _internal_key_name() const;
  void _internal_set_key_name(const std::string& value);
  std::string* _internal_mutable_key_name();
  public:

  // bytes nonce = 5;
  void clear_nonce();
  const std::string& nonce() const;
  void set_nonce(const std::string& value);
  void set_nonce(std::string&& value);
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  std::string* mutable_nonce();
  std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nonce();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nonce(
      std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // bytes tag = 6;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const void* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tag(
      std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // bytes associated_data = 7[json_name = "associatedData"];
  void clear_associated_data();
  const std::string& associated_data() const;
  void set_associated_data(const std::string& value);
  void set_associated_data(std::string&& value);
  void set_associated_data(const char* value);
  void set_associated_data(const void* value, size_t size);
  std::string* mutable_associated_data();
  std::string* release_associated_data();
  void set_allocated_associated_data(std::string* associated_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_associated_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_associated_data(
      std::string* associated_data);
  private:
  const std::string& _internal_associated_data() const;
  void _internal_set_associated_data(const std::string& value);
  std::string* _internal_mutable_associated_data();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SubtleDecryptRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ciphertext_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr associated_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SubtleDecryptResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SubtleDecryptResponse) */ {
 public:
  inline SubtleDecryptResponse() : SubtleDecryptResponse(nullptr) {};
  virtual ~SubtleDecryptResponse();

  SubtleDecryptResponse(const SubtleDecryptResponse& from);
  SubtleDecryptResponse(SubtleDecryptResponse&& from) noexcept
    : SubtleDecryptResponse() {
    *this = ::std::move(from);
  }

  inline SubtleDecryptResponse& operator=(const SubtleDecryptResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubtleDecryptResponse& operator=(SubtleDecryptResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubtleDecryptResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubtleDecryptResponse* internal_default_instance() {
    return reinterpret_cast<const SubtleDecryptResponse*>(
               &_SubtleDecryptResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(SubtleDecryptResponse& a, SubtleDecryptResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubtleDecryptResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubtleDecryptResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubtleDecryptResponse* New() const final {
    return CreateMaybeMessage<SubtleDecryptResponse>(nullptr);
  }

  SubtleDecryptResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubtleDecryptResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubtleDecryptResponse& from);
  void MergeFrom(const SubtleDecryptResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubtleDecryptResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SubtleDecryptResponse";
  }
  protected:
  explicit SubtleDecryptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaintextFieldNumber = 1,
  };
  // bytes plaintext = 1;
  void clear_plaintext();
  const std::string& plaintext() const;
  void set_plaintext(const std::string& value);
  void set_plaintext(std::string&& value);
  void set_plaintext(const char* value);
  void set_plaintext(const void* value, size_t size);
  std::string* mutable_plaintext();
  std::string* release_plaintext();
  void set_allocated_plaintext(std::string* plaintext);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_plaintext();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_plaintext(
      std::string* plaintext);
  private:
  const std::string& _internal_plaintext() const;
  void _internal_set_plaintext(const std::string& value);
  std::string* _internal_mutable_plaintext();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SubtleDecryptResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintext_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SubtleWrapKeyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SubtleWrapKeyRequest) */ {
 public:
  inline SubtleWrapKeyRequest() : SubtleWrapKeyRequest(nullptr) {};
  virtual ~SubtleWrapKeyRequest();

  SubtleWrapKeyRequest(const SubtleWrapKeyRequest& from);
  SubtleWrapKeyRequest(SubtleWrapKeyRequest&& from) noexcept
    : SubtleWrapKeyRequest() {
    *this = ::std::move(from);
  }

  inline SubtleWrapKeyRequest& operator=(const SubtleWrapKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubtleWrapKeyRequest& operator=(SubtleWrapKeyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubtleWrapKeyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubtleWrapKeyRequest* internal_default_instance() {
    return reinterpret_cast<const SubtleWrapKeyRequest*>(
               &_SubtleWrapKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(SubtleWrapKeyRequest& a, SubtleWrapKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubtleWrapKeyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubtleWrapKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubtleWrapKeyRequest* New() const final {
    return CreateMaybeMessage<SubtleWrapKeyRequest>(nullptr);
  }

  SubtleWrapKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubtleWrapKeyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubtleWrapKeyRequest& from);
  void MergeFrom(const SubtleWrapKeyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubtleWrapKeyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SubtleWrapKeyRequest";
  }
  protected:
  explicit SubtleWrapKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentNameFieldNumber = 1,
    kPlaintextKeyFieldNumber = 2,
    kAlgorithmFieldNumber = 3,
    kKeyNameFieldNumber = 4,
    kNonceFieldNumber = 5,
    kAssociatedDataFieldNumber = 6,
  };
  // string component_name = 1[json_name = "componentName"];
  void clear_component_name();
  const std::string& component_name() const;
  void set_component_name(const std::string& value);
  void set_component_name(std::string&& value);
  void set_component_name(const char* value);
  void set_component_name(const char* value, size_t size);
  std::string* mutable_component_name();
  std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_component_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_component_name(
      std::string* component_name);
  private:
  const std::string& _internal_component_name() const;
  void _internal_set_component_name(const std::string& value);
  std::string* _internal_mutable_component_name();
  public:

  // bytes plaintext_key = 2[json_name = "plaintextKey"];
  void clear_plaintext_key();
  const std::string& plaintext_key() const;
  void set_plaintext_key(const std::string& value);
  void set_plaintext_key(std::string&& value);
  void set_plaintext_key(const char* value);
  void set_plaintext_key(const void* value, size_t size);
  std::string* mutable_plaintext_key();
  std::string* release_plaintext_key();
  void set_allocated_plaintext_key(std::string* plaintext_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_plaintext_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_plaintext_key(
      std::string* plaintext_key);
  private:
  const std::string& _internal_plaintext_key() const;
  void _internal_set_plaintext_key(const std::string& value);
  std::string* _internal_mutable_plaintext_key();
  public:

  // string algorithm = 3;
  void clear_algorithm();
  const std::string& algorithm() const;
  void set_algorithm(const std::string& value);
  void set_algorithm(std::string&& value);
  void set_algorithm(const char* value);
  void set_algorithm(const char* value, size_t size);
  std::string* mutable_algorithm();
  std::string* release_algorithm();
  void set_allocated_algorithm(std::string* algorithm);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_algorithm();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_algorithm(
      std::string* algorithm);
  private:
  const std::string& _internal_algorithm() const;
  void _internal_set_algorithm(const std::string& value);
  std::string* _internal_mutable_algorithm();
  public:

  // string key_name = 4[json_name = "keyName"];
  void clear_key_name();
  const std::string& key_name() const;
  void set_key_name(const std::string& value);
  void set_key_name(std::string&& value);
  void set_key_name(const char* value);
  void set_key_name(const char* value, size_t size);
  std::string* mutable_key_name();
  std::string* release_key_name();
  void set_allocated_key_name(std::string* key_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key_name(
      std::string* key_name);
  private:
  const std::string& _internal_key_name() const;
  void _internal_set_key_name(const std::string& value);
  std::string* _internal_mutable_key_name();
  public:

  // bytes nonce = 5;
  void clear_nonce();
  const std::string& nonce() const;
  void set_nonce(const std::string& value);
  void set_nonce(std::string&& value);
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  std::string* mutable_nonce();
  std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nonce();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nonce(
      std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // bytes associated_data = 6[json_name = "associatedData"];
  void clear_associated_data();
  const std::string& associated_data() const;
  void set_associated_data(const std::string& value);
  void set_associated_data(std::string&& value);
  void set_associated_data(const char* value);
  void set_associated_data(const void* value, size_t size);
  std::string* mutable_associated_data();
  std::string* release_associated_data();
  void set_allocated_associated_data(std::string* associated_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_associated_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_associated_data(
      std::string* associated_data);
  private:
  const std::string& _internal_associated_data() const;
  void _internal_set_associated_data(const std::string& value);
  std::string* _internal_mutable_associated_data();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SubtleWrapKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintext_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr associated_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SubtleWrapKeyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SubtleWrapKeyResponse) */ {
 public:
  inline SubtleWrapKeyResponse() : SubtleWrapKeyResponse(nullptr) {};
  virtual ~SubtleWrapKeyResponse();

  SubtleWrapKeyResponse(const SubtleWrapKeyResponse& from);
  SubtleWrapKeyResponse(SubtleWrapKeyResponse&& from) noexcept
    : SubtleWrapKeyResponse() {
    *this = ::std::move(from);
  }

  inline SubtleWrapKeyResponse& operator=(const SubtleWrapKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubtleWrapKeyResponse& operator=(SubtleWrapKeyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubtleWrapKeyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubtleWrapKeyResponse* internal_default_instance() {
    return reinterpret_cast<const SubtleWrapKeyResponse*>(
               &_SubtleWrapKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(SubtleWrapKeyResponse& a, SubtleWrapKeyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubtleWrapKeyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubtleWrapKeyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubtleWrapKeyResponse* New() const final {
    return CreateMaybeMessage<SubtleWrapKeyResponse>(nullptr);
  }

  SubtleWrapKeyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubtleWrapKeyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubtleWrapKeyResponse& from);
  void MergeFrom(const SubtleWrapKeyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubtleWrapKeyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SubtleWrapKeyResponse";
  }
  protected:
  explicit SubtleWrapKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWrappedKeyFieldNumber = 1,
    kTagFieldNumber = 2,
  };
  // bytes wrapped_key = 1[json_name = "wrappedKey"];
  void clear_wrapped_key();
  const std::string& wrapped_key() const;
  void set_wrapped_key(const std::string& value);
  void set_wrapped_key(std::string&& value);
  void set_wrapped_key(const char* value);
  void set_wrapped_key(const void* value, size_t size);
  std::string* mutable_wrapped_key();
  std::string* release_wrapped_key();
  void set_allocated_wrapped_key(std::string* wrapped_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_wrapped_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_wrapped_key(
      std::string* wrapped_key);
  private:
  const std::string& _internal_wrapped_key() const;
  void _internal_set_wrapped_key(const std::string& value);
  std::string* _internal_mutable_wrapped_key();
  public:

  // bytes tag = 2;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const void* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tag(
      std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SubtleWrapKeyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wrapped_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SubtleUnwrapKeyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest) */ {
 public:
  inline SubtleUnwrapKeyRequest() : SubtleUnwrapKeyRequest(nullptr) {};
  virtual ~SubtleUnwrapKeyRequest();

  SubtleUnwrapKeyRequest(const SubtleUnwrapKeyRequest& from);
  SubtleUnwrapKeyRequest(SubtleUnwrapKeyRequest&& from) noexcept
    : SubtleUnwrapKeyRequest() {
    *this = ::std::move(from);
  }

  inline SubtleUnwrapKeyRequest& operator=(const SubtleUnwrapKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubtleUnwrapKeyRequest& operator=(SubtleUnwrapKeyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubtleUnwrapKeyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubtleUnwrapKeyRequest* internal_default_instance() {
    return reinterpret_cast<const SubtleUnwrapKeyRequest*>(
               &_SubtleUnwrapKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(SubtleUnwrapKeyRequest& a, SubtleUnwrapKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubtleUnwrapKeyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubtleUnwrapKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubtleUnwrapKeyRequest* New() const final {
    return CreateMaybeMessage<SubtleUnwrapKeyRequest>(nullptr);
  }

  SubtleUnwrapKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubtleUnwrapKeyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubtleUnwrapKeyRequest& from);
  void MergeFrom(const SubtleUnwrapKeyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubtleUnwrapKeyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SubtleUnwrapKeyRequest";
  }
  protected:
  explicit SubtleUnwrapKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentNameFieldNumber = 1,
    kWrappedKeyFieldNumber = 2,
    kAlgorithmFieldNumber = 3,
    kKeyNameFieldNumber = 4,
    kNonceFieldNumber = 5,
    kTagFieldNumber = 6,
    kAssociatedDataFieldNumber = 7,
  };
  // string component_name = 1[json_name = "componentName"];
  void clear_component_name();
  const std::string& component_name() const;
  void set_component_name(const std::string& value);
  void set_component_name(std::string&& value);
  void set_component_name(const char* value);
  void set_component_name(const char* value, size_t size);
  std::string* mutable_component_name();
  std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_component_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_component_name(
      std::string* component_name);
  private:
  const std::string& _internal_component_name() const;
  void _internal_set_component_name(const std::string& value);
  std::string* _internal_mutable_component_name();
  public:

  // bytes wrapped_key = 2[json_name = "wrappedKey"];
  void clear_wrapped_key();
  const std::string& wrapped_key() const;
  void set_wrapped_key(const std::string& value);
  void set_wrapped_key(std::string&& value);
  void set_wrapped_key(const char* value);
  void set_wrapped_key(const void* value, size_t size);
  std::string* mutable_wrapped_key();
  std::string* release_wrapped_key();
  void set_allocated_wrapped_key(std::string* wrapped_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_wrapped_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_wrapped_key(
      std::string* wrapped_key);
  private:
  const std::string& _internal_wrapped_key() const;
  void _internal_set_wrapped_key(const std::string& value);
  std::string* _internal_mutable_wrapped_key();
  public:

  // string algorithm = 3;
  void clear_algorithm();
  const std::string& algorithm() const;
  void set_algorithm(const std::string& value);
  void set_algorithm(std::string&& value);
  void set_algorithm(const char* value);
  void set_algorithm(const char* value, size_t size);
  std::string* mutable_algorithm();
  std::string* release_algorithm();
  void set_allocated_algorithm(std::string* algorithm);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_algorithm();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_algorithm(
      std::string* algorithm);
  private:
  const std::string& _internal_algorithm() const;
  void _internal_set_algorithm(const std::string& value);
  std::string* _internal_mutable_algorithm();
  public:

  // string key_name = 4[json_name = "keyName"];
  void clear_key_name();
  const std::string& key_name() const;
  void set_key_name(const std::string& value);
  void set_key_name(std::string&& value);
  void set_key_name(const char* value);
  void set_key_name(const char* value, size_t size);
  std::string* mutable_key_name();
  std::string* release_key_name();
  void set_allocated_key_name(std::string* key_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key_name(
      std::string* key_name);
  private:
  const std::string& _internal_key_name() const;
  void _internal_set_key_name(const std::string& value);
  std::string* _internal_mutable_key_name();
  public:

  // bytes nonce = 5;
  void clear_nonce();
  const std::string& nonce() const;
  void set_nonce(const std::string& value);
  void set_nonce(std::string&& value);
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  std::string* mutable_nonce();
  std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nonce();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nonce(
      std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // bytes tag = 6;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const void* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tag(
      std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // bytes associated_data = 7[json_name = "associatedData"];
  void clear_associated_data();
  const std::string& associated_data() const;
  void set_associated_data(const std::string& value);
  void set_associated_data(std::string&& value);
  void set_associated_data(const char* value);
  void set_associated_data(const void* value, size_t size);
  std::string* mutable_associated_data();
  std::string* release_associated_data();
  void set_allocated_associated_data(std::string* associated_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_associated_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_associated_data(
      std::string* associated_data);
  private:
  const std::string& _internal_associated_data() const;
  void _internal_set_associated_data(const std::string& value);
  std::string* _internal_mutable_associated_data();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wrapped_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr associated_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SubtleUnwrapKeyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SubtleUnwrapKeyResponse) */ {
 public:
  inline SubtleUnwrapKeyResponse() : SubtleUnwrapKeyResponse(nullptr) {};
  virtual ~SubtleUnwrapKeyResponse();

  SubtleUnwrapKeyResponse(const SubtleUnwrapKeyResponse& from);
  SubtleUnwrapKeyResponse(SubtleUnwrapKeyResponse&& from) noexcept
    : SubtleUnwrapKeyResponse() {
    *this = ::std::move(from);
  }

  inline SubtleUnwrapKeyResponse& operator=(const SubtleUnwrapKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubtleUnwrapKeyResponse& operator=(SubtleUnwrapKeyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubtleUnwrapKeyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubtleUnwrapKeyResponse* internal_default_instance() {
    return reinterpret_cast<const SubtleUnwrapKeyResponse*>(
               &_SubtleUnwrapKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(SubtleUnwrapKeyResponse& a, SubtleUnwrapKeyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubtleUnwrapKeyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubtleUnwrapKeyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubtleUnwrapKeyResponse* New() const final {
    return CreateMaybeMessage<SubtleUnwrapKeyResponse>(nullptr);
  }

  SubtleUnwrapKeyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubtleUnwrapKeyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubtleUnwrapKeyResponse& from);
  void MergeFrom(const SubtleUnwrapKeyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubtleUnwrapKeyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SubtleUnwrapKeyResponse";
  }
  protected:
  explicit SubtleUnwrapKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaintextKeyFieldNumber = 1,
  };
  // bytes plaintext_key = 1[json_name = "plaintextKey"];
  void clear_plaintext_key();
  const std::string& plaintext_key() const;
  void set_plaintext_key(const std::string& value);
  void set_plaintext_key(std::string&& value);
  void set_plaintext_key(const char* value);
  void set_plaintext_key(const void* value, size_t size);
  std::string* mutable_plaintext_key();
  std::string* release_plaintext_key();
  void set_allocated_plaintext_key(std::string* plaintext_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_plaintext_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_plaintext_key(
      std::string* plaintext_key);
  private:
  const std::string& _internal_plaintext_key() const;
  void _internal_set_plaintext_key(const std::string& value);
  std::string* _internal_mutable_plaintext_key();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SubtleUnwrapKeyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintext_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SubtleSignRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SubtleSignRequest) */ {
 public:
  inline SubtleSignRequest() : SubtleSignRequest(nullptr) {};
  virtual ~SubtleSignRequest();

  SubtleSignRequest(const SubtleSignRequest& from);
  SubtleSignRequest(SubtleSignRequest&& from) noexcept
    : SubtleSignRequest() {
    *this = ::std::move(from);
  }

  inline SubtleSignRequest& operator=(const SubtleSignRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubtleSignRequest& operator=(SubtleSignRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubtleSignRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubtleSignRequest* internal_default_instance() {
    return reinterpret_cast<const SubtleSignRequest*>(
               &_SubtleSignRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(SubtleSignRequest& a, SubtleSignRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubtleSignRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubtleSignRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubtleSignRequest* New() const final {
    return CreateMaybeMessage<SubtleSignRequest>(nullptr);
  }

  SubtleSignRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubtleSignRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubtleSignRequest& from);
  void MergeFrom(const SubtleSignRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubtleSignRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SubtleSignRequest";
  }
  protected:
  explicit SubtleSignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentNameFieldNumber = 1,
    kDigestFieldNumber = 2,
    kAlgorithmFieldNumber = 3,
    kKeyNameFieldNumber = 4,
  };
  // string component_name = 1[json_name = "componentName"];
  void clear_component_name();
  const std::string& component_name() const;
  void set_component_name(const std::string& value);
  void set_component_name(std::string&& value);
  void set_component_name(const char* value);
  void set_component_name(const char* value, size_t size);
  std::string* mutable_component_name();
  std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_component_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_component_name(
      std::string* component_name);
  private:
  const std::string& _internal_component_name() const;
  void _internal_set_component_name(const std::string& value);
  std::string* _internal_mutable_component_name();
  public:

  // bytes digest = 2;
  void clear_digest();
  const std::string& digest() const;
  void set_digest(const std::string& value);
  void set_digest(std::string&& value);
  void set_digest(const char* value);
  void set_digest(const void* value, size_t size);
  std::string* mutable_digest();
  std::string* release_digest();
  void set_allocated_digest(std::string* digest);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_digest();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_digest(
      std::string* digest);
  private:
  const std::string& _internal_digest() const;
  void _internal_set_digest(const std::string& value);
  std::string* _internal_mutable_digest();
  public:

  // string algorithm = 3;
  void clear_algorithm();
  const std::string& algorithm() const;
  void set_algorithm(const std::string& value);
  void set_algorithm(std::string&& value);
  void set_algorithm(const char* value);
  void set_algorithm(const char* value, size_t size);
  std::string* mutable_algorithm();
  std::string* release_algorithm();
  void set_allocated_algorithm(std::string* algorithm);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_algorithm();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_algorithm(
      std::string* algorithm);
  private:
  const std::string& _internal_algorithm() const;
  void _internal_set_algorithm(const std::string& value);
  std::string* _internal_mutable_algorithm();
  public:

  // string key_name = 4[json_name = "keyName"];
  void clear_key_name();
  const std::string& key_name() const;
  void set_key_name(const std::string& value);
  void set_key_name(std::string&& value);
  void set_key_name(const char* value);
  void set_key_name(const char* value, size_t size);
  std::string* mutable_key_name();
  std::string* release_key_name();
  void set_allocated_key_name(std::string* key_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key_name(
      std::string* key_name);
  private:
  const std::string& _internal_key_name() const;
  void _internal_set_key_name(const std::string& value);
  std::string* _internal_mutable_key_name();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SubtleSignRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SubtleSignResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SubtleSignResponse) */ {
 public:
  inline SubtleSignResponse() : SubtleSignResponse(nullptr) {};
  virtual ~SubtleSignResponse();

  SubtleSignResponse(const SubtleSignResponse& from);
  SubtleSignResponse(SubtleSignResponse&& from) noexcept
    : SubtleSignResponse() {
    *this = ::std::move(from);
  }

  inline SubtleSignResponse& operator=(const SubtleSignResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubtleSignResponse& operator=(SubtleSignResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubtleSignResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubtleSignResponse* internal_default_instance() {
    return reinterpret_cast<const SubtleSignResponse*>(
               &_SubtleSignResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(SubtleSignResponse& a, SubtleSignResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubtleSignResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubtleSignResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubtleSignResponse* New() const final {
    return CreateMaybeMessage<SubtleSignResponse>(nullptr);
  }

  SubtleSignResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubtleSignResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubtleSignResponse& from);
  void MergeFrom(const SubtleSignResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubtleSignResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SubtleSignResponse";
  }
  protected:
  explicit SubtleSignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
  };
  // bytes signature = 1;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_signature();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signature(
      std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SubtleSignResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SubtleVerifyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SubtleVerifyRequest) */ {
 public:
  inline SubtleVerifyRequest() : SubtleVerifyRequest(nullptr) {};
  virtual ~SubtleVerifyRequest();

  SubtleVerifyRequest(const SubtleVerifyRequest& from);
  SubtleVerifyRequest(SubtleVerifyRequest&& from) noexcept
    : SubtleVerifyRequest() {
    *this = ::std::move(from);
  }

  inline SubtleVerifyRequest& operator=(const SubtleVerifyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubtleVerifyRequest& operator=(SubtleVerifyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubtleVerifyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubtleVerifyRequest* internal_default_instance() {
    return reinterpret_cast<const SubtleVerifyRequest*>(
               &_SubtleVerifyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(SubtleVerifyRequest& a, SubtleVerifyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubtleVerifyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubtleVerifyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubtleVerifyRequest* New() const final {
    return CreateMaybeMessage<SubtleVerifyRequest>(nullptr);
  }

  SubtleVerifyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubtleVerifyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubtleVerifyRequest& from);
  void MergeFrom(const SubtleVerifyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubtleVerifyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SubtleVerifyRequest";
  }
  protected:
  explicit SubtleVerifyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentNameFieldNumber = 1,
    kDigestFieldNumber = 2,
    kAlgorithmFieldNumber = 3,
    kKeyNameFieldNumber = 4,
    kSignatureFieldNumber = 5,
  };
  // string component_name = 1[json_name = "componentName"];
  void clear_component_name();
  const std::string& component_name() const;
  void set_component_name(const std::string& value);
  void set_component_name(std::string&& value);
  void set_component_name(const char* value);
  void set_component_name(const char* value, size_t size);
  std::string* mutable_component_name();
  std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_component_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_component_name(
      std::string* component_name);
  private:
  const std::string& _internal_component_name() const;
  void _internal_set_component_name(const std::string& value);
  std::string* _internal_mutable_component_name();
  public:

  // bytes digest = 2;
  void clear_digest();
  const std::string& digest() const;
  void set_digest(const std::string& value);
  void set_digest(std::string&& value);
  void set_digest(const char* value);
  void set_digest(const void* value, size_t size);
  std::string* mutable_digest();
  std::string* release_digest();
  void set_allocated_digest(std::string* digest);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_digest();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_digest(
      std::string* digest);
  private:
  const std::string& _internal_digest() const;
  void _internal_set_digest(const std::string& value);
  std::string* _internal_mutable_digest();
  public:

  // string algorithm = 3;
  void clear_algorithm();
  const std::string& algorithm() const;
  void set_algorithm(const std::string& value);
  void set_algorithm(std::string&& value);
  void set_algorithm(const char* value);
  void set_algorithm(const char* value, size_t size);
  std::string* mutable_algorithm();
  std::string* release_algorithm();
  void set_allocated_algorithm(std::string* algorithm);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_algorithm();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_algorithm(
      std::string* algorithm);
  private:
  const std::string& _internal_algorithm() const;
  void _internal_set_algorithm(const std::string& value);
  std::string* _internal_mutable_algorithm();
  public:

  // string key_name = 4[json_name = "keyName"];
  void clear_key_name();
  const std::string& key_name() const;
  void set_key_name(const std::string& value);
  void set_key_name(std::string&& value);
  void set_key_name(const char* value);
  void set_key_name(const char* value, size_t size);
  std::string* mutable_key_name();
  std::string* release_key_name();
  void set_allocated_key_name(std::string* key_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key_name(
      std::string* key_name);
  private:
  const std::string& _internal_key_name() const;
  void _internal_set_key_name(const std::string& value);
  std::string* _internal_mutable_key_name();
  public:

  // bytes signature = 5;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_signature();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signature(
      std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SubtleVerifyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class SubtleVerifyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.SubtleVerifyResponse) */ {
 public:
  inline SubtleVerifyResponse() : SubtleVerifyResponse(nullptr) {};
  virtual ~SubtleVerifyResponse();

  SubtleVerifyResponse(const SubtleVerifyResponse& from);
  SubtleVerifyResponse(SubtleVerifyResponse&& from) noexcept
    : SubtleVerifyResponse() {
    *this = ::std::move(from);
  }

  inline SubtleVerifyResponse& operator=(const SubtleVerifyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubtleVerifyResponse& operator=(SubtleVerifyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubtleVerifyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubtleVerifyResponse* internal_default_instance() {
    return reinterpret_cast<const SubtleVerifyResponse*>(
               &_SubtleVerifyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(SubtleVerifyResponse& a, SubtleVerifyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubtleVerifyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubtleVerifyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubtleVerifyResponse* New() const final {
    return CreateMaybeMessage<SubtleVerifyResponse>(nullptr);
  }

  SubtleVerifyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubtleVerifyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubtleVerifyResponse& from);
  void MergeFrom(const SubtleVerifyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubtleVerifyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.SubtleVerifyResponse";
  }
  protected:
  explicit SubtleVerifyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidFieldNumber = 1,
  };
  // bool valid = 1;
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);
  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.SubtleVerifyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool valid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class EncryptRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.EncryptRequest) */ {
 public:
  inline EncryptRequest() : EncryptRequest(nullptr) {};
  virtual ~EncryptRequest();

  EncryptRequest(const EncryptRequest& from);
  EncryptRequest(EncryptRequest&& from) noexcept
    : EncryptRequest() {
    *this = ::std::move(from);
  }

  inline EncryptRequest& operator=(const EncryptRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptRequest& operator=(EncryptRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EncryptRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncryptRequest* internal_default_instance() {
    return reinterpret_cast<const EncryptRequest*>(
               &_EncryptRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(EncryptRequest& a, EncryptRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncryptRequest* New() const final {
    return CreateMaybeMessage<EncryptRequest>(nullptr);
  }

  EncryptRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncryptRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EncryptRequest& from);
  void MergeFrom(const EncryptRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.EncryptRequest";
  }
  protected:
  explicit EncryptRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // .dapr.proto.runtime.v1.EncryptRequestOptions options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::dapr::proto::runtime::v1::EncryptRequestOptions& options() const;
  ::dapr::proto::runtime::v1::EncryptRequestOptions* release_options();
  ::dapr::proto::runtime::v1::EncryptRequestOptions* mutable_options();
  void set_allocated_options(::dapr::proto::runtime::v1::EncryptRequestOptions* options);
  private:
  const ::dapr::proto::runtime::v1::EncryptRequestOptions& _internal_options() const;
  ::dapr::proto::runtime::v1::EncryptRequestOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::dapr::proto::runtime::v1::EncryptRequestOptions* options);
  ::dapr::proto::runtime::v1::EncryptRequestOptions* unsafe_arena_release_options();

  // .dapr.proto.common.v1.StreamPayload payload = 2;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::dapr::proto::common::v1::StreamPayload& payload() const;
  ::dapr::proto::common::v1::StreamPayload* release_payload();
  ::dapr::proto::common::v1::StreamPayload* mutable_payload();
  void set_allocated_payload(::dapr::proto::common::v1::StreamPayload* payload);
  private:
  const ::dapr::proto::common::v1::StreamPayload& _internal_payload() const;
  ::dapr::proto::common::v1::StreamPayload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::dapr::proto::common::v1::StreamPayload* payload);
  ::dapr::proto::common::v1::StreamPayload* unsafe_arena_release_payload();

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.EncryptRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::dapr::proto::runtime::v1::EncryptRequestOptions* options_;
  ::dapr::proto::common::v1::StreamPayload* payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class EncryptRequestOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.EncryptRequestOptions) */ {
 public:
  inline EncryptRequestOptions() : EncryptRequestOptions(nullptr) {};
  virtual ~EncryptRequestOptions();

  EncryptRequestOptions(const EncryptRequestOptions& from);
  EncryptRequestOptions(EncryptRequestOptions&& from) noexcept
    : EncryptRequestOptions() {
    *this = ::std::move(from);
  }

  inline EncryptRequestOptions& operator=(const EncryptRequestOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptRequestOptions& operator=(EncryptRequestOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EncryptRequestOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncryptRequestOptions* internal_default_instance() {
    return reinterpret_cast<const EncryptRequestOptions*>(
               &_EncryptRequestOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(EncryptRequestOptions& a, EncryptRequestOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptRequestOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptRequestOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncryptRequestOptions* New() const final {
    return CreateMaybeMessage<EncryptRequestOptions>(nullptr);
  }

  EncryptRequestOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncryptRequestOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EncryptRequestOptions& from);
  void MergeFrom(const EncryptRequestOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptRequestOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.EncryptRequestOptions";
  }
  protected:
  explicit EncryptRequestOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentNameFieldNumber = 1,
    kKeyNameFieldNumber = 2,
    kKeyWrapAlgorithmFieldNumber = 3,
    kDataEncryptionCipherFieldNumber = 10,
    kDecryptionKeyNameFieldNumber = 12,
    kOmitDecryptionKeyNameFieldNumber = 11,
  };
  // string component_name = 1[json_name = "componentName"];
  void clear_component_name();
  const std::string& component_name() const;
  void set_component_name(const std::string& value);
  void set_component_name(std::string&& value);
  void set_component_name(const char* value);
  void set_component_name(const char* value, size_t size);
  std::string* mutable_component_name();
  std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_component_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_component_name(
      std::string* component_name);
  private:
  const std::string& _internal_component_name() const;
  void _internal_set_component_name(const std::string& value);
  std::string* _internal_mutable_component_name();
  public:

  // string key_name = 2[json_name = "keyName"];
  void clear_key_name();
  const std::string& key_name() const;
  void set_key_name(const std::string& value);
  void set_key_name(std::string&& value);
  void set_key_name(const char* value);
  void set_key_name(const char* value, size_t size);
  std::string* mutable_key_name();
  std::string* release_key_name();
  void set_allocated_key_name(std::string* key_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key_name(
      std::string* key_name);
  private:
  const std::string& _internal_key_name() const;
  void _internal_set_key_name(const std::string& value);
  std::string* _internal_mutable_key_name();
  public:

  // string key_wrap_algorithm = 3;
  void clear_key_wrap_algorithm();
  const std::string& key_wrap_algorithm() const;
  void set_key_wrap_algorithm(const std::string& value);
  void set_key_wrap_algorithm(std::string&& value);
  void set_key_wrap_algorithm(const char* value);
  void set_key_wrap_algorithm(const char* value, size_t size);
  std::string* mutable_key_wrap_algorithm();
  std::string* release_key_wrap_algorithm();
  void set_allocated_key_wrap_algorithm(std::string* key_wrap_algorithm);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key_wrap_algorithm();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key_wrap_algorithm(
      std::string* key_wrap_algorithm);
  private:
  const std::string& _internal_key_wrap_algorithm() const;
  void _internal_set_key_wrap_algorithm(const std::string& value);
  std::string* _internal_mutable_key_wrap_algorithm();
  public:

  // string data_encryption_cipher = 10;
  void clear_data_encryption_cipher();
  const std::string& data_encryption_cipher() const;
  void set_data_encryption_cipher(const std::string& value);
  void set_data_encryption_cipher(std::string&& value);
  void set_data_encryption_cipher(const char* value);
  void set_data_encryption_cipher(const char* value, size_t size);
  std::string* mutable_data_encryption_cipher();
  std::string* release_data_encryption_cipher();
  void set_allocated_data_encryption_cipher(std::string* data_encryption_cipher);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data_encryption_cipher();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data_encryption_cipher(
      std::string* data_encryption_cipher);
  private:
  const std::string& _internal_data_encryption_cipher() const;
  void _internal_set_data_encryption_cipher(const std::string& value);
  std::string* _internal_mutable_data_encryption_cipher();
  public:

  // string decryption_key_name = 12[json_name = "decryptionKeyName"];
  void clear_decryption_key_name();
  const std::string& decryption_key_name() const;
  void set_decryption_key_name(const std::string& value);
  void set_decryption_key_name(std::string&& value);
  void set_decryption_key_name(const char* value);
  void set_decryption_key_name(const char* value, size_t size);
  std::string* mutable_decryption_key_name();
  std::string* release_decryption_key_name();
  void set_allocated_decryption_key_name(std::string* decryption_key_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_decryption_key_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_decryption_key_name(
      std::string* decryption_key_name);
  private:
  const std::string& _internal_decryption_key_name() const;
  void _internal_set_decryption_key_name(const std::string& value);
  std::string* _internal_mutable_decryption_key_name();
  public:

  // bool omit_decryption_key_name = 11[json_name = "omitDecryptionKeyName"];
  void clear_omit_decryption_key_name();
  bool omit_decryption_key_name() const;
  void set_omit_decryption_key_name(bool value);
  private:
  bool _internal_omit_decryption_key_name() const;
  void _internal_set_omit_decryption_key_name(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.EncryptRequestOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_wrap_algorithm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_encryption_cipher_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decryption_key_name_;
  bool omit_decryption_key_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class EncryptResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.EncryptResponse) */ {
 public:
  inline EncryptResponse() : EncryptResponse(nullptr) {};
  virtual ~EncryptResponse();

  EncryptResponse(const EncryptResponse& from);
  EncryptResponse(EncryptResponse&& from) noexcept
    : EncryptResponse() {
    *this = ::std::move(from);
  }

  inline EncryptResponse& operator=(const EncryptResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptResponse& operator=(EncryptResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EncryptResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncryptResponse* internal_default_instance() {
    return reinterpret_cast<const EncryptResponse*>(
               &_EncryptResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(EncryptResponse& a, EncryptResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncryptResponse* New() const final {
    return CreateMaybeMessage<EncryptResponse>(nullptr);
  }

  EncryptResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncryptResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EncryptResponse& from);
  void MergeFrom(const EncryptResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.EncryptResponse";
  }
  protected:
  explicit EncryptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
  };
  // .dapr.proto.common.v1.StreamPayload payload = 1;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::dapr::proto::common::v1::StreamPayload& payload() const;
  ::dapr::proto::common::v1::StreamPayload* release_payload();
  ::dapr::proto::common::v1::StreamPayload* mutable_payload();
  void set_allocated_payload(::dapr::proto::common::v1::StreamPayload* payload);
  private:
  const ::dapr::proto::common::v1::StreamPayload& _internal_payload() const;
  ::dapr::proto::common::v1::StreamPayload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::dapr::proto::common::v1::StreamPayload* payload);
  ::dapr::proto::common::v1::StreamPayload* unsafe_arena_release_payload();

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.EncryptResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::dapr::proto::common::v1::StreamPayload* payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class DecryptRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.DecryptRequest) */ {
 public:
  inline DecryptRequest() : DecryptRequest(nullptr) {};
  virtual ~DecryptRequest();

  DecryptRequest(const DecryptRequest& from);
  DecryptRequest(DecryptRequest&& from) noexcept
    : DecryptRequest() {
    *this = ::std::move(from);
  }

  inline DecryptRequest& operator=(const DecryptRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecryptRequest& operator=(DecryptRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DecryptRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DecryptRequest* internal_default_instance() {
    return reinterpret_cast<const DecryptRequest*>(
               &_DecryptRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(DecryptRequest& a, DecryptRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DecryptRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecryptRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DecryptRequest* New() const final {
    return CreateMaybeMessage<DecryptRequest>(nullptr);
  }

  DecryptRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DecryptRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DecryptRequest& from);
  void MergeFrom(const DecryptRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecryptRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.DecryptRequest";
  }
  protected:
  explicit DecryptRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // .dapr.proto.runtime.v1.DecryptRequestOptions options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::dapr::proto::runtime::v1::DecryptRequestOptions& options() const;
  ::dapr::proto::runtime::v1::DecryptRequestOptions* release_options();
  ::dapr::proto::runtime::v1::DecryptRequestOptions* mutable_options();
  void set_allocated_options(::dapr::proto::runtime::v1::DecryptRequestOptions* options);
  private:
  const ::dapr::proto::runtime::v1::DecryptRequestOptions& _internal_options() const;
  ::dapr::proto::runtime::v1::DecryptRequestOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::dapr::proto::runtime::v1::DecryptRequestOptions* options);
  ::dapr::proto::runtime::v1::DecryptRequestOptions* unsafe_arena_release_options();

  // .dapr.proto.common.v1.StreamPayload payload = 2;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::dapr::proto::common::v1::StreamPayload& payload() const;
  ::dapr::proto::common::v1::StreamPayload* release_payload();
  ::dapr::proto::common::v1::StreamPayload* mutable_payload();
  void set_allocated_payload(::dapr::proto::common::v1::StreamPayload* payload);
  private:
  const ::dapr::proto::common::v1::StreamPayload& _internal_payload() const;
  ::dapr::proto::common::v1::StreamPayload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::dapr::proto::common::v1::StreamPayload* payload);
  ::dapr::proto::common::v1::StreamPayload* unsafe_arena_release_payload();

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.DecryptRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::dapr::proto::runtime::v1::DecryptRequestOptions* options_;
  ::dapr::proto::common::v1::StreamPayload* payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class DecryptRequestOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.DecryptRequestOptions) */ {
 public:
  inline DecryptRequestOptions() : DecryptRequestOptions(nullptr) {};
  virtual ~DecryptRequestOptions();

  DecryptRequestOptions(const DecryptRequestOptions& from);
  DecryptRequestOptions(DecryptRequestOptions&& from) noexcept
    : DecryptRequestOptions() {
    *this = ::std::move(from);
  }

  inline DecryptRequestOptions& operator=(const DecryptRequestOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecryptRequestOptions& operator=(DecryptRequestOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DecryptRequestOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DecryptRequestOptions* internal_default_instance() {
    return reinterpret_cast<const DecryptRequestOptions*>(
               &_DecryptRequestOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(DecryptRequestOptions& a, DecryptRequestOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(DecryptRequestOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecryptRequestOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DecryptRequestOptions* New() const final {
    return CreateMaybeMessage<DecryptRequestOptions>(nullptr);
  }

  DecryptRequestOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DecryptRequestOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DecryptRequestOptions& from);
  void MergeFrom(const DecryptRequestOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecryptRequestOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.DecryptRequestOptions";
  }
  protected:
  explicit DecryptRequestOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentNameFieldNumber = 1,
    kKeyNameFieldNumber = 12,
  };
  // string component_name = 1[json_name = "componentName"];
  void clear_component_name();
  const std::string& component_name() const;
  void set_component_name(const std::string& value);
  void set_component_name(std::string&& value);
  void set_component_name(const char* value);
  void set_component_name(const char* value, size_t size);
  std::string* mutable_component_name();
  std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_component_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_component_name(
      std::string* component_name);
  private:
  const std::string& _internal_component_name() const;
  void _internal_set_component_name(const std::string& value);
  std::string* _internal_mutable_component_name();
  public:

  // string key_name = 12[json_name = "keyName"];
  void clear_key_name();
  const std::string& key_name() const;
  void set_key_name(const std::string& value);
  void set_key_name(std::string&& value);
  void set_key_name(const char* value);
  void set_key_name(const char* value, size_t size);
  std::string* mutable_key_name();
  std::string* release_key_name();
  void set_allocated_key_name(std::string* key_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key_name(
      std::string* key_name);
  private:
  const std::string& _internal_key_name() const;
  void _internal_set_key_name(const std::string& value);
  std::string* _internal_mutable_key_name();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.DecryptRequestOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class DecryptResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.DecryptResponse) */ {
 public:
  inline DecryptResponse() : DecryptResponse(nullptr) {};
  virtual ~DecryptResponse();

  DecryptResponse(const DecryptResponse& from);
  DecryptResponse(DecryptResponse&& from) noexcept
    : DecryptResponse() {
    *this = ::std::move(from);
  }

  inline DecryptResponse& operator=(const DecryptResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecryptResponse& operator=(DecryptResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DecryptResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DecryptResponse* internal_default_instance() {
    return reinterpret_cast<const DecryptResponse*>(
               &_DecryptResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(DecryptResponse& a, DecryptResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DecryptResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecryptResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DecryptResponse* New() const final {
    return CreateMaybeMessage<DecryptResponse>(nullptr);
  }

  DecryptResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DecryptResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DecryptResponse& from);
  void MergeFrom(const DecryptResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecryptResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.DecryptResponse";
  }
  protected:
  explicit DecryptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
  };
  // .dapr.proto.common.v1.StreamPayload payload = 1;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::dapr::proto::common::v1::StreamPayload& payload() const;
  ::dapr::proto::common::v1::StreamPayload* release_payload();
  ::dapr::proto::common::v1::StreamPayload* mutable_payload();
  void set_allocated_payload(::dapr::proto::common::v1::StreamPayload* payload);
  private:
  const ::dapr::proto::common::v1::StreamPayload& _internal_payload() const;
  ::dapr::proto::common::v1::StreamPayload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::dapr::proto::common::v1::StreamPayload* payload);
  ::dapr::proto::common::v1::StreamPayload* unsafe_arena_release_payload();

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.DecryptResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::dapr::proto::common::v1::StreamPayload* payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class GetWorkflowRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.GetWorkflowRequest) */ {
 public:
  inline GetWorkflowRequest() : GetWorkflowRequest(nullptr) {};
  virtual ~GetWorkflowRequest();

  GetWorkflowRequest(const GetWorkflowRequest& from);
  GetWorkflowRequest(GetWorkflowRequest&& from) noexcept
    : GetWorkflowRequest() {
    *this = ::std::move(from);
  }

  inline GetWorkflowRequest& operator=(const GetWorkflowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorkflowRequest& operator=(GetWorkflowRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetWorkflowRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetWorkflowRequest* internal_default_instance() {
    return reinterpret_cast<const GetWorkflowRequest*>(
               &_GetWorkflowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(GetWorkflowRequest& a, GetWorkflowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorkflowRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorkflowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetWorkflowRequest* New() const final {
    return CreateMaybeMessage<GetWorkflowRequest>(nullptr);
  }

  GetWorkflowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetWorkflowRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetWorkflowRequest& from);
  void MergeFrom(const GetWorkflowRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorkflowRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.GetWorkflowRequest";
  }
  protected:
  explicit GetWorkflowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceIdFieldNumber = 1,
    kWorkflowComponentFieldNumber = 2,
  };
  // string instance_id = 1[json_name = "instanceID"];
  void clear_instance_id();
  const std::string& instance_id() const;
  void set_instance_id(const std::string& value);
  void set_instance_id(std::string&& value);
  void set_instance_id(const char* value);
  void set_instance_id(const char* value, size_t size);
  std::string* mutable_instance_id();
  std::string* release_instance_id();
  void set_allocated_instance_id(std::string* instance_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instance_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instance_id(
      std::string* instance_id);
  private:
  const std::string& _internal_instance_id() const;
  void _internal_set_instance_id(const std::string& value);
  std::string* _internal_mutable_instance_id();
  public:

  // string workflow_component = 2[json_name = "workflowComponent"];
  void clear_workflow_component();
  const std::string& workflow_component() const;
  void set_workflow_component(const std::string& value);
  void set_workflow_component(std::string&& value);
  void set_workflow_component(const char* value);
  void set_workflow_component(const char* value, size_t size);
  std::string* mutable_workflow_component();
  std::string* release_workflow_component();
  void set_allocated_workflow_component(std::string* workflow_component);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_workflow_component();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_workflow_component(
      std::string* workflow_component);
  private:
  const std::string& _internal_workflow_component() const;
  void _internal_set_workflow_component(const std::string& value);
  std::string* _internal_mutable_workflow_component();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.GetWorkflowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_component_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class GetWorkflowResponse_PropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetWorkflowResponse_PropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetWorkflowResponse_PropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GetWorkflowResponse_PropertiesEntry_DoNotUse();
  GetWorkflowResponse_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetWorkflowResponse_PropertiesEntry_DoNotUse& other);
  static const GetWorkflowResponse_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetWorkflowResponse_PropertiesEntry_DoNotUse*>(&_GetWorkflowResponse_PropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.GetWorkflowResponse.PropertiesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.GetWorkflowResponse.PropertiesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[112];
  }

  public:
};

// -------------------------------------------------------------------

class GetWorkflowResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.GetWorkflowResponse) */ {
 public:
  inline GetWorkflowResponse() : GetWorkflowResponse(nullptr) {};
  virtual ~GetWorkflowResponse();

  GetWorkflowResponse(const GetWorkflowResponse& from);
  GetWorkflowResponse(GetWorkflowResponse&& from) noexcept
    : GetWorkflowResponse() {
    *this = ::std::move(from);
  }

  inline GetWorkflowResponse& operator=(const GetWorkflowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorkflowResponse& operator=(GetWorkflowResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetWorkflowResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetWorkflowResponse* internal_default_instance() {
    return reinterpret_cast<const GetWorkflowResponse*>(
               &_GetWorkflowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(GetWorkflowResponse& a, GetWorkflowResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorkflowResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorkflowResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetWorkflowResponse* New() const final {
    return CreateMaybeMessage<GetWorkflowResponse>(nullptr);
  }

  GetWorkflowResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetWorkflowResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetWorkflowResponse& from);
  void MergeFrom(const GetWorkflowResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorkflowResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.GetWorkflowResponse";
  }
  protected:
  explicit GetWorkflowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 6,
    kInstanceIdFieldNumber = 1,
    kWorkflowNameFieldNumber = 2,
    kRuntimeStatusFieldNumber = 5,
    kCreatedAtFieldNumber = 3,
    kLastUpdatedAtFieldNumber = 4,
  };
  // map<string, string> properties = 6;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_properties();

  // string instance_id = 1[json_name = "instanceID"];
  void clear_instance_id();
  const std::string& instance_id() const;
  void set_instance_id(const std::string& value);
  void set_instance_id(std::string&& value);
  void set_instance_id(const char* value);
  void set_instance_id(const char* value, size_t size);
  std::string* mutable_instance_id();
  std::string* release_instance_id();
  void set_allocated_instance_id(std::string* instance_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instance_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instance_id(
      std::string* instance_id);
  private:
  const std::string& _internal_instance_id() const;
  void _internal_set_instance_id(const std::string& value);
  std::string* _internal_mutable_instance_id();
  public:

  // string workflow_name = 2[json_name = "workflowName"];
  void clear_workflow_name();
  const std::string& workflow_name() const;
  void set_workflow_name(const std::string& value);
  void set_workflow_name(std::string&& value);
  void set_workflow_name(const char* value);
  void set_workflow_name(const char* value, size_t size);
  std::string* mutable_workflow_name();
  std::string* release_workflow_name();
  void set_allocated_workflow_name(std::string* workflow_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_workflow_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_workflow_name(
      std::string* workflow_name);
  private:
  const std::string& _internal_workflow_name() const;
  void _internal_set_workflow_name(const std::string& value);
  std::string* _internal_mutable_workflow_name();
  public:

  // string runtime_status = 5[json_name = "runtimeStatus"];
  void clear_runtime_status();
  const std::string& runtime_status() const;
  void set_runtime_status(const std::string& value);
  void set_runtime_status(std::string&& value);
  void set_runtime_status(const char* value);
  void set_runtime_status(const char* value, size_t size);
  std::string* mutable_runtime_status();
  std::string* release_runtime_status();
  void set_allocated_runtime_status(std::string* runtime_status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_runtime_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_runtime_status(
      std::string* runtime_status);
  private:
  const std::string& _internal_runtime_status() const;
  void _internal_set_runtime_status(const std::string& value);
  std::string* _internal_mutable_runtime_status();
  public:

  // .google.protobuf.Timestamp created_at = 3[json_name = "createdAt"];
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp last_updated_at = 4[json_name = "lastUpdatedAt"];
  bool has_last_updated_at() const;
  private:
  bool _internal_has_last_updated_at() const;
  public:
  void clear_last_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& last_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_last_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_updated_at();
  void set_allocated_last_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* last_updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_updated_at();
  public:
  void unsafe_arena_set_allocated_last_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* last_updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_updated_at();

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.GetWorkflowResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetWorkflowResponse_PropertiesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_status_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* last_updated_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class StartWorkflowRequest_OptionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StartWorkflowRequest_OptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StartWorkflowRequest_OptionsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  StartWorkflowRequest_OptionsEntry_DoNotUse();
  StartWorkflowRequest_OptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StartWorkflowRequest_OptionsEntry_DoNotUse& other);
  static const StartWorkflowRequest_OptionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StartWorkflowRequest_OptionsEntry_DoNotUse*>(&_StartWorkflowRequest_OptionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.StartWorkflowRequest.OptionsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.StartWorkflowRequest.OptionsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[114];
  }

  public:
};

// -------------------------------------------------------------------

class StartWorkflowRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.StartWorkflowRequest) */ {
 public:
  inline StartWorkflowRequest() : StartWorkflowRequest(nullptr) {};
  virtual ~StartWorkflowRequest();

  StartWorkflowRequest(const StartWorkflowRequest& from);
  StartWorkflowRequest(StartWorkflowRequest&& from) noexcept
    : StartWorkflowRequest() {
    *this = ::std::move(from);
  }

  inline StartWorkflowRequest& operator=(const StartWorkflowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartWorkflowRequest& operator=(StartWorkflowRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartWorkflowRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartWorkflowRequest* internal_default_instance() {
    return reinterpret_cast<const StartWorkflowRequest*>(
               &_StartWorkflowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(StartWorkflowRequest& a, StartWorkflowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartWorkflowRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartWorkflowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartWorkflowRequest* New() const final {
    return CreateMaybeMessage<StartWorkflowRequest>(nullptr);
  }

  StartWorkflowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartWorkflowRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartWorkflowRequest& from);
  void MergeFrom(const StartWorkflowRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartWorkflowRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.StartWorkflowRequest";
  }
  protected:
  explicit StartWorkflowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 4,
    kInstanceIdFieldNumber = 1,
    kWorkflowComponentFieldNumber = 2,
    kWorkflowNameFieldNumber = 3,
    kInputFieldNumber = 5,
  };
  // map<string, string> options = 4;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_options() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_options();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      options() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_options();

  // string instance_id = 1[json_name = "instanceID"];
  void clear_instance_id();
  const std::string& instance_id() const;
  void set_instance_id(const std::string& value);
  void set_instance_id(std::string&& value);
  void set_instance_id(const char* value);
  void set_instance_id(const char* value, size_t size);
  std::string* mutable_instance_id();
  std::string* release_instance_id();
  void set_allocated_instance_id(std::string* instance_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instance_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instance_id(
      std::string* instance_id);
  private:
  const std::string& _internal_instance_id() const;
  void _internal_set_instance_id(const std::string& value);
  std::string* _internal_mutable_instance_id();
  public:

  // string workflow_component = 2[json_name = "workflowComponent"];
  void clear_workflow_component();
  const std::string& workflow_component() const;
  void set_workflow_component(const std::string& value);
  void set_workflow_component(std::string&& value);
  void set_workflow_component(const char* value);
  void set_workflow_component(const char* value, size_t size);
  std::string* mutable_workflow_component();
  std::string* release_workflow_component();
  void set_allocated_workflow_component(std::string* workflow_component);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_workflow_component();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_workflow_component(
      std::string* workflow_component);
  private:
  const std::string& _internal_workflow_component() const;
  void _internal_set_workflow_component(const std::string& value);
  std::string* _internal_mutable_workflow_component();
  public:

  // string workflow_name = 3[json_name = "workflowName"];
  void clear_workflow_name();
  const std::string& workflow_name() const;
  void set_workflow_name(const std::string& value);
  void set_workflow_name(std::string&& value);
  void set_workflow_name(const char* value);
  void set_workflow_name(const char* value, size_t size);
  std::string* mutable_workflow_name();
  std::string* release_workflow_name();
  void set_allocated_workflow_name(std::string* workflow_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_workflow_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_workflow_name(
      std::string* workflow_name);
  private:
  const std::string& _internal_workflow_name() const;
  void _internal_set_workflow_name(const std::string& value);
  std::string* _internal_mutable_workflow_name();
  public:

  // bytes input = 5;
  void clear_input();
  const std::string& input() const;
  void set_input(const std::string& value);
  void set_input(std::string&& value);
  void set_input(const char* value);
  void set_input(const void* value, size_t size);
  std::string* mutable_input();
  std::string* release_input();
  void set_allocated_input(std::string* input);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_input();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_input(
      std::string* input);
  private:
  const std::string& _internal_input() const;
  void _internal_set_input(const std::string& value);
  std::string* _internal_mutable_input();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.StartWorkflowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StartWorkflowRequest_OptionsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > options_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_component_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class StartWorkflowResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.StartWorkflowResponse) */ {
 public:
  inline StartWorkflowResponse() : StartWorkflowResponse(nullptr) {};
  virtual ~StartWorkflowResponse();

  StartWorkflowResponse(const StartWorkflowResponse& from);
  StartWorkflowResponse(StartWorkflowResponse&& from) noexcept
    : StartWorkflowResponse() {
    *this = ::std::move(from);
  }

  inline StartWorkflowResponse& operator=(const StartWorkflowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartWorkflowResponse& operator=(StartWorkflowResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartWorkflowResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartWorkflowResponse* internal_default_instance() {
    return reinterpret_cast<const StartWorkflowResponse*>(
               &_StartWorkflowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(StartWorkflowResponse& a, StartWorkflowResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartWorkflowResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartWorkflowResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartWorkflowResponse* New() const final {
    return CreateMaybeMessage<StartWorkflowResponse>(nullptr);
  }

  StartWorkflowResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartWorkflowResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartWorkflowResponse& from);
  void MergeFrom(const StartWorkflowResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartWorkflowResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.StartWorkflowResponse";
  }
  protected:
  explicit StartWorkflowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceIdFieldNumber = 1,
  };
  // string instance_id = 1[json_name = "instanceID"];
  void clear_instance_id();
  const std::string& instance_id() const;
  void set_instance_id(const std::string& value);
  void set_instance_id(std::string&& value);
  void set_instance_id(const char* value);
  void set_instance_id(const char* value, size_t size);
  std::string* mutable_instance_id();
  std::string* release_instance_id();
  void set_allocated_instance_id(std::string* instance_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instance_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instance_id(
      std::string* instance_id);
  private:
  const std::string& _internal_instance_id() const;
  void _internal_set_instance_id(const std::string& value);
  std::string* _internal_mutable_instance_id();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.StartWorkflowResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class TerminateWorkflowRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.TerminateWorkflowRequest) */ {
 public:
  inline TerminateWorkflowRequest() : TerminateWorkflowRequest(nullptr) {};
  virtual ~TerminateWorkflowRequest();

  TerminateWorkflowRequest(const TerminateWorkflowRequest& from);
  TerminateWorkflowRequest(TerminateWorkflowRequest&& from) noexcept
    : TerminateWorkflowRequest() {
    *this = ::std::move(from);
  }

  inline TerminateWorkflowRequest& operator=(const TerminateWorkflowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TerminateWorkflowRequest& operator=(TerminateWorkflowRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TerminateWorkflowRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TerminateWorkflowRequest* internal_default_instance() {
    return reinterpret_cast<const TerminateWorkflowRequest*>(
               &_TerminateWorkflowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(TerminateWorkflowRequest& a, TerminateWorkflowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TerminateWorkflowRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TerminateWorkflowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TerminateWorkflowRequest* New() const final {
    return CreateMaybeMessage<TerminateWorkflowRequest>(nullptr);
  }

  TerminateWorkflowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TerminateWorkflowRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TerminateWorkflowRequest& from);
  void MergeFrom(const TerminateWorkflowRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TerminateWorkflowRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.TerminateWorkflowRequest";
  }
  protected:
  explicit TerminateWorkflowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceIdFieldNumber = 1,
    kWorkflowComponentFieldNumber = 2,
  };
  // string instance_id = 1[json_name = "instanceID"];
  void clear_instance_id();
  const std::string& instance_id() const;
  void set_instance_id(const std::string& value);
  void set_instance_id(std::string&& value);
  void set_instance_id(const char* value);
  void set_instance_id(const char* value, size_t size);
  std::string* mutable_instance_id();
  std::string* release_instance_id();
  void set_allocated_instance_id(std::string* instance_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instance_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instance_id(
      std::string* instance_id);
  private:
  const std::string& _internal_instance_id() const;
  void _internal_set_instance_id(const std::string& value);
  std::string* _internal_mutable_instance_id();
  public:

  // string workflow_component = 2[json_name = "workflowComponent"];
  void clear_workflow_component();
  const std::string& workflow_component() const;
  void set_workflow_component(const std::string& value);
  void set_workflow_component(std::string&& value);
  void set_workflow_component(const char* value);
  void set_workflow_component(const char* value, size_t size);
  std::string* mutable_workflow_component();
  std::string* release_workflow_component();
  void set_allocated_workflow_component(std::string* workflow_component);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_workflow_component();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_workflow_component(
      std::string* workflow_component);
  private:
  const std::string& _internal_workflow_component() const;
  void _internal_set_workflow_component(const std::string& value);
  std::string* _internal_mutable_workflow_component();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.TerminateWorkflowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_component_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class PauseWorkflowRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.PauseWorkflowRequest) */ {
 public:
  inline PauseWorkflowRequest() : PauseWorkflowRequest(nullptr) {};
  virtual ~PauseWorkflowRequest();

  PauseWorkflowRequest(const PauseWorkflowRequest& from);
  PauseWorkflowRequest(PauseWorkflowRequest&& from) noexcept
    : PauseWorkflowRequest() {
    *this = ::std::move(from);
  }

  inline PauseWorkflowRequest& operator=(const PauseWorkflowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PauseWorkflowRequest& operator=(PauseWorkflowRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PauseWorkflowRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PauseWorkflowRequest* internal_default_instance() {
    return reinterpret_cast<const PauseWorkflowRequest*>(
               &_PauseWorkflowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(PauseWorkflowRequest& a, PauseWorkflowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PauseWorkflowRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PauseWorkflowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PauseWorkflowRequest* New() const final {
    return CreateMaybeMessage<PauseWorkflowRequest>(nullptr);
  }

  PauseWorkflowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PauseWorkflowRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PauseWorkflowRequest& from);
  void MergeFrom(const PauseWorkflowRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PauseWorkflowRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.PauseWorkflowRequest";
  }
  protected:
  explicit PauseWorkflowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceIdFieldNumber = 1,
    kWorkflowComponentFieldNumber = 2,
  };
  // string instance_id = 1[json_name = "instanceID"];
  void clear_instance_id();
  const std::string& instance_id() const;
  void set_instance_id(const std::string& value);
  void set_instance_id(std::string&& value);
  void set_instance_id(const char* value);
  void set_instance_id(const char* value, size_t size);
  std::string* mutable_instance_id();
  std::string* release_instance_id();
  void set_allocated_instance_id(std::string* instance_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instance_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instance_id(
      std::string* instance_id);
  private:
  const std::string& _internal_instance_id() const;
  void _internal_set_instance_id(const std::string& value);
  std::string* _internal_mutable_instance_id();
  public:

  // string workflow_component = 2[json_name = "workflowComponent"];
  void clear_workflow_component();
  const std::string& workflow_component() const;
  void set_workflow_component(const std::string& value);
  void set_workflow_component(std::string&& value);
  void set_workflow_component(const char* value);
  void set_workflow_component(const char* value, size_t size);
  std::string* mutable_workflow_component();
  std::string* release_workflow_component();
  void set_allocated_workflow_component(std::string* workflow_component);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_workflow_component();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_workflow_component(
      std::string* workflow_component);
  private:
  const std::string& _internal_workflow_component() const;
  void _internal_set_workflow_component(const std::string& value);
  std::string* _internal_mutable_workflow_component();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.PauseWorkflowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_component_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class ResumeWorkflowRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.ResumeWorkflowRequest) */ {
 public:
  inline ResumeWorkflowRequest() : ResumeWorkflowRequest(nullptr) {};
  virtual ~ResumeWorkflowRequest();

  ResumeWorkflowRequest(const ResumeWorkflowRequest& from);
  ResumeWorkflowRequest(ResumeWorkflowRequest&& from) noexcept
    : ResumeWorkflowRequest() {
    *this = ::std::move(from);
  }

  inline ResumeWorkflowRequest& operator=(const ResumeWorkflowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResumeWorkflowRequest& operator=(ResumeWorkflowRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResumeWorkflowRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResumeWorkflowRequest* internal_default_instance() {
    return reinterpret_cast<const ResumeWorkflowRequest*>(
               &_ResumeWorkflowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(ResumeWorkflowRequest& a, ResumeWorkflowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResumeWorkflowRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResumeWorkflowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResumeWorkflowRequest* New() const final {
    return CreateMaybeMessage<ResumeWorkflowRequest>(nullptr);
  }

  ResumeWorkflowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResumeWorkflowRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResumeWorkflowRequest& from);
  void MergeFrom(const ResumeWorkflowRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResumeWorkflowRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.ResumeWorkflowRequest";
  }
  protected:
  explicit ResumeWorkflowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceIdFieldNumber = 1,
    kWorkflowComponentFieldNumber = 2,
  };
  // string instance_id = 1[json_name = "instanceID"];
  void clear_instance_id();
  const std::string& instance_id() const;
  void set_instance_id(const std::string& value);
  void set_instance_id(std::string&& value);
  void set_instance_id(const char* value);
  void set_instance_id(const char* value, size_t size);
  std::string* mutable_instance_id();
  std::string* release_instance_id();
  void set_allocated_instance_id(std::string* instance_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instance_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instance_id(
      std::string* instance_id);
  private:
  const std::string& _internal_instance_id() const;
  void _internal_set_instance_id(const std::string& value);
  std::string* _internal_mutable_instance_id();
  public:

  // string workflow_component = 2[json_name = "workflowComponent"];
  void clear_workflow_component();
  const std::string& workflow_component() const;
  void set_workflow_component(const std::string& value);
  void set_workflow_component(std::string&& value);
  void set_workflow_component(const char* value);
  void set_workflow_component(const char* value, size_t size);
  std::string* mutable_workflow_component();
  std::string* release_workflow_component();
  void set_allocated_workflow_component(std::string* workflow_component);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_workflow_component();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_workflow_component(
      std::string* workflow_component);
  private:
  const std::string& _internal_workflow_component() const;
  void _internal_set_workflow_component(const std::string& value);
  std::string* _internal_mutable_workflow_component();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.ResumeWorkflowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_component_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class RaiseEventWorkflowRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.RaiseEventWorkflowRequest) */ {
 public:
  inline RaiseEventWorkflowRequest() : RaiseEventWorkflowRequest(nullptr) {};
  virtual ~RaiseEventWorkflowRequest();

  RaiseEventWorkflowRequest(const RaiseEventWorkflowRequest& from);
  RaiseEventWorkflowRequest(RaiseEventWorkflowRequest&& from) noexcept
    : RaiseEventWorkflowRequest() {
    *this = ::std::move(from);
  }

  inline RaiseEventWorkflowRequest& operator=(const RaiseEventWorkflowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaiseEventWorkflowRequest& operator=(RaiseEventWorkflowRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RaiseEventWorkflowRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RaiseEventWorkflowRequest* internal_default_instance() {
    return reinterpret_cast<const RaiseEventWorkflowRequest*>(
               &_RaiseEventWorkflowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(RaiseEventWorkflowRequest& a, RaiseEventWorkflowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RaiseEventWorkflowRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaiseEventWorkflowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RaiseEventWorkflowRequest* New() const final {
    return CreateMaybeMessage<RaiseEventWorkflowRequest>(nullptr);
  }

  RaiseEventWorkflowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RaiseEventWorkflowRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RaiseEventWorkflowRequest& from);
  void MergeFrom(const RaiseEventWorkflowRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaiseEventWorkflowRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.RaiseEventWorkflowRequest";
  }
  protected:
  explicit RaiseEventWorkflowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceIdFieldNumber = 1,
    kWorkflowComponentFieldNumber = 2,
    kEventNameFieldNumber = 3,
    kEventDataFieldNumber = 4,
  };
  // string instance_id = 1[json_name = "instanceID"];
  void clear_instance_id();
  const std::string& instance_id() const;
  void set_instance_id(const std::string& value);
  void set_instance_id(std::string&& value);
  void set_instance_id(const char* value);
  void set_instance_id(const char* value, size_t size);
  std::string* mutable_instance_id();
  std::string* release_instance_id();
  void set_allocated_instance_id(std::string* instance_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instance_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instance_id(
      std::string* instance_id);
  private:
  const std::string& _internal_instance_id() const;
  void _internal_set_instance_id(const std::string& value);
  std::string* _internal_mutable_instance_id();
  public:

  // string workflow_component = 2[json_name = "workflowComponent"];
  void clear_workflow_component();
  const std::string& workflow_component() const;
  void set_workflow_component(const std::string& value);
  void set_workflow_component(std::string&& value);
  void set_workflow_component(const char* value);
  void set_workflow_component(const char* value, size_t size);
  std::string* mutable_workflow_component();
  std::string* release_workflow_component();
  void set_allocated_workflow_component(std::string* workflow_component);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_workflow_component();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_workflow_component(
      std::string* workflow_component);
  private:
  const std::string& _internal_workflow_component() const;
  void _internal_set_workflow_component(const std::string& value);
  std::string* _internal_mutable_workflow_component();
  public:

  // string event_name = 3[json_name = "eventName"];
  void clear_event_name();
  const std::string& event_name() const;
  void set_event_name(const std::string& value);
  void set_event_name(std::string&& value);
  void set_event_name(const char* value);
  void set_event_name(const char* value, size_t size);
  std::string* mutable_event_name();
  std::string* release_event_name();
  void set_allocated_event_name(std::string* event_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_event_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_event_name(
      std::string* event_name);
  private:
  const std::string& _internal_event_name() const;
  void _internal_set_event_name(const std::string& value);
  std::string* _internal_mutable_event_name();
  public:

  // bytes event_data = 4;
  void clear_event_data();
  const std::string& event_data() const;
  void set_event_data(const std::string& value);
  void set_event_data(std::string&& value);
  void set_event_data(const char* value);
  void set_event_data(const void* value, size_t size);
  std::string* mutable_event_data();
  std::string* release_event_data();
  void set_allocated_event_data(std::string* event_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_event_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_event_data(
      std::string* event_data);
  private:
  const std::string& _internal_event_data() const;
  void _internal_set_event_data(const std::string& value);
  std::string* _internal_mutable_event_data();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.RaiseEventWorkflowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_component_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class PurgeWorkflowRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.PurgeWorkflowRequest) */ {
 public:
  inline PurgeWorkflowRequest() : PurgeWorkflowRequest(nullptr) {};
  virtual ~PurgeWorkflowRequest();

  PurgeWorkflowRequest(const PurgeWorkflowRequest& from);
  PurgeWorkflowRequest(PurgeWorkflowRequest&& from) noexcept
    : PurgeWorkflowRequest() {
    *this = ::std::move(from);
  }

  inline PurgeWorkflowRequest& operator=(const PurgeWorkflowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PurgeWorkflowRequest& operator=(PurgeWorkflowRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PurgeWorkflowRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PurgeWorkflowRequest* internal_default_instance() {
    return reinterpret_cast<const PurgeWorkflowRequest*>(
               &_PurgeWorkflowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(PurgeWorkflowRequest& a, PurgeWorkflowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PurgeWorkflowRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PurgeWorkflowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PurgeWorkflowRequest* New() const final {
    return CreateMaybeMessage<PurgeWorkflowRequest>(nullptr);
  }

  PurgeWorkflowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PurgeWorkflowRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PurgeWorkflowRequest& from);
  void MergeFrom(const PurgeWorkflowRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PurgeWorkflowRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.PurgeWorkflowRequest";
  }
  protected:
  explicit PurgeWorkflowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceIdFieldNumber = 1,
    kWorkflowComponentFieldNumber = 2,
  };
  // string instance_id = 1[json_name = "instanceID"];
  void clear_instance_id();
  const std::string& instance_id() const;
  void set_instance_id(const std::string& value);
  void set_instance_id(std::string&& value);
  void set_instance_id(const char* value);
  void set_instance_id(const char* value, size_t size);
  std::string* mutable_instance_id();
  std::string* release_instance_id();
  void set_allocated_instance_id(std::string* instance_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instance_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instance_id(
      std::string* instance_id);
  private:
  const std::string& _internal_instance_id() const;
  void _internal_set_instance_id(const std::string& value);
  std::string* _internal_mutable_instance_id();
  public:

  // string workflow_component = 2[json_name = "workflowComponent"];
  void clear_workflow_component();
  const std::string& workflow_component() const;
  void set_workflow_component(const std::string& value);
  void set_workflow_component(std::string&& value);
  void set_workflow_component(const char* value);
  void set_workflow_component(const char* value, size_t size);
  std::string* mutable_workflow_component();
  std::string* release_workflow_component();
  void set_allocated_workflow_component(std::string* workflow_component);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_workflow_component();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_workflow_component(
      std::string* workflow_component);
  private:
  const std::string& _internal_workflow_component() const;
  void _internal_set_workflow_component(const std::string& value);
  std::string* _internal_mutable_workflow_component();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.PurgeWorkflowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_component_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class ShutdownRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.ShutdownRequest) */ {
 public:
  inline ShutdownRequest() : ShutdownRequest(nullptr) {};
  virtual ~ShutdownRequest();

  ShutdownRequest(const ShutdownRequest& from);
  ShutdownRequest(ShutdownRequest&& from) noexcept
    : ShutdownRequest() {
    *this = ::std::move(from);
  }

  inline ShutdownRequest& operator=(const ShutdownRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShutdownRequest& operator=(ShutdownRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShutdownRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShutdownRequest* internal_default_instance() {
    return reinterpret_cast<const ShutdownRequest*>(
               &_ShutdownRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(ShutdownRequest& a, ShutdownRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShutdownRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShutdownRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShutdownRequest* New() const final {
    return CreateMaybeMessage<ShutdownRequest>(nullptr);
  }

  ShutdownRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShutdownRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShutdownRequest& from);
  void MergeFrom(const ShutdownRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShutdownRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.ShutdownRequest";
  }
  protected:
  explicit ShutdownRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.ShutdownRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class Job PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.Job) */ {
 public:
  inline Job() : Job(nullptr) {};
  virtual ~Job();

  Job(const Job& from);
  Job(Job&& from) noexcept
    : Job() {
    *this = ::std::move(from);
  }

  inline Job& operator=(const Job& from) {
    CopyFrom(from);
    return *this;
  }
  inline Job& operator=(Job&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Job& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Job* internal_default_instance() {
    return reinterpret_cast<const Job*>(
               &_Job_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(Job& a, Job& b) {
    a.Swap(&b);
  }
  inline void Swap(Job* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Job* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Job* New() const final {
    return CreateMaybeMessage<Job>(nullptr);
  }

  Job* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Job>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Job& from);
  void MergeFrom(const Job& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Job* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.Job";
  }
  protected:
  explicit Job(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kScheduleFieldNumber = 2,
    kDueTimeFieldNumber = 4,
    kTtlFieldNumber = 5,
    kDataFieldNumber = 6,
    kRepeatsFieldNumber = 3,
  };
  // string name = 1[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string schedule = 2[json_name = "schedule"];
  bool has_schedule() const;
  private:
  bool _internal_has_schedule() const;
  public:
  void clear_schedule();
  const std::string& schedule() const;
  void set_schedule(const std::string& value);
  void set_schedule(std::string&& value);
  void set_schedule(const char* value);
  void set_schedule(const char* value, size_t size);
  std::string* mutable_schedule();
  std::string* release_schedule();
  void set_allocated_schedule(std::string* schedule);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_schedule();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_schedule(
      std::string* schedule);
  private:
  const std::string& _internal_schedule() const;
  void _internal_set_schedule(const std::string& value);
  std::string* _internal_mutable_schedule();
  public:

  // string due_time = 4[json_name = "dueTime"];
  bool has_due_time() const;
  private:
  bool _internal_has_due_time() const;
  public:
  void clear_due_time();
  const std::string& due_time() const;
  void set_due_time(const std::string& value);
  void set_due_time(std::string&& value);
  void set_due_time(const char* value);
  void set_due_time(const char* value, size_t size);
  std::string* mutable_due_time();
  std::string* release_due_time();
  void set_allocated_due_time(std::string* due_time);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_due_time();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_due_time(
      std::string* due_time);
  private:
  const std::string& _internal_due_time() const;
  void _internal_set_due_time(const std::string& value);
  std::string* _internal_mutable_due_time();
  public:

  // string ttl = 5[json_name = "ttl"];
  bool has_ttl() const;
  private:
  bool _internal_has_ttl() const;
  public:
  void clear_ttl();
  const std::string& ttl() const;
  void set_ttl(const std::string& value);
  void set_ttl(std::string&& value);
  void set_ttl(const char* value);
  void set_ttl(const char* value, size_t size);
  std::string* mutable_ttl();
  std::string* release_ttl();
  void set_allocated_ttl(std::string* ttl);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ttl();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ttl(
      std::string* ttl);
  private:
  const std::string& _internal_ttl() const;
  void _internal_set_ttl(const std::string& value);
  std::string* _internal_mutable_ttl();
  public:

  // .google.protobuf.Any data = 6[json_name = "data"];
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const PROTOBUF_NAMESPACE_ID::Any& data() const;
  PROTOBUF_NAMESPACE_ID::Any* release_data();
  PROTOBUF_NAMESPACE_ID::Any* mutable_data();
  void set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_data() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      PROTOBUF_NAMESPACE_ID::Any* data);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_data();

  // uint32 repeats = 3[json_name = "repeats"];
  bool has_repeats() const;
  private:
  bool _internal_has_repeats() const;
  public:
  void clear_repeats();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeats() const;
  void set_repeats(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_repeats() const;
  void _internal_set_repeats(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.Job)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schedule_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr due_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ttl_;
  PROTOBUF_NAMESPACE_ID::Any* data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 repeats_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class ScheduleJobRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.ScheduleJobRequest) */ {
 public:
  inline ScheduleJobRequest() : ScheduleJobRequest(nullptr) {};
  virtual ~ScheduleJobRequest();

  ScheduleJobRequest(const ScheduleJobRequest& from);
  ScheduleJobRequest(ScheduleJobRequest&& from) noexcept
    : ScheduleJobRequest() {
    *this = ::std::move(from);
  }

  inline ScheduleJobRequest& operator=(const ScheduleJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduleJobRequest& operator=(ScheduleJobRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScheduleJobRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScheduleJobRequest* internal_default_instance() {
    return reinterpret_cast<const ScheduleJobRequest*>(
               &_ScheduleJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(ScheduleJobRequest& a, ScheduleJobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduleJobRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScheduleJobRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScheduleJobRequest* New() const final {
    return CreateMaybeMessage<ScheduleJobRequest>(nullptr);
  }

  ScheduleJobRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScheduleJobRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScheduleJobRequest& from);
  void MergeFrom(const ScheduleJobRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScheduleJobRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.ScheduleJobRequest";
  }
  protected:
  explicit ScheduleJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobFieldNumber = 1,
  };
  // .dapr.proto.runtime.v1.Job job = 1;
  bool has_job() const;
  private:
  bool _internal_has_job() const;
  public:
  void clear_job();
  const ::dapr::proto::runtime::v1::Job& job() const;
  ::dapr::proto::runtime::v1::Job* release_job();
  ::dapr::proto::runtime::v1::Job* mutable_job();
  void set_allocated_job(::dapr::proto::runtime::v1::Job* job);
  private:
  const ::dapr::proto::runtime::v1::Job& _internal_job() const;
  ::dapr::proto::runtime::v1::Job* _internal_mutable_job();
  public:
  void unsafe_arena_set_allocated_job(
      ::dapr::proto::runtime::v1::Job* job);
  ::dapr::proto::runtime::v1::Job* unsafe_arena_release_job();

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.ScheduleJobRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::dapr::proto::runtime::v1::Job* job_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class ScheduleJobResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.ScheduleJobResponse) */ {
 public:
  inline ScheduleJobResponse() : ScheduleJobResponse(nullptr) {};
  virtual ~ScheduleJobResponse();

  ScheduleJobResponse(const ScheduleJobResponse& from);
  ScheduleJobResponse(ScheduleJobResponse&& from) noexcept
    : ScheduleJobResponse() {
    *this = ::std::move(from);
  }

  inline ScheduleJobResponse& operator=(const ScheduleJobResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduleJobResponse& operator=(ScheduleJobResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScheduleJobResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScheduleJobResponse* internal_default_instance() {
    return reinterpret_cast<const ScheduleJobResponse*>(
               &_ScheduleJobResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(ScheduleJobResponse& a, ScheduleJobResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduleJobResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScheduleJobResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScheduleJobResponse* New() const final {
    return CreateMaybeMessage<ScheduleJobResponse>(nullptr);
  }

  ScheduleJobResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScheduleJobResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScheduleJobResponse& from);
  void MergeFrom(const ScheduleJobResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScheduleJobResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.ScheduleJobResponse";
  }
  protected:
  explicit ScheduleJobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.ScheduleJobResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class GetJobRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.GetJobRequest) */ {
 public:
  inline GetJobRequest() : GetJobRequest(nullptr) {};
  virtual ~GetJobRequest();

  GetJobRequest(const GetJobRequest& from);
  GetJobRequest(GetJobRequest&& from) noexcept
    : GetJobRequest() {
    *this = ::std::move(from);
  }

  inline GetJobRequest& operator=(const GetJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetJobRequest& operator=(GetJobRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetJobRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetJobRequest* internal_default_instance() {
    return reinterpret_cast<const GetJobRequest*>(
               &_GetJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(GetJobRequest& a, GetJobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetJobRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetJobRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetJobRequest* New() const final {
    return CreateMaybeMessage<GetJobRequest>(nullptr);
  }

  GetJobRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetJobRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetJobRequest& from);
  void MergeFrom(const GetJobRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetJobRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.GetJobRequest";
  }
  protected:
  explicit GetJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.GetJobRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class GetJobResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.GetJobResponse) */ {
 public:
  inline GetJobResponse() : GetJobResponse(nullptr) {};
  virtual ~GetJobResponse();

  GetJobResponse(const GetJobResponse& from);
  GetJobResponse(GetJobResponse&& from) noexcept
    : GetJobResponse() {
    *this = ::std::move(from);
  }

  inline GetJobResponse& operator=(const GetJobResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetJobResponse& operator=(GetJobResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetJobResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetJobResponse* internal_default_instance() {
    return reinterpret_cast<const GetJobResponse*>(
               &_GetJobResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(GetJobResponse& a, GetJobResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetJobResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetJobResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetJobResponse* New() const final {
    return CreateMaybeMessage<GetJobResponse>(nullptr);
  }

  GetJobResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetJobResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetJobResponse& from);
  void MergeFrom(const GetJobResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetJobResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.GetJobResponse";
  }
  protected:
  explicit GetJobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobFieldNumber = 1,
  };
  // .dapr.proto.runtime.v1.Job job = 1;
  bool has_job() const;
  private:
  bool _internal_has_job() const;
  public:
  void clear_job();
  const ::dapr::proto::runtime::v1::Job& job() const;
  ::dapr::proto::runtime::v1::Job* release_job();
  ::dapr::proto::runtime::v1::Job* mutable_job();
  void set_allocated_job(::dapr::proto::runtime::v1::Job* job);
  private:
  const ::dapr::proto::runtime::v1::Job& _internal_job() const;
  ::dapr::proto::runtime::v1::Job* _internal_mutable_job();
  public:
  void unsafe_arena_set_allocated_job(
      ::dapr::proto::runtime::v1::Job* job);
  ::dapr::proto::runtime::v1::Job* unsafe_arena_release_job();

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.GetJobResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::dapr::proto::runtime::v1::Job* job_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class DeleteJobRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.DeleteJobRequest) */ {
 public:
  inline DeleteJobRequest() : DeleteJobRequest(nullptr) {};
  virtual ~DeleteJobRequest();

  DeleteJobRequest(const DeleteJobRequest& from);
  DeleteJobRequest(DeleteJobRequest&& from) noexcept
    : DeleteJobRequest() {
    *this = ::std::move(from);
  }

  inline DeleteJobRequest& operator=(const DeleteJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteJobRequest& operator=(DeleteJobRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteJobRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteJobRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteJobRequest*>(
               &_DeleteJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(DeleteJobRequest& a, DeleteJobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteJobRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteJobRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteJobRequest* New() const final {
    return CreateMaybeMessage<DeleteJobRequest>(nullptr);
  }

  DeleteJobRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteJobRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteJobRequest& from);
  void MergeFrom(const DeleteJobRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteJobRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.DeleteJobRequest";
  }
  protected:
  explicit DeleteJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.DeleteJobRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// -------------------------------------------------------------------

class DeleteJobResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.DeleteJobResponse) */ {
 public:
  inline DeleteJobResponse() : DeleteJobResponse(nullptr) {};
  virtual ~DeleteJobResponse();

  DeleteJobResponse(const DeleteJobResponse& from);
  DeleteJobResponse(DeleteJobResponse&& from) noexcept
    : DeleteJobResponse() {
    *this = ::std::move(from);
  }

  inline DeleteJobResponse& operator=(const DeleteJobResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteJobResponse& operator=(DeleteJobResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteJobResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteJobResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteJobResponse*>(
               &_DeleteJobResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(DeleteJobResponse& a, DeleteJobResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteJobResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteJobResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteJobResponse* New() const final {
    return CreateMaybeMessage<DeleteJobResponse>(nullptr);
  }

  DeleteJobResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteJobResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteJobResponse& from);
  void MergeFrom(const DeleteJobResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteJobResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.proto.runtime.v1.DeleteJobResponse";
  }
  protected:
  explicit DeleteJobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto);
    return ::descriptor_table_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.DeleteJobResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InvokeServiceRequest

// string id = 1;
inline void InvokeServiceRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InvokeServiceRequest::id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.InvokeServiceRequest.id)
  return _internal_id();
}
inline void InvokeServiceRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.InvokeServiceRequest.id)
}
inline std::string* InvokeServiceRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.InvokeServiceRequest.id)
  return _internal_mutable_id();
}
inline const std::string& InvokeServiceRequest::_internal_id() const {
  return id_.Get();
}
inline void InvokeServiceRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InvokeServiceRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.InvokeServiceRequest.id)
}
inline void InvokeServiceRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.InvokeServiceRequest.id)
}
inline void InvokeServiceRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.InvokeServiceRequest.id)
}
inline std::string* InvokeServiceRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InvokeServiceRequest::release_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.InvokeServiceRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvokeServiceRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.InvokeServiceRequest.id)
}
inline std::string* InvokeServiceRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.InvokeServiceRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InvokeServiceRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.InvokeServiceRequest.id)
}

// .dapr.proto.common.v1.InvokeRequest message = 3;
inline bool InvokeServiceRequest::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool InvokeServiceRequest::has_message() const {
  return _internal_has_message();
}
inline const ::dapr::proto::common::v1::InvokeRequest& InvokeServiceRequest::_internal_message() const {
  const ::dapr::proto::common::v1::InvokeRequest* p = message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dapr::proto::common::v1::InvokeRequest*>(
      &::dapr::proto::common::v1::_InvokeRequest_default_instance_);
}
inline const ::dapr::proto::common::v1::InvokeRequest& InvokeServiceRequest::message() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.InvokeServiceRequest.message)
  return _internal_message();
}
inline void InvokeServiceRequest::unsafe_arena_set_allocated_message(
    ::dapr::proto::common::v1::InvokeRequest* message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.InvokeServiceRequest.message)
}
inline ::dapr::proto::common::v1::InvokeRequest* InvokeServiceRequest::release_message() {
  auto temp = unsafe_arena_release_message();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dapr::proto::common::v1::InvokeRequest* InvokeServiceRequest::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.InvokeServiceRequest.message)
  
  ::dapr::proto::common::v1::InvokeRequest* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::dapr::proto::common::v1::InvokeRequest* InvokeServiceRequest::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::common::v1::InvokeRequest>(GetArena());
    message_ = p;
  }
  return message_;
}
inline ::dapr::proto::common::v1::InvokeRequest* InvokeServiceRequest::mutable_message() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.InvokeServiceRequest.message)
  return _internal_mutable_message();
}
inline void InvokeServiceRequest::set_allocated_message(::dapr::proto::common::v1::InvokeRequest* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message)->GetArena();
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.InvokeServiceRequest.message)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetStateRequest

// string store_name = 1;
inline void GetStateRequest::clear_store_name() {
  store_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetStateRequest::store_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetStateRequest.store_name)
  return _internal_store_name();
}
inline void GetStateRequest::set_store_name(const std::string& value) {
  _internal_set_store_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetStateRequest.store_name)
}
inline std::string* GetStateRequest::mutable_store_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetStateRequest.store_name)
  return _internal_mutable_store_name();
}
inline const std::string& GetStateRequest::_internal_store_name() const {
  return store_name_.Get();
}
inline void GetStateRequest::_internal_set_store_name(const std::string& value) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetStateRequest::set_store_name(std::string&& value) {
  
  store_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.GetStateRequest.store_name)
}
inline void GetStateRequest::set_store_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetStateRequest.store_name)
}
inline void GetStateRequest::set_store_name(const char* value,
    size_t size) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetStateRequest.store_name)
}
inline std::string* GetStateRequest::_internal_mutable_store_name() {
  
  return store_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetStateRequest::release_store_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetStateRequest.store_name)
  return store_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetStateRequest::set_allocated_store_name(std::string* store_name) {
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), store_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetStateRequest.store_name)
}
inline std::string* GetStateRequest::unsafe_arena_release_store_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.GetStateRequest.store_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return store_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetStateRequest::unsafe_arena_set_allocated_store_name(
    std::string* store_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      store_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetStateRequest.store_name)
}

// string key = 2;
inline void GetStateRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetStateRequest::key() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetStateRequest.key)
  return _internal_key();
}
inline void GetStateRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetStateRequest.key)
}
inline std::string* GetStateRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetStateRequest.key)
  return _internal_mutable_key();
}
inline const std::string& GetStateRequest::_internal_key() const {
  return key_.Get();
}
inline void GetStateRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetStateRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.GetStateRequest.key)
}
inline void GetStateRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetStateRequest.key)
}
inline void GetStateRequest::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetStateRequest.key)
}
inline std::string* GetStateRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetStateRequest::release_key() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetStateRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetStateRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetStateRequest.key)
}
inline std::string* GetStateRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.GetStateRequest.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetStateRequest::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetStateRequest.key)
}

// .dapr.proto.common.v1.StateOptions.StateConsistency consistency = 3;
inline void GetStateRequest::clear_consistency() {
  consistency_ = 0;
}
inline ::dapr::proto::common::v1::StateOptions_StateConsistency GetStateRequest::_internal_consistency() const {
  return static_cast< ::dapr::proto::common::v1::StateOptions_StateConsistency >(consistency_);
}
inline ::dapr::proto::common::v1::StateOptions_StateConsistency GetStateRequest::consistency() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetStateRequest.consistency)
  return _internal_consistency();
}
inline void GetStateRequest::_internal_set_consistency(::dapr::proto::common::v1::StateOptions_StateConsistency value) {
  
  consistency_ = value;
}
inline void GetStateRequest::set_consistency(::dapr::proto::common::v1::StateOptions_StateConsistency value) {
  _internal_set_consistency(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetStateRequest.consistency)
}

// map<string, string> metadata = 4;
inline int GetStateRequest::_internal_metadata_size() const {
  return metadata_.size();
}
inline int GetStateRequest::metadata_size() const {
  return _internal_metadata_size();
}
inline void GetStateRequest::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetStateRequest::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetStateRequest::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.GetStateRequest.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetStateRequest::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetStateRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.GetStateRequest.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetBulkStateRequest

// string store_name = 1;
inline void GetBulkStateRequest::clear_store_name() {
  store_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetBulkStateRequest::store_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetBulkStateRequest.store_name)
  return _internal_store_name();
}
inline void GetBulkStateRequest::set_store_name(const std::string& value) {
  _internal_set_store_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetBulkStateRequest.store_name)
}
inline std::string* GetBulkStateRequest::mutable_store_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetBulkStateRequest.store_name)
  return _internal_mutable_store_name();
}
inline const std::string& GetBulkStateRequest::_internal_store_name() const {
  return store_name_.Get();
}
inline void GetBulkStateRequest::_internal_set_store_name(const std::string& value) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetBulkStateRequest::set_store_name(std::string&& value) {
  
  store_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.GetBulkStateRequest.store_name)
}
inline void GetBulkStateRequest::set_store_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetBulkStateRequest.store_name)
}
inline void GetBulkStateRequest::set_store_name(const char* value,
    size_t size) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetBulkStateRequest.store_name)
}
inline std::string* GetBulkStateRequest::_internal_mutable_store_name() {
  
  return store_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetBulkStateRequest::release_store_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetBulkStateRequest.store_name)
  return store_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetBulkStateRequest::set_allocated_store_name(std::string* store_name) {
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), store_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetBulkStateRequest.store_name)
}
inline std::string* GetBulkStateRequest::unsafe_arena_release_store_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.GetBulkStateRequest.store_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return store_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetBulkStateRequest::unsafe_arena_set_allocated_store_name(
    std::string* store_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      store_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetBulkStateRequest.store_name)
}

// repeated string keys = 2;
inline int GetBulkStateRequest::_internal_keys_size() const {
  return keys_.size();
}
inline int GetBulkStateRequest::keys_size() const {
  return _internal_keys_size();
}
inline void GetBulkStateRequest::clear_keys() {
  keys_.Clear();
}
inline std::string* GetBulkStateRequest::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:dapr.proto.runtime.v1.GetBulkStateRequest.keys)
  return _internal_add_keys();
}
inline const std::string& GetBulkStateRequest::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const std::string& GetBulkStateRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetBulkStateRequest.keys)
  return _internal_keys(index);
}
inline std::string* GetBulkStateRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetBulkStateRequest.keys)
  return keys_.Mutable(index);
}
inline void GetBulkStateRequest::set_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetBulkStateRequest.keys)
  keys_.Mutable(index)->assign(value);
}
inline void GetBulkStateRequest::set_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetBulkStateRequest.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
inline void GetBulkStateRequest::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetBulkStateRequest.keys)
}
inline void GetBulkStateRequest::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetBulkStateRequest.keys)
}
inline std::string* GetBulkStateRequest::_internal_add_keys() {
  return keys_.Add();
}
inline void GetBulkStateRequest::add_keys(const std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.GetBulkStateRequest.keys)
}
inline void GetBulkStateRequest::add_keys(std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.GetBulkStateRequest.keys)
}
inline void GetBulkStateRequest::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dapr.proto.runtime.v1.GetBulkStateRequest.keys)
}
inline void GetBulkStateRequest::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dapr.proto.runtime.v1.GetBulkStateRequest.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetBulkStateRequest::keys() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.GetBulkStateRequest.keys)
  return keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetBulkStateRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.GetBulkStateRequest.keys)
  return &keys_;
}

// int32 parallelism = 3;
inline void GetBulkStateRequest::clear_parallelism() {
  parallelism_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBulkStateRequest::_internal_parallelism() const {
  return parallelism_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBulkStateRequest::parallelism() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetBulkStateRequest.parallelism)
  return _internal_parallelism();
}
inline void GetBulkStateRequest::_internal_set_parallelism(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  parallelism_ = value;
}
inline void GetBulkStateRequest::set_parallelism(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parallelism(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetBulkStateRequest.parallelism)
}

// map<string, string> metadata = 4;
inline int GetBulkStateRequest::_internal_metadata_size() const {
  return metadata_.size();
}
inline int GetBulkStateRequest::metadata_size() const {
  return _internal_metadata_size();
}
inline void GetBulkStateRequest::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetBulkStateRequest::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetBulkStateRequest::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.GetBulkStateRequest.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetBulkStateRequest::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetBulkStateRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.GetBulkStateRequest.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// GetBulkStateResponse

// repeated .dapr.proto.runtime.v1.BulkStateItem items = 1;
inline int GetBulkStateResponse::_internal_items_size() const {
  return items_.size();
}
inline int GetBulkStateResponse::items_size() const {
  return _internal_items_size();
}
inline void GetBulkStateResponse::clear_items() {
  items_.Clear();
}
inline ::dapr::proto::runtime::v1::BulkStateItem* GetBulkStateResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetBulkStateResponse.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::BulkStateItem >*
GetBulkStateResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.GetBulkStateResponse.items)
  return &items_;
}
inline const ::dapr::proto::runtime::v1::BulkStateItem& GetBulkStateResponse::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::dapr::proto::runtime::v1::BulkStateItem& GetBulkStateResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetBulkStateResponse.items)
  return _internal_items(index);
}
inline ::dapr::proto::runtime::v1::BulkStateItem* GetBulkStateResponse::_internal_add_items() {
  return items_.Add();
}
inline ::dapr::proto::runtime::v1::BulkStateItem* GetBulkStateResponse::add_items() {
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.GetBulkStateResponse.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::BulkStateItem >&
GetBulkStateResponse::items() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.GetBulkStateResponse.items)
  return items_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BulkStateItem

// string key = 1;
inline void BulkStateItem::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BulkStateItem::key() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BulkStateItem.key)
  return _internal_key();
}
inline void BulkStateItem::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BulkStateItem.key)
}
inline std::string* BulkStateItem::mutable_key() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BulkStateItem.key)
  return _internal_mutable_key();
}
inline const std::string& BulkStateItem::_internal_key() const {
  return key_.Get();
}
inline void BulkStateItem::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BulkStateItem::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.BulkStateItem.key)
}
inline void BulkStateItem::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.BulkStateItem.key)
}
inline void BulkStateItem::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.BulkStateItem.key)
}
inline std::string* BulkStateItem::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BulkStateItem::release_key() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.BulkStateItem.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BulkStateItem::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.BulkStateItem.key)
}
inline std::string* BulkStateItem::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.BulkStateItem.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BulkStateItem::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.BulkStateItem.key)
}

// bytes data = 2;
inline void BulkStateItem::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BulkStateItem::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BulkStateItem.data)
  return _internal_data();
}
inline void BulkStateItem::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BulkStateItem.data)
}
inline std::string* BulkStateItem::mutable_data() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BulkStateItem.data)
  return _internal_mutable_data();
}
inline const std::string& BulkStateItem::_internal_data() const {
  return data_.Get();
}
inline void BulkStateItem::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BulkStateItem::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.BulkStateItem.data)
}
inline void BulkStateItem::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.BulkStateItem.data)
}
inline void BulkStateItem::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.BulkStateItem.data)
}
inline std::string* BulkStateItem::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BulkStateItem::release_data() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.BulkStateItem.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BulkStateItem::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.BulkStateItem.data)
}
inline std::string* BulkStateItem::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.BulkStateItem.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BulkStateItem::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.BulkStateItem.data)
}

// string etag = 3;
inline void BulkStateItem::clear_etag() {
  etag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BulkStateItem::etag() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BulkStateItem.etag)
  return _internal_etag();
}
inline void BulkStateItem::set_etag(const std::string& value) {
  _internal_set_etag(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BulkStateItem.etag)
}
inline std::string* BulkStateItem::mutable_etag() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BulkStateItem.etag)
  return _internal_mutable_etag();
}
inline const std::string& BulkStateItem::_internal_etag() const {
  return etag_.Get();
}
inline void BulkStateItem::_internal_set_etag(const std::string& value) {
  
  etag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BulkStateItem::set_etag(std::string&& value) {
  
  etag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.BulkStateItem.etag)
}
inline void BulkStateItem::set_etag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  etag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.BulkStateItem.etag)
}
inline void BulkStateItem::set_etag(const char* value,
    size_t size) {
  
  etag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.BulkStateItem.etag)
}
inline std::string* BulkStateItem::_internal_mutable_etag() {
  
  return etag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BulkStateItem::release_etag() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.BulkStateItem.etag)
  return etag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BulkStateItem::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  etag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), etag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.BulkStateItem.etag)
}
inline std::string* BulkStateItem::unsafe_arena_release_etag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.BulkStateItem.etag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return etag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BulkStateItem::unsafe_arena_set_allocated_etag(
    std::string* etag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (etag != nullptr) {
    
  } else {
    
  }
  etag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      etag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.BulkStateItem.etag)
}

// string error = 4;
inline void BulkStateItem::clear_error() {
  error_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BulkStateItem::error() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BulkStateItem.error)
  return _internal_error();
}
inline void BulkStateItem::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BulkStateItem.error)
}
inline std::string* BulkStateItem::mutable_error() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BulkStateItem.error)
  return _internal_mutable_error();
}
inline const std::string& BulkStateItem::_internal_error() const {
  return error_.Get();
}
inline void BulkStateItem::_internal_set_error(const std::string& value) {
  
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BulkStateItem::set_error(std::string&& value) {
  
  error_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.BulkStateItem.error)
}
inline void BulkStateItem::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.BulkStateItem.error)
}
inline void BulkStateItem::set_error(const char* value,
    size_t size) {
  
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.BulkStateItem.error)
}
inline std::string* BulkStateItem::_internal_mutable_error() {
  
  return error_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BulkStateItem::release_error() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.BulkStateItem.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BulkStateItem::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.BulkStateItem.error)
}
inline std::string* BulkStateItem::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.BulkStateItem.error)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return error_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BulkStateItem::unsafe_arena_set_allocated_error(
    std::string* error) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (error != nullptr) {
    
  } else {
    
  }
  error_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      error, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.BulkStateItem.error)
}

// map<string, string> metadata = 5;
inline int BulkStateItem::_internal_metadata_size() const {
  return metadata_.size();
}
inline int BulkStateItem::metadata_size() const {
  return _internal_metadata_size();
}
inline void BulkStateItem::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
BulkStateItem::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
BulkStateItem::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.BulkStateItem.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
BulkStateItem::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
BulkStateItem::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.BulkStateItem.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetStateResponse

// bytes data = 1;
inline void GetStateResponse::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetStateResponse::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetStateResponse.data)
  return _internal_data();
}
inline void GetStateResponse::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetStateResponse.data)
}
inline std::string* GetStateResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetStateResponse.data)
  return _internal_mutable_data();
}
inline const std::string& GetStateResponse::_internal_data() const {
  return data_.Get();
}
inline void GetStateResponse::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetStateResponse::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.GetStateResponse.data)
}
inline void GetStateResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetStateResponse.data)
}
inline void GetStateResponse::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetStateResponse.data)
}
inline std::string* GetStateResponse::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetStateResponse::release_data() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetStateResponse.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetStateResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetStateResponse.data)
}
inline std::string* GetStateResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.GetStateResponse.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetStateResponse::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetStateResponse.data)
}

// string etag = 2;
inline void GetStateResponse::clear_etag() {
  etag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetStateResponse::etag() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetStateResponse.etag)
  return _internal_etag();
}
inline void GetStateResponse::set_etag(const std::string& value) {
  _internal_set_etag(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetStateResponse.etag)
}
inline std::string* GetStateResponse::mutable_etag() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetStateResponse.etag)
  return _internal_mutable_etag();
}
inline const std::string& GetStateResponse::_internal_etag() const {
  return etag_.Get();
}
inline void GetStateResponse::_internal_set_etag(const std::string& value) {
  
  etag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetStateResponse::set_etag(std::string&& value) {
  
  etag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.GetStateResponse.etag)
}
inline void GetStateResponse::set_etag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  etag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetStateResponse.etag)
}
inline void GetStateResponse::set_etag(const char* value,
    size_t size) {
  
  etag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetStateResponse.etag)
}
inline std::string* GetStateResponse::_internal_mutable_etag() {
  
  return etag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetStateResponse::release_etag() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetStateResponse.etag)
  return etag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetStateResponse::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  etag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), etag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetStateResponse.etag)
}
inline std::string* GetStateResponse::unsafe_arena_release_etag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.GetStateResponse.etag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return etag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetStateResponse::unsafe_arena_set_allocated_etag(
    std::string* etag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (etag != nullptr) {
    
  } else {
    
  }
  etag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      etag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetStateResponse.etag)
}

// map<string, string> metadata = 3;
inline int GetStateResponse::_internal_metadata_size() const {
  return metadata_.size();
}
inline int GetStateResponse::metadata_size() const {
  return _internal_metadata_size();
}
inline void GetStateResponse::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetStateResponse::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetStateResponse::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.GetStateResponse.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetStateResponse::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetStateResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.GetStateResponse.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DeleteStateRequest

// string store_name = 1;
inline void DeleteStateRequest::clear_store_name() {
  store_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteStateRequest::store_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.DeleteStateRequest.store_name)
  return _internal_store_name();
}
inline void DeleteStateRequest::set_store_name(const std::string& value) {
  _internal_set_store_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.DeleteStateRequest.store_name)
}
inline std::string* DeleteStateRequest::mutable_store_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.DeleteStateRequest.store_name)
  return _internal_mutable_store_name();
}
inline const std::string& DeleteStateRequest::_internal_store_name() const {
  return store_name_.Get();
}
inline void DeleteStateRequest::_internal_set_store_name(const std::string& value) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteStateRequest::set_store_name(std::string&& value) {
  
  store_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.DeleteStateRequest.store_name)
}
inline void DeleteStateRequest::set_store_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.DeleteStateRequest.store_name)
}
inline void DeleteStateRequest::set_store_name(const char* value,
    size_t size) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.DeleteStateRequest.store_name)
}
inline std::string* DeleteStateRequest::_internal_mutable_store_name() {
  
  return store_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteStateRequest::release_store_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.DeleteStateRequest.store_name)
  return store_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteStateRequest::set_allocated_store_name(std::string* store_name) {
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), store_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.DeleteStateRequest.store_name)
}
inline std::string* DeleteStateRequest::unsafe_arena_release_store_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.DeleteStateRequest.store_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return store_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteStateRequest::unsafe_arena_set_allocated_store_name(
    std::string* store_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      store_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.DeleteStateRequest.store_name)
}

// string key = 2;
inline void DeleteStateRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteStateRequest::key() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.DeleteStateRequest.key)
  return _internal_key();
}
inline void DeleteStateRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.DeleteStateRequest.key)
}
inline std::string* DeleteStateRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.DeleteStateRequest.key)
  return _internal_mutable_key();
}
inline const std::string& DeleteStateRequest::_internal_key() const {
  return key_.Get();
}
inline void DeleteStateRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteStateRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.DeleteStateRequest.key)
}
inline void DeleteStateRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.DeleteStateRequest.key)
}
inline void DeleteStateRequest::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.DeleteStateRequest.key)
}
inline std::string* DeleteStateRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteStateRequest::release_key() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.DeleteStateRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteStateRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.DeleteStateRequest.key)
}
inline std::string* DeleteStateRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.DeleteStateRequest.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteStateRequest::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.DeleteStateRequest.key)
}

// .dapr.proto.common.v1.Etag etag = 3;
inline bool DeleteStateRequest::_internal_has_etag() const {
  return this != internal_default_instance() && etag_ != nullptr;
}
inline bool DeleteStateRequest::has_etag() const {
  return _internal_has_etag();
}
inline const ::dapr::proto::common::v1::Etag& DeleteStateRequest::_internal_etag() const {
  const ::dapr::proto::common::v1::Etag* p = etag_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dapr::proto::common::v1::Etag*>(
      &::dapr::proto::common::v1::_Etag_default_instance_);
}
inline const ::dapr::proto::common::v1::Etag& DeleteStateRequest::etag() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.DeleteStateRequest.etag)
  return _internal_etag();
}
inline void DeleteStateRequest::unsafe_arena_set_allocated_etag(
    ::dapr::proto::common::v1::Etag* etag) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(etag_);
  }
  etag_ = etag;
  if (etag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.DeleteStateRequest.etag)
}
inline ::dapr::proto::common::v1::Etag* DeleteStateRequest::release_etag() {
  auto temp = unsafe_arena_release_etag();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dapr::proto::common::v1::Etag* DeleteStateRequest::unsafe_arena_release_etag() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.DeleteStateRequest.etag)
  
  ::dapr::proto::common::v1::Etag* temp = etag_;
  etag_ = nullptr;
  return temp;
}
inline ::dapr::proto::common::v1::Etag* DeleteStateRequest::_internal_mutable_etag() {
  
  if (etag_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::common::v1::Etag>(GetArena());
    etag_ = p;
  }
  return etag_;
}
inline ::dapr::proto::common::v1::Etag* DeleteStateRequest::mutable_etag() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.DeleteStateRequest.etag)
  return _internal_mutable_etag();
}
inline void DeleteStateRequest::set_allocated_etag(::dapr::proto::common::v1::Etag* etag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(etag_);
  }
  if (etag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(etag)->GetArena();
    if (message_arena != submessage_arena) {
      etag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, etag, submessage_arena);
    }
    
  } else {
    
  }
  etag_ = etag;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.DeleteStateRequest.etag)
}

// .dapr.proto.common.v1.StateOptions options = 4;
inline bool DeleteStateRequest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool DeleteStateRequest::has_options() const {
  return _internal_has_options();
}
inline const ::dapr::proto::common::v1::StateOptions& DeleteStateRequest::_internal_options() const {
  const ::dapr::proto::common::v1::StateOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dapr::proto::common::v1::StateOptions*>(
      &::dapr::proto::common::v1::_StateOptions_default_instance_);
}
inline const ::dapr::proto::common::v1::StateOptions& DeleteStateRequest::options() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.DeleteStateRequest.options)
  return _internal_options();
}
inline void DeleteStateRequest::unsafe_arena_set_allocated_options(
    ::dapr::proto::common::v1::StateOptions* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.DeleteStateRequest.options)
}
inline ::dapr::proto::common::v1::StateOptions* DeleteStateRequest::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dapr::proto::common::v1::StateOptions* DeleteStateRequest::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.DeleteStateRequest.options)
  
  ::dapr::proto::common::v1::StateOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::dapr::proto::common::v1::StateOptions* DeleteStateRequest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::common::v1::StateOptions>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::dapr::proto::common::v1::StateOptions* DeleteStateRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.DeleteStateRequest.options)
  return _internal_mutable_options();
}
inline void DeleteStateRequest::set_allocated_options(::dapr::proto::common::v1::StateOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options)->GetArena();
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.DeleteStateRequest.options)
}

// map<string, string> metadata = 5;
inline int DeleteStateRequest::_internal_metadata_size() const {
  return metadata_.size();
}
inline int DeleteStateRequest::metadata_size() const {
  return _internal_metadata_size();
}
inline void DeleteStateRequest::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DeleteStateRequest::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DeleteStateRequest::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.DeleteStateRequest.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DeleteStateRequest::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DeleteStateRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.DeleteStateRequest.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// DeleteBulkStateRequest

// string store_name = 1;
inline void DeleteBulkStateRequest::clear_store_name() {
  store_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteBulkStateRequest::store_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.DeleteBulkStateRequest.store_name)
  return _internal_store_name();
}
inline void DeleteBulkStateRequest::set_store_name(const std::string& value) {
  _internal_set_store_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.DeleteBulkStateRequest.store_name)
}
inline std::string* DeleteBulkStateRequest::mutable_store_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.DeleteBulkStateRequest.store_name)
  return _internal_mutable_store_name();
}
inline const std::string& DeleteBulkStateRequest::_internal_store_name() const {
  return store_name_.Get();
}
inline void DeleteBulkStateRequest::_internal_set_store_name(const std::string& value) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteBulkStateRequest::set_store_name(std::string&& value) {
  
  store_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.DeleteBulkStateRequest.store_name)
}
inline void DeleteBulkStateRequest::set_store_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.DeleteBulkStateRequest.store_name)
}
inline void DeleteBulkStateRequest::set_store_name(const char* value,
    size_t size) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.DeleteBulkStateRequest.store_name)
}
inline std::string* DeleteBulkStateRequest::_internal_mutable_store_name() {
  
  return store_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteBulkStateRequest::release_store_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.DeleteBulkStateRequest.store_name)
  return store_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteBulkStateRequest::set_allocated_store_name(std::string* store_name) {
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), store_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.DeleteBulkStateRequest.store_name)
}
inline std::string* DeleteBulkStateRequest::unsafe_arena_release_store_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.DeleteBulkStateRequest.store_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return store_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteBulkStateRequest::unsafe_arena_set_allocated_store_name(
    std::string* store_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      store_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.DeleteBulkStateRequest.store_name)
}

// repeated .dapr.proto.common.v1.StateItem states = 2;
inline int DeleteBulkStateRequest::_internal_states_size() const {
  return states_.size();
}
inline int DeleteBulkStateRequest::states_size() const {
  return _internal_states_size();
}
inline ::dapr::proto::common::v1::StateItem* DeleteBulkStateRequest::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.DeleteBulkStateRequest.states)
  return states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::common::v1::StateItem >*
DeleteBulkStateRequest::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.DeleteBulkStateRequest.states)
  return &states_;
}
inline const ::dapr::proto::common::v1::StateItem& DeleteBulkStateRequest::_internal_states(int index) const {
  return states_.Get(index);
}
inline const ::dapr::proto::common::v1::StateItem& DeleteBulkStateRequest::states(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.DeleteBulkStateRequest.states)
  return _internal_states(index);
}
inline ::dapr::proto::common::v1::StateItem* DeleteBulkStateRequest::_internal_add_states() {
  return states_.Add();
}
inline ::dapr::proto::common::v1::StateItem* DeleteBulkStateRequest::add_states() {
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.DeleteBulkStateRequest.states)
  return _internal_add_states();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::common::v1::StateItem >&
DeleteBulkStateRequest::states() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.DeleteBulkStateRequest.states)
  return states_;
}

// -------------------------------------------------------------------

// SaveStateRequest

// string store_name = 1;
inline void SaveStateRequest::clear_store_name() {
  store_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SaveStateRequest::store_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SaveStateRequest.store_name)
  return _internal_store_name();
}
inline void SaveStateRequest::set_store_name(const std::string& value) {
  _internal_set_store_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SaveStateRequest.store_name)
}
inline std::string* SaveStateRequest::mutable_store_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SaveStateRequest.store_name)
  return _internal_mutable_store_name();
}
inline const std::string& SaveStateRequest::_internal_store_name() const {
  return store_name_.Get();
}
inline void SaveStateRequest::_internal_set_store_name(const std::string& value) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SaveStateRequest::set_store_name(std::string&& value) {
  
  store_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SaveStateRequest.store_name)
}
inline void SaveStateRequest::set_store_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SaveStateRequest.store_name)
}
inline void SaveStateRequest::set_store_name(const char* value,
    size_t size) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SaveStateRequest.store_name)
}
inline std::string* SaveStateRequest::_internal_mutable_store_name() {
  
  return store_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SaveStateRequest::release_store_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SaveStateRequest.store_name)
  return store_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SaveStateRequest::set_allocated_store_name(std::string* store_name) {
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), store_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SaveStateRequest.store_name)
}
inline std::string* SaveStateRequest::unsafe_arena_release_store_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SaveStateRequest.store_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return store_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SaveStateRequest::unsafe_arena_set_allocated_store_name(
    std::string* store_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      store_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SaveStateRequest.store_name)
}

// repeated .dapr.proto.common.v1.StateItem states = 2;
inline int SaveStateRequest::_internal_states_size() const {
  return states_.size();
}
inline int SaveStateRequest::states_size() const {
  return _internal_states_size();
}
inline ::dapr::proto::common::v1::StateItem* SaveStateRequest::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SaveStateRequest.states)
  return states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::common::v1::StateItem >*
SaveStateRequest::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.SaveStateRequest.states)
  return &states_;
}
inline const ::dapr::proto::common::v1::StateItem& SaveStateRequest::_internal_states(int index) const {
  return states_.Get(index);
}
inline const ::dapr::proto::common::v1::StateItem& SaveStateRequest::states(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SaveStateRequest.states)
  return _internal_states(index);
}
inline ::dapr::proto::common::v1::StateItem* SaveStateRequest::_internal_add_states() {
  return states_.Add();
}
inline ::dapr::proto::common::v1::StateItem* SaveStateRequest::add_states() {
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.SaveStateRequest.states)
  return _internal_add_states();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::common::v1::StateItem >&
SaveStateRequest::states() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.SaveStateRequest.states)
  return states_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// QueryStateRequest

// string store_name = 1[json_name = "storeName"];
inline void QueryStateRequest::clear_store_name() {
  store_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueryStateRequest::store_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.QueryStateRequest.store_name)
  return _internal_store_name();
}
inline void QueryStateRequest::set_store_name(const std::string& value) {
  _internal_set_store_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.QueryStateRequest.store_name)
}
inline std::string* QueryStateRequest::mutable_store_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.QueryStateRequest.store_name)
  return _internal_mutable_store_name();
}
inline const std::string& QueryStateRequest::_internal_store_name() const {
  return store_name_.Get();
}
inline void QueryStateRequest::_internal_set_store_name(const std::string& value) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueryStateRequest::set_store_name(std::string&& value) {
  
  store_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.QueryStateRequest.store_name)
}
inline void QueryStateRequest::set_store_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.QueryStateRequest.store_name)
}
inline void QueryStateRequest::set_store_name(const char* value,
    size_t size) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.QueryStateRequest.store_name)
}
inline std::string* QueryStateRequest::_internal_mutable_store_name() {
  
  return store_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueryStateRequest::release_store_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.QueryStateRequest.store_name)
  return store_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryStateRequest::set_allocated_store_name(std::string* store_name) {
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), store_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.QueryStateRequest.store_name)
}
inline std::string* QueryStateRequest::unsafe_arena_release_store_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.QueryStateRequest.store_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return store_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueryStateRequest::unsafe_arena_set_allocated_store_name(
    std::string* store_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      store_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.QueryStateRequest.store_name)
}

// string query = 2;
inline void QueryStateRequest::clear_query() {
  query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueryStateRequest::query() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.QueryStateRequest.query)
  return _internal_query();
}
inline void QueryStateRequest::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.QueryStateRequest.query)
}
inline std::string* QueryStateRequest::mutable_query() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.QueryStateRequest.query)
  return _internal_mutable_query();
}
inline const std::string& QueryStateRequest::_internal_query() const {
  return query_.Get();
}
inline void QueryStateRequest::_internal_set_query(const std::string& value) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueryStateRequest::set_query(std::string&& value) {
  
  query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.QueryStateRequest.query)
}
inline void QueryStateRequest::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.QueryStateRequest.query)
}
inline void QueryStateRequest::set_query(const char* value,
    size_t size) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.QueryStateRequest.query)
}
inline std::string* QueryStateRequest::_internal_mutable_query() {
  
  return query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueryStateRequest::release_query() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.QueryStateRequest.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryStateRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.QueryStateRequest.query)
}
inline std::string* QueryStateRequest::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.QueryStateRequest.query)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return query_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueryStateRequest::unsafe_arena_set_allocated_query(
    std::string* query) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (query != nullptr) {
    
  } else {
    
  }
  query_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      query, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.QueryStateRequest.query)
}

// map<string, string> metadata = 3;
inline int QueryStateRequest::_internal_metadata_size() const {
  return metadata_.size();
}
inline int QueryStateRequest::metadata_size() const {
  return _internal_metadata_size();
}
inline void QueryStateRequest::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
QueryStateRequest::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
QueryStateRequest::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.QueryStateRequest.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
QueryStateRequest::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
QueryStateRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.QueryStateRequest.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// QueryStateItem

// string key = 1;
inline void QueryStateItem::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueryStateItem::key() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.QueryStateItem.key)
  return _internal_key();
}
inline void QueryStateItem::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.QueryStateItem.key)
}
inline std::string* QueryStateItem::mutable_key() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.QueryStateItem.key)
  return _internal_mutable_key();
}
inline const std::string& QueryStateItem::_internal_key() const {
  return key_.Get();
}
inline void QueryStateItem::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueryStateItem::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.QueryStateItem.key)
}
inline void QueryStateItem::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.QueryStateItem.key)
}
inline void QueryStateItem::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.QueryStateItem.key)
}
inline std::string* QueryStateItem::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueryStateItem::release_key() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.QueryStateItem.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryStateItem::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.QueryStateItem.key)
}
inline std::string* QueryStateItem::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.QueryStateItem.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueryStateItem::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.QueryStateItem.key)
}

// bytes data = 2;
inline void QueryStateItem::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueryStateItem::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.QueryStateItem.data)
  return _internal_data();
}
inline void QueryStateItem::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.QueryStateItem.data)
}
inline std::string* QueryStateItem::mutable_data() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.QueryStateItem.data)
  return _internal_mutable_data();
}
inline const std::string& QueryStateItem::_internal_data() const {
  return data_.Get();
}
inline void QueryStateItem::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueryStateItem::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.QueryStateItem.data)
}
inline void QueryStateItem::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.QueryStateItem.data)
}
inline void QueryStateItem::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.QueryStateItem.data)
}
inline std::string* QueryStateItem::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueryStateItem::release_data() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.QueryStateItem.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryStateItem::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.QueryStateItem.data)
}
inline std::string* QueryStateItem::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.QueryStateItem.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueryStateItem::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.QueryStateItem.data)
}

// string etag = 3;
inline void QueryStateItem::clear_etag() {
  etag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueryStateItem::etag() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.QueryStateItem.etag)
  return _internal_etag();
}
inline void QueryStateItem::set_etag(const std::string& value) {
  _internal_set_etag(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.QueryStateItem.etag)
}
inline std::string* QueryStateItem::mutable_etag() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.QueryStateItem.etag)
  return _internal_mutable_etag();
}
inline const std::string& QueryStateItem::_internal_etag() const {
  return etag_.Get();
}
inline void QueryStateItem::_internal_set_etag(const std::string& value) {
  
  etag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueryStateItem::set_etag(std::string&& value) {
  
  etag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.QueryStateItem.etag)
}
inline void QueryStateItem::set_etag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  etag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.QueryStateItem.etag)
}
inline void QueryStateItem::set_etag(const char* value,
    size_t size) {
  
  etag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.QueryStateItem.etag)
}
inline std::string* QueryStateItem::_internal_mutable_etag() {
  
  return etag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueryStateItem::release_etag() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.QueryStateItem.etag)
  return etag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryStateItem::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  etag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), etag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.QueryStateItem.etag)
}
inline std::string* QueryStateItem::unsafe_arena_release_etag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.QueryStateItem.etag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return etag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueryStateItem::unsafe_arena_set_allocated_etag(
    std::string* etag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (etag != nullptr) {
    
  } else {
    
  }
  etag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      etag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.QueryStateItem.etag)
}

// string error = 4;
inline void QueryStateItem::clear_error() {
  error_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueryStateItem::error() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.QueryStateItem.error)
  return _internal_error();
}
inline void QueryStateItem::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.QueryStateItem.error)
}
inline std::string* QueryStateItem::mutable_error() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.QueryStateItem.error)
  return _internal_mutable_error();
}
inline const std::string& QueryStateItem::_internal_error() const {
  return error_.Get();
}
inline void QueryStateItem::_internal_set_error(const std::string& value) {
  
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueryStateItem::set_error(std::string&& value) {
  
  error_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.QueryStateItem.error)
}
inline void QueryStateItem::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.QueryStateItem.error)
}
inline void QueryStateItem::set_error(const char* value,
    size_t size) {
  
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.QueryStateItem.error)
}
inline std::string* QueryStateItem::_internal_mutable_error() {
  
  return error_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueryStateItem::release_error() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.QueryStateItem.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryStateItem::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.QueryStateItem.error)
}
inline std::string* QueryStateItem::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.QueryStateItem.error)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return error_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueryStateItem::unsafe_arena_set_allocated_error(
    std::string* error) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (error != nullptr) {
    
  } else {
    
  }
  error_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      error, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.QueryStateItem.error)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// QueryStateResponse

// repeated .dapr.proto.runtime.v1.QueryStateItem results = 1;
inline int QueryStateResponse::_internal_results_size() const {
  return results_.size();
}
inline int QueryStateResponse::results_size() const {
  return _internal_results_size();
}
inline void QueryStateResponse::clear_results() {
  results_.Clear();
}
inline ::dapr::proto::runtime::v1::QueryStateItem* QueryStateResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.QueryStateResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::QueryStateItem >*
QueryStateResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.QueryStateResponse.results)
  return &results_;
}
inline const ::dapr::proto::runtime::v1::QueryStateItem& QueryStateResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::dapr::proto::runtime::v1::QueryStateItem& QueryStateResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.QueryStateResponse.results)
  return _internal_results(index);
}
inline ::dapr::proto::runtime::v1::QueryStateItem* QueryStateResponse::_internal_add_results() {
  return results_.Add();
}
inline ::dapr::proto::runtime::v1::QueryStateItem* QueryStateResponse::add_results() {
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.QueryStateResponse.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::QueryStateItem >&
QueryStateResponse::results() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.QueryStateResponse.results)
  return results_;
}

// string token = 2;
inline void QueryStateResponse::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueryStateResponse::token() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.QueryStateResponse.token)
  return _internal_token();
}
inline void QueryStateResponse::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.QueryStateResponse.token)
}
inline std::string* QueryStateResponse::mutable_token() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.QueryStateResponse.token)
  return _internal_mutable_token();
}
inline const std::string& QueryStateResponse::_internal_token() const {
  return token_.Get();
}
inline void QueryStateResponse::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueryStateResponse::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.QueryStateResponse.token)
}
inline void QueryStateResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.QueryStateResponse.token)
}
inline void QueryStateResponse::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.QueryStateResponse.token)
}
inline std::string* QueryStateResponse::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueryStateResponse::release_token() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.QueryStateResponse.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryStateResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.QueryStateResponse.token)
}
inline std::string* QueryStateResponse::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.QueryStateResponse.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueryStateResponse::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.QueryStateResponse.token)
}

// map<string, string> metadata = 3;
inline int QueryStateResponse::_internal_metadata_size() const {
  return metadata_.size();
}
inline int QueryStateResponse::metadata_size() const {
  return _internal_metadata_size();
}
inline void QueryStateResponse::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
QueryStateResponse::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
QueryStateResponse::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.QueryStateResponse.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
QueryStateResponse::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
QueryStateResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.QueryStateResponse.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PublishEventRequest

// string pubsub_name = 1;
inline void PublishEventRequest::clear_pubsub_name() {
  pubsub_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PublishEventRequest::pubsub_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.PublishEventRequest.pubsub_name)
  return _internal_pubsub_name();
}
inline void PublishEventRequest::set_pubsub_name(const std::string& value) {
  _internal_set_pubsub_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.PublishEventRequest.pubsub_name)
}
inline std::string* PublishEventRequest::mutable_pubsub_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.PublishEventRequest.pubsub_name)
  return _internal_mutable_pubsub_name();
}
inline const std::string& PublishEventRequest::_internal_pubsub_name() const {
  return pubsub_name_.Get();
}
inline void PublishEventRequest::_internal_set_pubsub_name(const std::string& value) {
  
  pubsub_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PublishEventRequest::set_pubsub_name(std::string&& value) {
  
  pubsub_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.PublishEventRequest.pubsub_name)
}
inline void PublishEventRequest::set_pubsub_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubsub_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.PublishEventRequest.pubsub_name)
}
inline void PublishEventRequest::set_pubsub_name(const char* value,
    size_t size) {
  
  pubsub_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.PublishEventRequest.pubsub_name)
}
inline std::string* PublishEventRequest::_internal_mutable_pubsub_name() {
  
  return pubsub_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PublishEventRequest::release_pubsub_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.PublishEventRequest.pubsub_name)
  return pubsub_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishEventRequest::set_allocated_pubsub_name(std::string* pubsub_name) {
  if (pubsub_name != nullptr) {
    
  } else {
    
  }
  pubsub_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubsub_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.PublishEventRequest.pubsub_name)
}
inline std::string* PublishEventRequest::unsafe_arena_release_pubsub_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.PublishEventRequest.pubsub_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pubsub_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PublishEventRequest::unsafe_arena_set_allocated_pubsub_name(
    std::string* pubsub_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pubsub_name != nullptr) {
    
  } else {
    
  }
  pubsub_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pubsub_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.PublishEventRequest.pubsub_name)
}

// string topic = 2;
inline void PublishEventRequest::clear_topic() {
  topic_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PublishEventRequest::topic() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.PublishEventRequest.topic)
  return _internal_topic();
}
inline void PublishEventRequest::set_topic(const std::string& value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.PublishEventRequest.topic)
}
inline std::string* PublishEventRequest::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.PublishEventRequest.topic)
  return _internal_mutable_topic();
}
inline const std::string& PublishEventRequest::_internal_topic() const {
  return topic_.Get();
}
inline void PublishEventRequest::_internal_set_topic(const std::string& value) {
  
  topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PublishEventRequest::set_topic(std::string&& value) {
  
  topic_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.PublishEventRequest.topic)
}
inline void PublishEventRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.PublishEventRequest.topic)
}
inline void PublishEventRequest::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.PublishEventRequest.topic)
}
inline std::string* PublishEventRequest::_internal_mutable_topic() {
  
  return topic_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PublishEventRequest::release_topic() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.PublishEventRequest.topic)
  return topic_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishEventRequest::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.PublishEventRequest.topic)
}
inline std::string* PublishEventRequest::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.PublishEventRequest.topic)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return topic_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PublishEventRequest::unsafe_arena_set_allocated_topic(
    std::string* topic) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      topic, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.PublishEventRequest.topic)
}

// bytes data = 3;
inline void PublishEventRequest::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PublishEventRequest::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.PublishEventRequest.data)
  return _internal_data();
}
inline void PublishEventRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.PublishEventRequest.data)
}
inline std::string* PublishEventRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.PublishEventRequest.data)
  return _internal_mutable_data();
}
inline const std::string& PublishEventRequest::_internal_data() const {
  return data_.Get();
}
inline void PublishEventRequest::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PublishEventRequest::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.PublishEventRequest.data)
}
inline void PublishEventRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.PublishEventRequest.data)
}
inline void PublishEventRequest::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.PublishEventRequest.data)
}
inline std::string* PublishEventRequest::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PublishEventRequest::release_data() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.PublishEventRequest.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishEventRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.PublishEventRequest.data)
}
inline std::string* PublishEventRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.PublishEventRequest.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PublishEventRequest::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.PublishEventRequest.data)
}

// string data_content_type = 4;
inline void PublishEventRequest::clear_data_content_type() {
  data_content_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PublishEventRequest::data_content_type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.PublishEventRequest.data_content_type)
  return _internal_data_content_type();
}
inline void PublishEventRequest::set_data_content_type(const std::string& value) {
  _internal_set_data_content_type(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.PublishEventRequest.data_content_type)
}
inline std::string* PublishEventRequest::mutable_data_content_type() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.PublishEventRequest.data_content_type)
  return _internal_mutable_data_content_type();
}
inline const std::string& PublishEventRequest::_internal_data_content_type() const {
  return data_content_type_.Get();
}
inline void PublishEventRequest::_internal_set_data_content_type(const std::string& value) {
  
  data_content_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PublishEventRequest::set_data_content_type(std::string&& value) {
  
  data_content_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.PublishEventRequest.data_content_type)
}
inline void PublishEventRequest::set_data_content_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_content_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.PublishEventRequest.data_content_type)
}
inline void PublishEventRequest::set_data_content_type(const char* value,
    size_t size) {
  
  data_content_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.PublishEventRequest.data_content_type)
}
inline std::string* PublishEventRequest::_internal_mutable_data_content_type() {
  
  return data_content_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PublishEventRequest::release_data_content_type() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.PublishEventRequest.data_content_type)
  return data_content_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishEventRequest::set_allocated_data_content_type(std::string* data_content_type) {
  if (data_content_type != nullptr) {
    
  } else {
    
  }
  data_content_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_content_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.PublishEventRequest.data_content_type)
}
inline std::string* PublishEventRequest::unsafe_arena_release_data_content_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.PublishEventRequest.data_content_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_content_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PublishEventRequest::unsafe_arena_set_allocated_data_content_type(
    std::string* data_content_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data_content_type != nullptr) {
    
  } else {
    
  }
  data_content_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data_content_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.PublishEventRequest.data_content_type)
}

// map<string, string> metadata = 5;
inline int PublishEventRequest::_internal_metadata_size() const {
  return metadata_.size();
}
inline int PublishEventRequest::metadata_size() const {
  return _internal_metadata_size();
}
inline void PublishEventRequest::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PublishEventRequest::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PublishEventRequest::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.PublishEventRequest.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PublishEventRequest::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PublishEventRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.PublishEventRequest.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BulkPublishRequest

// string pubsub_name = 1;
inline void BulkPublishRequest::clear_pubsub_name() {
  pubsub_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BulkPublishRequest::pubsub_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BulkPublishRequest.pubsub_name)
  return _internal_pubsub_name();
}
inline void BulkPublishRequest::set_pubsub_name(const std::string& value) {
  _internal_set_pubsub_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BulkPublishRequest.pubsub_name)
}
inline std::string* BulkPublishRequest::mutable_pubsub_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BulkPublishRequest.pubsub_name)
  return _internal_mutable_pubsub_name();
}
inline const std::string& BulkPublishRequest::_internal_pubsub_name() const {
  return pubsub_name_.Get();
}
inline void BulkPublishRequest::_internal_set_pubsub_name(const std::string& value) {
  
  pubsub_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BulkPublishRequest::set_pubsub_name(std::string&& value) {
  
  pubsub_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.BulkPublishRequest.pubsub_name)
}
inline void BulkPublishRequest::set_pubsub_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubsub_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.BulkPublishRequest.pubsub_name)
}
inline void BulkPublishRequest::set_pubsub_name(const char* value,
    size_t size) {
  
  pubsub_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.BulkPublishRequest.pubsub_name)
}
inline std::string* BulkPublishRequest::_internal_mutable_pubsub_name() {
  
  return pubsub_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BulkPublishRequest::release_pubsub_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.BulkPublishRequest.pubsub_name)
  return pubsub_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BulkPublishRequest::set_allocated_pubsub_name(std::string* pubsub_name) {
  if (pubsub_name != nullptr) {
    
  } else {
    
  }
  pubsub_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubsub_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.BulkPublishRequest.pubsub_name)
}
inline std::string* BulkPublishRequest::unsafe_arena_release_pubsub_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.BulkPublishRequest.pubsub_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pubsub_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BulkPublishRequest::unsafe_arena_set_allocated_pubsub_name(
    std::string* pubsub_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pubsub_name != nullptr) {
    
  } else {
    
  }
  pubsub_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pubsub_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.BulkPublishRequest.pubsub_name)
}

// string topic = 2;
inline void BulkPublishRequest::clear_topic() {
  topic_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BulkPublishRequest::topic() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BulkPublishRequest.topic)
  return _internal_topic();
}
inline void BulkPublishRequest::set_topic(const std::string& value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BulkPublishRequest.topic)
}
inline std::string* BulkPublishRequest::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BulkPublishRequest.topic)
  return _internal_mutable_topic();
}
inline const std::string& BulkPublishRequest::_internal_topic() const {
  return topic_.Get();
}
inline void BulkPublishRequest::_internal_set_topic(const std::string& value) {
  
  topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BulkPublishRequest::set_topic(std::string&& value) {
  
  topic_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.BulkPublishRequest.topic)
}
inline void BulkPublishRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.BulkPublishRequest.topic)
}
inline void BulkPublishRequest::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.BulkPublishRequest.topic)
}
inline std::string* BulkPublishRequest::_internal_mutable_topic() {
  
  return topic_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BulkPublishRequest::release_topic() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.BulkPublishRequest.topic)
  return topic_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BulkPublishRequest::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.BulkPublishRequest.topic)
}
inline std::string* BulkPublishRequest::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.BulkPublishRequest.topic)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return topic_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BulkPublishRequest::unsafe_arena_set_allocated_topic(
    std::string* topic) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      topic, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.BulkPublishRequest.topic)
}

// repeated .dapr.proto.runtime.v1.BulkPublishRequestEntry entries = 3;
inline int BulkPublishRequest::_internal_entries_size() const {
  return entries_.size();
}
inline int BulkPublishRequest::entries_size() const {
  return _internal_entries_size();
}
inline void BulkPublishRequest::clear_entries() {
  entries_.Clear();
}
inline ::dapr::proto::runtime::v1::BulkPublishRequestEntry* BulkPublishRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BulkPublishRequest.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::BulkPublishRequestEntry >*
BulkPublishRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.BulkPublishRequest.entries)
  return &entries_;
}
inline const ::dapr::proto::runtime::v1::BulkPublishRequestEntry& BulkPublishRequest::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::dapr::proto::runtime::v1::BulkPublishRequestEntry& BulkPublishRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BulkPublishRequest.entries)
  return _internal_entries(index);
}
inline ::dapr::proto::runtime::v1::BulkPublishRequestEntry* BulkPublishRequest::_internal_add_entries() {
  return entries_.Add();
}
inline ::dapr::proto::runtime::v1::BulkPublishRequestEntry* BulkPublishRequest::add_entries() {
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.BulkPublishRequest.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::BulkPublishRequestEntry >&
BulkPublishRequest::entries() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.BulkPublishRequest.entries)
  return entries_;
}

// map<string, string> metadata = 4;
inline int BulkPublishRequest::_internal_metadata_size() const {
  return metadata_.size();
}
inline int BulkPublishRequest::metadata_size() const {
  return _internal_metadata_size();
}
inline void BulkPublishRequest::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
BulkPublishRequest::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
BulkPublishRequest::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.BulkPublishRequest.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
BulkPublishRequest::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
BulkPublishRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.BulkPublishRequest.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BulkPublishRequestEntry

// string entry_id = 1;
inline void BulkPublishRequestEntry::clear_entry_id() {
  entry_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BulkPublishRequestEntry::entry_id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BulkPublishRequestEntry.entry_id)
  return _internal_entry_id();
}
inline void BulkPublishRequestEntry::set_entry_id(const std::string& value) {
  _internal_set_entry_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BulkPublishRequestEntry.entry_id)
}
inline std::string* BulkPublishRequestEntry::mutable_entry_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BulkPublishRequestEntry.entry_id)
  return _internal_mutable_entry_id();
}
inline const std::string& BulkPublishRequestEntry::_internal_entry_id() const {
  return entry_id_.Get();
}
inline void BulkPublishRequestEntry::_internal_set_entry_id(const std::string& value) {
  
  entry_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BulkPublishRequestEntry::set_entry_id(std::string&& value) {
  
  entry_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.BulkPublishRequestEntry.entry_id)
}
inline void BulkPublishRequestEntry::set_entry_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entry_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.BulkPublishRequestEntry.entry_id)
}
inline void BulkPublishRequestEntry::set_entry_id(const char* value,
    size_t size) {
  
  entry_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.BulkPublishRequestEntry.entry_id)
}
inline std::string* BulkPublishRequestEntry::_internal_mutable_entry_id() {
  
  return entry_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BulkPublishRequestEntry::release_entry_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.BulkPublishRequestEntry.entry_id)
  return entry_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BulkPublishRequestEntry::set_allocated_entry_id(std::string* entry_id) {
  if (entry_id != nullptr) {
    
  } else {
    
  }
  entry_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entry_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.BulkPublishRequestEntry.entry_id)
}
inline std::string* BulkPublishRequestEntry::unsafe_arena_release_entry_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.BulkPublishRequestEntry.entry_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return entry_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BulkPublishRequestEntry::unsafe_arena_set_allocated_entry_id(
    std::string* entry_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (entry_id != nullptr) {
    
  } else {
    
  }
  entry_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      entry_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.BulkPublishRequestEntry.entry_id)
}

// bytes event = 2;
inline void BulkPublishRequestEntry::clear_event() {
  event_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BulkPublishRequestEntry::event() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BulkPublishRequestEntry.event)
  return _internal_event();
}
inline void BulkPublishRequestEntry::set_event(const std::string& value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BulkPublishRequestEntry.event)
}
inline std::string* BulkPublishRequestEntry::mutable_event() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BulkPublishRequestEntry.event)
  return _internal_mutable_event();
}
inline const std::string& BulkPublishRequestEntry::_internal_event() const {
  return event_.Get();
}
inline void BulkPublishRequestEntry::_internal_set_event(const std::string& value) {
  
  event_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BulkPublishRequestEntry::set_event(std::string&& value) {
  
  event_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.BulkPublishRequestEntry.event)
}
inline void BulkPublishRequestEntry::set_event(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.BulkPublishRequestEntry.event)
}
inline void BulkPublishRequestEntry::set_event(const void* value,
    size_t size) {
  
  event_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.BulkPublishRequestEntry.event)
}
inline std::string* BulkPublishRequestEntry::_internal_mutable_event() {
  
  return event_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BulkPublishRequestEntry::release_event() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.BulkPublishRequestEntry.event)
  return event_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BulkPublishRequestEntry::set_allocated_event(std::string* event) {
  if (event != nullptr) {
    
  } else {
    
  }
  event_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.BulkPublishRequestEntry.event)
}
inline std::string* BulkPublishRequestEntry::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.BulkPublishRequestEntry.event)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return event_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BulkPublishRequestEntry::unsafe_arena_set_allocated_event(
    std::string* event) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (event != nullptr) {
    
  } else {
    
  }
  event_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      event, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.BulkPublishRequestEntry.event)
}

// string content_type = 3;
inline void BulkPublishRequestEntry::clear_content_type() {
  content_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BulkPublishRequestEntry::content_type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BulkPublishRequestEntry.content_type)
  return _internal_content_type();
}
inline void BulkPublishRequestEntry::set_content_type(const std::string& value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BulkPublishRequestEntry.content_type)
}
inline std::string* BulkPublishRequestEntry::mutable_content_type() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BulkPublishRequestEntry.content_type)
  return _internal_mutable_content_type();
}
inline const std::string& BulkPublishRequestEntry::_internal_content_type() const {
  return content_type_.Get();
}
inline void BulkPublishRequestEntry::_internal_set_content_type(const std::string& value) {
  
  content_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BulkPublishRequestEntry::set_content_type(std::string&& value) {
  
  content_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.BulkPublishRequestEntry.content_type)
}
inline void BulkPublishRequestEntry::set_content_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.BulkPublishRequestEntry.content_type)
}
inline void BulkPublishRequestEntry::set_content_type(const char* value,
    size_t size) {
  
  content_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.BulkPublishRequestEntry.content_type)
}
inline std::string* BulkPublishRequestEntry::_internal_mutable_content_type() {
  
  return content_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BulkPublishRequestEntry::release_content_type() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.BulkPublishRequestEntry.content_type)
  return content_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BulkPublishRequestEntry::set_allocated_content_type(std::string* content_type) {
  if (content_type != nullptr) {
    
  } else {
    
  }
  content_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.BulkPublishRequestEntry.content_type)
}
inline std::string* BulkPublishRequestEntry::unsafe_arena_release_content_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.BulkPublishRequestEntry.content_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return content_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BulkPublishRequestEntry::unsafe_arena_set_allocated_content_type(
    std::string* content_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (content_type != nullptr) {
    
  } else {
    
  }
  content_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      content_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.BulkPublishRequestEntry.content_type)
}

// map<string, string> metadata = 4;
inline int BulkPublishRequestEntry::_internal_metadata_size() const {
  return metadata_.size();
}
inline int BulkPublishRequestEntry::metadata_size() const {
  return _internal_metadata_size();
}
inline void BulkPublishRequestEntry::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
BulkPublishRequestEntry::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
BulkPublishRequestEntry::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.BulkPublishRequestEntry.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
BulkPublishRequestEntry::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
BulkPublishRequestEntry::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.BulkPublishRequestEntry.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// BulkPublishResponse

// repeated .dapr.proto.runtime.v1.BulkPublishResponseFailedEntry failedEntries = 1;
inline int BulkPublishResponse::_internal_failedentries_size() const {
  return failedentries_.size();
}
inline int BulkPublishResponse::failedentries_size() const {
  return _internal_failedentries_size();
}
inline void BulkPublishResponse::clear_failedentries() {
  failedentries_.Clear();
}
inline ::dapr::proto::runtime::v1::BulkPublishResponseFailedEntry* BulkPublishResponse::mutable_failedentries(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BulkPublishResponse.failedEntries)
  return failedentries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::BulkPublishResponseFailedEntry >*
BulkPublishResponse::mutable_failedentries() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.BulkPublishResponse.failedEntries)
  return &failedentries_;
}
inline const ::dapr::proto::runtime::v1::BulkPublishResponseFailedEntry& BulkPublishResponse::_internal_failedentries(int index) const {
  return failedentries_.Get(index);
}
inline const ::dapr::proto::runtime::v1::BulkPublishResponseFailedEntry& BulkPublishResponse::failedentries(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BulkPublishResponse.failedEntries)
  return _internal_failedentries(index);
}
inline ::dapr::proto::runtime::v1::BulkPublishResponseFailedEntry* BulkPublishResponse::_internal_add_failedentries() {
  return failedentries_.Add();
}
inline ::dapr::proto::runtime::v1::BulkPublishResponseFailedEntry* BulkPublishResponse::add_failedentries() {
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.BulkPublishResponse.failedEntries)
  return _internal_add_failedentries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::BulkPublishResponseFailedEntry >&
BulkPublishResponse::failedentries() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.BulkPublishResponse.failedEntries)
  return failedentries_;
}

// -------------------------------------------------------------------

// BulkPublishResponseFailedEntry

// string entry_id = 1;
inline void BulkPublishResponseFailedEntry::clear_entry_id() {
  entry_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BulkPublishResponseFailedEntry::entry_id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BulkPublishResponseFailedEntry.entry_id)
  return _internal_entry_id();
}
inline void BulkPublishResponseFailedEntry::set_entry_id(const std::string& value) {
  _internal_set_entry_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BulkPublishResponseFailedEntry.entry_id)
}
inline std::string* BulkPublishResponseFailedEntry::mutable_entry_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BulkPublishResponseFailedEntry.entry_id)
  return _internal_mutable_entry_id();
}
inline const std::string& BulkPublishResponseFailedEntry::_internal_entry_id() const {
  return entry_id_.Get();
}
inline void BulkPublishResponseFailedEntry::_internal_set_entry_id(const std::string& value) {
  
  entry_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BulkPublishResponseFailedEntry::set_entry_id(std::string&& value) {
  
  entry_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.BulkPublishResponseFailedEntry.entry_id)
}
inline void BulkPublishResponseFailedEntry::set_entry_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entry_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.BulkPublishResponseFailedEntry.entry_id)
}
inline void BulkPublishResponseFailedEntry::set_entry_id(const char* value,
    size_t size) {
  
  entry_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.BulkPublishResponseFailedEntry.entry_id)
}
inline std::string* BulkPublishResponseFailedEntry::_internal_mutable_entry_id() {
  
  return entry_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BulkPublishResponseFailedEntry::release_entry_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.BulkPublishResponseFailedEntry.entry_id)
  return entry_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BulkPublishResponseFailedEntry::set_allocated_entry_id(std::string* entry_id) {
  if (entry_id != nullptr) {
    
  } else {
    
  }
  entry_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entry_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.BulkPublishResponseFailedEntry.entry_id)
}
inline std::string* BulkPublishResponseFailedEntry::unsafe_arena_release_entry_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.BulkPublishResponseFailedEntry.entry_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return entry_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BulkPublishResponseFailedEntry::unsafe_arena_set_allocated_entry_id(
    std::string* entry_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (entry_id != nullptr) {
    
  } else {
    
  }
  entry_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      entry_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.BulkPublishResponseFailedEntry.entry_id)
}

// string error = 2;
inline void BulkPublishResponseFailedEntry::clear_error() {
  error_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BulkPublishResponseFailedEntry::error() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BulkPublishResponseFailedEntry.error)
  return _internal_error();
}
inline void BulkPublishResponseFailedEntry::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BulkPublishResponseFailedEntry.error)
}
inline std::string* BulkPublishResponseFailedEntry::mutable_error() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BulkPublishResponseFailedEntry.error)
  return _internal_mutable_error();
}
inline const std::string& BulkPublishResponseFailedEntry::_internal_error() const {
  return error_.Get();
}
inline void BulkPublishResponseFailedEntry::_internal_set_error(const std::string& value) {
  
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BulkPublishResponseFailedEntry::set_error(std::string&& value) {
  
  error_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.BulkPublishResponseFailedEntry.error)
}
inline void BulkPublishResponseFailedEntry::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.BulkPublishResponseFailedEntry.error)
}
inline void BulkPublishResponseFailedEntry::set_error(const char* value,
    size_t size) {
  
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.BulkPublishResponseFailedEntry.error)
}
inline std::string* BulkPublishResponseFailedEntry::_internal_mutable_error() {
  
  return error_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BulkPublishResponseFailedEntry::release_error() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.BulkPublishResponseFailedEntry.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BulkPublishResponseFailedEntry::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.BulkPublishResponseFailedEntry.error)
}
inline std::string* BulkPublishResponseFailedEntry::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.BulkPublishResponseFailedEntry.error)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return error_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BulkPublishResponseFailedEntry::unsafe_arena_set_allocated_error(
    std::string* error) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (error != nullptr) {
    
  } else {
    
  }
  error_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      error, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.BulkPublishResponseFailedEntry.error)
}

// -------------------------------------------------------------------

// SubscribeTopicEventsRequestAlpha1

// .dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1 initial_request = 1;
inline bool SubscribeTopicEventsRequestAlpha1::_internal_has_initial_request() const {
  return subscribe_topic_events_request_type_case() == kInitialRequest;
}
inline bool SubscribeTopicEventsRequestAlpha1::has_initial_request() const {
  return _internal_has_initial_request();
}
inline void SubscribeTopicEventsRequestAlpha1::set_has_initial_request() {
  _oneof_case_[0] = kInitialRequest;
}
inline void SubscribeTopicEventsRequestAlpha1::clear_initial_request() {
  if (_internal_has_initial_request()) {
    if (GetArena() == nullptr) {
      delete subscribe_topic_events_request_type_.initial_request_;
    }
    clear_has_subscribe_topic_events_request_type();
  }
}
inline ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1* SubscribeTopicEventsRequestAlpha1::release_initial_request() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubscribeTopicEventsRequestAlpha1.initial_request)
  if (_internal_has_initial_request()) {
    clear_has_subscribe_topic_events_request_type();
      ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1* temp = subscribe_topic_events_request_type_.initial_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    subscribe_topic_events_request_type_.initial_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1& SubscribeTopicEventsRequestAlpha1::_internal_initial_request() const {
  return _internal_has_initial_request()
      ? *subscribe_topic_events_request_type_.initial_request_
      : *reinterpret_cast< ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1*>(&::dapr::proto::runtime::v1::_SubscribeTopicEventsRequestInitialAlpha1_default_instance_);
}
inline const ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1& SubscribeTopicEventsRequestAlpha1::initial_request() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubscribeTopicEventsRequestAlpha1.initial_request)
  return _internal_initial_request();
}
inline ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1* SubscribeTopicEventsRequestAlpha1::unsafe_arena_release_initial_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubscribeTopicEventsRequestAlpha1.initial_request)
  if (_internal_has_initial_request()) {
    clear_has_subscribe_topic_events_request_type();
    ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1* temp = subscribe_topic_events_request_type_.initial_request_;
    subscribe_topic_events_request_type_.initial_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubscribeTopicEventsRequestAlpha1::unsafe_arena_set_allocated_initial_request(::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1* initial_request) {
  clear_subscribe_topic_events_request_type();
  if (initial_request) {
    set_has_initial_request();
    subscribe_topic_events_request_type_.initial_request_ = initial_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubscribeTopicEventsRequestAlpha1.initial_request)
}
inline ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1* SubscribeTopicEventsRequestAlpha1::_internal_mutable_initial_request() {
  if (!_internal_has_initial_request()) {
    clear_subscribe_topic_events_request_type();
    set_has_initial_request();
    subscribe_topic_events_request_type_.initial_request_ = CreateMaybeMessage< ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1 >(GetArena());
  }
  return subscribe_topic_events_request_type_.initial_request_;
}
inline ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestInitialAlpha1* SubscribeTopicEventsRequestAlpha1::mutable_initial_request() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubscribeTopicEventsRequestAlpha1.initial_request)
  return _internal_mutable_initial_request();
}

// .dapr.proto.runtime.v1.SubscribeTopicEventsRequestProcessedAlpha1 event_processed = 2;
inline bool SubscribeTopicEventsRequestAlpha1::_internal_has_event_processed() const {
  return subscribe_topic_events_request_type_case() == kEventProcessed;
}
inline bool SubscribeTopicEventsRequestAlpha1::has_event_processed() const {
  return _internal_has_event_processed();
}
inline void SubscribeTopicEventsRequestAlpha1::set_has_event_processed() {
  _oneof_case_[0] = kEventProcessed;
}
inline void SubscribeTopicEventsRequestAlpha1::clear_event_processed() {
  if (_internal_has_event_processed()) {
    if (GetArena() == nullptr) {
      delete subscribe_topic_events_request_type_.event_processed_;
    }
    clear_has_subscribe_topic_events_request_type();
  }
}
inline ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestProcessedAlpha1* SubscribeTopicEventsRequestAlpha1::release_event_processed() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubscribeTopicEventsRequestAlpha1.event_processed)
  if (_internal_has_event_processed()) {
    clear_has_subscribe_topic_events_request_type();
      ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestProcessedAlpha1* temp = subscribe_topic_events_request_type_.event_processed_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    subscribe_topic_events_request_type_.event_processed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestProcessedAlpha1& SubscribeTopicEventsRequestAlpha1::_internal_event_processed() const {
  return _internal_has_event_processed()
      ? *subscribe_topic_events_request_type_.event_processed_
      : *reinterpret_cast< ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestProcessedAlpha1*>(&::dapr::proto::runtime::v1::_SubscribeTopicEventsRequestProcessedAlpha1_default_instance_);
}
inline const ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestProcessedAlpha1& SubscribeTopicEventsRequestAlpha1::event_processed() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubscribeTopicEventsRequestAlpha1.event_processed)
  return _internal_event_processed();
}
inline ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestProcessedAlpha1* SubscribeTopicEventsRequestAlpha1::unsafe_arena_release_event_processed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubscribeTopicEventsRequestAlpha1.event_processed)
  if (_internal_has_event_processed()) {
    clear_has_subscribe_topic_events_request_type();
    ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestProcessedAlpha1* temp = subscribe_topic_events_request_type_.event_processed_;
    subscribe_topic_events_request_type_.event_processed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubscribeTopicEventsRequestAlpha1::unsafe_arena_set_allocated_event_processed(::dapr::proto::runtime::v1::SubscribeTopicEventsRequestProcessedAlpha1* event_processed) {
  clear_subscribe_topic_events_request_type();
  if (event_processed) {
    set_has_event_processed();
    subscribe_topic_events_request_type_.event_processed_ = event_processed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubscribeTopicEventsRequestAlpha1.event_processed)
}
inline ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestProcessedAlpha1* SubscribeTopicEventsRequestAlpha1::_internal_mutable_event_processed() {
  if (!_internal_has_event_processed()) {
    clear_subscribe_topic_events_request_type();
    set_has_event_processed();
    subscribe_topic_events_request_type_.event_processed_ = CreateMaybeMessage< ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestProcessedAlpha1 >(GetArena());
  }
  return subscribe_topic_events_request_type_.event_processed_;
}
inline ::dapr::proto::runtime::v1::SubscribeTopicEventsRequestProcessedAlpha1* SubscribeTopicEventsRequestAlpha1::mutable_event_processed() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubscribeTopicEventsRequestAlpha1.event_processed)
  return _internal_mutable_event_processed();
}

inline bool SubscribeTopicEventsRequestAlpha1::has_subscribe_topic_events_request_type() const {
  return subscribe_topic_events_request_type_case() != SUBSCRIBE_TOPIC_EVENTS_REQUEST_TYPE_NOT_SET;
}
inline void SubscribeTopicEventsRequestAlpha1::clear_has_subscribe_topic_events_request_type() {
  _oneof_case_[0] = SUBSCRIBE_TOPIC_EVENTS_REQUEST_TYPE_NOT_SET;
}
inline SubscribeTopicEventsRequestAlpha1::SubscribeTopicEventsRequestTypeCase SubscribeTopicEventsRequestAlpha1::subscribe_topic_events_request_type_case() const {
  return SubscribeTopicEventsRequestAlpha1::SubscribeTopicEventsRequestTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SubscribeTopicEventsRequestInitialAlpha1

// string pubsub_name = 1;
inline void SubscribeTopicEventsRequestInitialAlpha1::clear_pubsub_name() {
  pubsub_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscribeTopicEventsRequestInitialAlpha1::pubsub_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.pubsub_name)
  return _internal_pubsub_name();
}
inline void SubscribeTopicEventsRequestInitialAlpha1::set_pubsub_name(const std::string& value) {
  _internal_set_pubsub_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.pubsub_name)
}
inline std::string* SubscribeTopicEventsRequestInitialAlpha1::mutable_pubsub_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.pubsub_name)
  return _internal_mutable_pubsub_name();
}
inline const std::string& SubscribeTopicEventsRequestInitialAlpha1::_internal_pubsub_name() const {
  return pubsub_name_.Get();
}
inline void SubscribeTopicEventsRequestInitialAlpha1::_internal_set_pubsub_name(const std::string& value) {
  
  pubsub_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscribeTopicEventsRequestInitialAlpha1::set_pubsub_name(std::string&& value) {
  
  pubsub_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.pubsub_name)
}
inline void SubscribeTopicEventsRequestInitialAlpha1::set_pubsub_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubsub_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.pubsub_name)
}
inline void SubscribeTopicEventsRequestInitialAlpha1::set_pubsub_name(const char* value,
    size_t size) {
  
  pubsub_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.pubsub_name)
}
inline std::string* SubscribeTopicEventsRequestInitialAlpha1::_internal_mutable_pubsub_name() {
  
  return pubsub_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscribeTopicEventsRequestInitialAlpha1::release_pubsub_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.pubsub_name)
  return pubsub_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscribeTopicEventsRequestInitialAlpha1::set_allocated_pubsub_name(std::string* pubsub_name) {
  if (pubsub_name != nullptr) {
    
  } else {
    
  }
  pubsub_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubsub_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.pubsub_name)
}
inline std::string* SubscribeTopicEventsRequestInitialAlpha1::unsafe_arena_release_pubsub_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.pubsub_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pubsub_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscribeTopicEventsRequestInitialAlpha1::unsafe_arena_set_allocated_pubsub_name(
    std::string* pubsub_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pubsub_name != nullptr) {
    
  } else {
    
  }
  pubsub_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pubsub_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.pubsub_name)
}

// string topic = 2;
inline void SubscribeTopicEventsRequestInitialAlpha1::clear_topic() {
  topic_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscribeTopicEventsRequestInitialAlpha1::topic() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.topic)
  return _internal_topic();
}
inline void SubscribeTopicEventsRequestInitialAlpha1::set_topic(const std::string& value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.topic)
}
inline std::string* SubscribeTopicEventsRequestInitialAlpha1::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.topic)
  return _internal_mutable_topic();
}
inline const std::string& SubscribeTopicEventsRequestInitialAlpha1::_internal_topic() const {
  return topic_.Get();
}
inline void SubscribeTopicEventsRequestInitialAlpha1::_internal_set_topic(const std::string& value) {
  
  topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscribeTopicEventsRequestInitialAlpha1::set_topic(std::string&& value) {
  
  topic_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.topic)
}
inline void SubscribeTopicEventsRequestInitialAlpha1::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.topic)
}
inline void SubscribeTopicEventsRequestInitialAlpha1::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.topic)
}
inline std::string* SubscribeTopicEventsRequestInitialAlpha1::_internal_mutable_topic() {
  
  return topic_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscribeTopicEventsRequestInitialAlpha1::release_topic() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.topic)
  return topic_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscribeTopicEventsRequestInitialAlpha1::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.topic)
}
inline std::string* SubscribeTopicEventsRequestInitialAlpha1::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.topic)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return topic_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscribeTopicEventsRequestInitialAlpha1::unsafe_arena_set_allocated_topic(
    std::string* topic) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      topic, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.topic)
}

// map<string, string> metadata = 3;
inline int SubscribeTopicEventsRequestInitialAlpha1::_internal_metadata_size() const {
  return metadata_.size();
}
inline int SubscribeTopicEventsRequestInitialAlpha1::metadata_size() const {
  return _internal_metadata_size();
}
inline void SubscribeTopicEventsRequestInitialAlpha1::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SubscribeTopicEventsRequestInitialAlpha1::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SubscribeTopicEventsRequestInitialAlpha1::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SubscribeTopicEventsRequestInitialAlpha1::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SubscribeTopicEventsRequestInitialAlpha1::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.metadata)
  return _internal_mutable_metadata();
}

// string dead_letter_topic = 4;
inline bool SubscribeTopicEventsRequestInitialAlpha1::_internal_has_dead_letter_topic() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SubscribeTopicEventsRequestInitialAlpha1::has_dead_letter_topic() const {
  return _internal_has_dead_letter_topic();
}
inline void SubscribeTopicEventsRequestInitialAlpha1::clear_dead_letter_topic() {
  dead_letter_topic_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SubscribeTopicEventsRequestInitialAlpha1::dead_letter_topic() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.dead_letter_topic)
  return _internal_dead_letter_topic();
}
inline void SubscribeTopicEventsRequestInitialAlpha1::set_dead_letter_topic(const std::string& value) {
  _internal_set_dead_letter_topic(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.dead_letter_topic)
}
inline std::string* SubscribeTopicEventsRequestInitialAlpha1::mutable_dead_letter_topic() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.dead_letter_topic)
  return _internal_mutable_dead_letter_topic();
}
inline const std::string& SubscribeTopicEventsRequestInitialAlpha1::_internal_dead_letter_topic() const {
  return dead_letter_topic_.Get();
}
inline void SubscribeTopicEventsRequestInitialAlpha1::_internal_set_dead_letter_topic(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  dead_letter_topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscribeTopicEventsRequestInitialAlpha1::set_dead_letter_topic(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  dead_letter_topic_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.dead_letter_topic)
}
inline void SubscribeTopicEventsRequestInitialAlpha1::set_dead_letter_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  dead_letter_topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.dead_letter_topic)
}
inline void SubscribeTopicEventsRequestInitialAlpha1::set_dead_letter_topic(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  dead_letter_topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.dead_letter_topic)
}
inline std::string* SubscribeTopicEventsRequestInitialAlpha1::_internal_mutable_dead_letter_topic() {
  _has_bits_[0] |= 0x00000001u;
  return dead_letter_topic_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscribeTopicEventsRequestInitialAlpha1::release_dead_letter_topic() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.dead_letter_topic)
  if (!_internal_has_dead_letter_topic()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return dead_letter_topic_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscribeTopicEventsRequestInitialAlpha1::set_allocated_dead_letter_topic(std::string* dead_letter_topic) {
  if (dead_letter_topic != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dead_letter_topic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dead_letter_topic,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.dead_letter_topic)
}
inline std::string* SubscribeTopicEventsRequestInitialAlpha1::unsafe_arena_release_dead_letter_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.dead_letter_topic)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return dead_letter_topic_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscribeTopicEventsRequestInitialAlpha1::unsafe_arena_set_allocated_dead_letter_topic(
    std::string* dead_letter_topic) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dead_letter_topic != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dead_letter_topic_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dead_letter_topic, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubscribeTopicEventsRequestInitialAlpha1.dead_letter_topic)
}

// -------------------------------------------------------------------

// SubscribeTopicEventsRequestProcessedAlpha1

// string id = 1;
inline void SubscribeTopicEventsRequestProcessedAlpha1::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscribeTopicEventsRequestProcessedAlpha1::id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubscribeTopicEventsRequestProcessedAlpha1.id)
  return _internal_id();
}
inline void SubscribeTopicEventsRequestProcessedAlpha1::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubscribeTopicEventsRequestProcessedAlpha1.id)
}
inline std::string* SubscribeTopicEventsRequestProcessedAlpha1::mutable_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubscribeTopicEventsRequestProcessedAlpha1.id)
  return _internal_mutable_id();
}
inline const std::string& SubscribeTopicEventsRequestProcessedAlpha1::_internal_id() const {
  return id_.Get();
}
inline void SubscribeTopicEventsRequestProcessedAlpha1::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscribeTopicEventsRequestProcessedAlpha1::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubscribeTopicEventsRequestProcessedAlpha1.id)
}
inline void SubscribeTopicEventsRequestProcessedAlpha1::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubscribeTopicEventsRequestProcessedAlpha1.id)
}
inline void SubscribeTopicEventsRequestProcessedAlpha1::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubscribeTopicEventsRequestProcessedAlpha1.id)
}
inline std::string* SubscribeTopicEventsRequestProcessedAlpha1::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscribeTopicEventsRequestProcessedAlpha1::release_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubscribeTopicEventsRequestProcessedAlpha1.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscribeTopicEventsRequestProcessedAlpha1::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubscribeTopicEventsRequestProcessedAlpha1.id)
}
inline std::string* SubscribeTopicEventsRequestProcessedAlpha1::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubscribeTopicEventsRequestProcessedAlpha1.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscribeTopicEventsRequestProcessedAlpha1::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubscribeTopicEventsRequestProcessedAlpha1.id)
}

// .dapr.proto.runtime.v1.TopicEventResponse status = 2;
inline bool SubscribeTopicEventsRequestProcessedAlpha1::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SubscribeTopicEventsRequestProcessedAlpha1::has_status() const {
  return _internal_has_status();
}
inline const ::dapr::proto::runtime::v1::TopicEventResponse& SubscribeTopicEventsRequestProcessedAlpha1::_internal_status() const {
  const ::dapr::proto::runtime::v1::TopicEventResponse* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dapr::proto::runtime::v1::TopicEventResponse*>(
      &::dapr::proto::runtime::v1::_TopicEventResponse_default_instance_);
}
inline const ::dapr::proto::runtime::v1::TopicEventResponse& SubscribeTopicEventsRequestProcessedAlpha1::status() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubscribeTopicEventsRequestProcessedAlpha1.status)
  return _internal_status();
}
inline void SubscribeTopicEventsRequestProcessedAlpha1::unsafe_arena_set_allocated_status(
    ::dapr::proto::runtime::v1::TopicEventResponse* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubscribeTopicEventsRequestProcessedAlpha1.status)
}
inline ::dapr::proto::runtime::v1::TopicEventResponse* SubscribeTopicEventsRequestProcessedAlpha1::release_status() {
  auto temp = unsafe_arena_release_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dapr::proto::runtime::v1::TopicEventResponse* SubscribeTopicEventsRequestProcessedAlpha1::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubscribeTopicEventsRequestProcessedAlpha1.status)
  
  ::dapr::proto::runtime::v1::TopicEventResponse* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::dapr::proto::runtime::v1::TopicEventResponse* SubscribeTopicEventsRequestProcessedAlpha1::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::runtime::v1::TopicEventResponse>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::dapr::proto::runtime::v1::TopicEventResponse* SubscribeTopicEventsRequestProcessedAlpha1::mutable_status() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubscribeTopicEventsRequestProcessedAlpha1.status)
  return _internal_mutable_status();
}
inline void SubscribeTopicEventsRequestProcessedAlpha1::set_allocated_status(::dapr::proto::runtime::v1::TopicEventResponse* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubscribeTopicEventsRequestProcessedAlpha1.status)
}

// -------------------------------------------------------------------

// SubscribeTopicEventsResponseAlpha1

// .dapr.proto.runtime.v1.SubscribeTopicEventsResponseInitialAlpha1 initial_response = 1;
inline bool SubscribeTopicEventsResponseAlpha1::_internal_has_initial_response() const {
  return subscribe_topic_events_response_type_case() == kInitialResponse;
}
inline bool SubscribeTopicEventsResponseAlpha1::has_initial_response() const {
  return _internal_has_initial_response();
}
inline void SubscribeTopicEventsResponseAlpha1::set_has_initial_response() {
  _oneof_case_[0] = kInitialResponse;
}
inline void SubscribeTopicEventsResponseAlpha1::clear_initial_response() {
  if (_internal_has_initial_response()) {
    if (GetArena() == nullptr) {
      delete subscribe_topic_events_response_type_.initial_response_;
    }
    clear_has_subscribe_topic_events_response_type();
  }
}
inline ::dapr::proto::runtime::v1::SubscribeTopicEventsResponseInitialAlpha1* SubscribeTopicEventsResponseAlpha1::release_initial_response() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubscribeTopicEventsResponseAlpha1.initial_response)
  if (_internal_has_initial_response()) {
    clear_has_subscribe_topic_events_response_type();
      ::dapr::proto::runtime::v1::SubscribeTopicEventsResponseInitialAlpha1* temp = subscribe_topic_events_response_type_.initial_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    subscribe_topic_events_response_type_.initial_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dapr::proto::runtime::v1::SubscribeTopicEventsResponseInitialAlpha1& SubscribeTopicEventsResponseAlpha1::_internal_initial_response() const {
  return _internal_has_initial_response()
      ? *subscribe_topic_events_response_type_.initial_response_
      : *reinterpret_cast< ::dapr::proto::runtime::v1::SubscribeTopicEventsResponseInitialAlpha1*>(&::dapr::proto::runtime::v1::_SubscribeTopicEventsResponseInitialAlpha1_default_instance_);
}
inline const ::dapr::proto::runtime::v1::SubscribeTopicEventsResponseInitialAlpha1& SubscribeTopicEventsResponseAlpha1::initial_response() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubscribeTopicEventsResponseAlpha1.initial_response)
  return _internal_initial_response();
}
inline ::dapr::proto::runtime::v1::SubscribeTopicEventsResponseInitialAlpha1* SubscribeTopicEventsResponseAlpha1::unsafe_arena_release_initial_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubscribeTopicEventsResponseAlpha1.initial_response)
  if (_internal_has_initial_response()) {
    clear_has_subscribe_topic_events_response_type();
    ::dapr::proto::runtime::v1::SubscribeTopicEventsResponseInitialAlpha1* temp = subscribe_topic_events_response_type_.initial_response_;
    subscribe_topic_events_response_type_.initial_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubscribeTopicEventsResponseAlpha1::unsafe_arena_set_allocated_initial_response(::dapr::proto::runtime::v1::SubscribeTopicEventsResponseInitialAlpha1* initial_response) {
  clear_subscribe_topic_events_response_type();
  if (initial_response) {
    set_has_initial_response();
    subscribe_topic_events_response_type_.initial_response_ = initial_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubscribeTopicEventsResponseAlpha1.initial_response)
}
inline ::dapr::proto::runtime::v1::SubscribeTopicEventsResponseInitialAlpha1* SubscribeTopicEventsResponseAlpha1::_internal_mutable_initial_response() {
  if (!_internal_has_initial_response()) {
    clear_subscribe_topic_events_response_type();
    set_has_initial_response();
    subscribe_topic_events_response_type_.initial_response_ = CreateMaybeMessage< ::dapr::proto::runtime::v1::SubscribeTopicEventsResponseInitialAlpha1 >(GetArena());
  }
  return subscribe_topic_events_response_type_.initial_response_;
}
inline ::dapr::proto::runtime::v1::SubscribeTopicEventsResponseInitialAlpha1* SubscribeTopicEventsResponseAlpha1::mutable_initial_response() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubscribeTopicEventsResponseAlpha1.initial_response)
  return _internal_mutable_initial_response();
}

// .dapr.proto.runtime.v1.TopicEventRequest event_message = 2;
inline bool SubscribeTopicEventsResponseAlpha1::_internal_has_event_message() const {
  return subscribe_topic_events_response_type_case() == kEventMessage;
}
inline bool SubscribeTopicEventsResponseAlpha1::has_event_message() const {
  return _internal_has_event_message();
}
inline void SubscribeTopicEventsResponseAlpha1::set_has_event_message() {
  _oneof_case_[0] = kEventMessage;
}
inline ::dapr::proto::runtime::v1::TopicEventRequest* SubscribeTopicEventsResponseAlpha1::release_event_message() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubscribeTopicEventsResponseAlpha1.event_message)
  if (_internal_has_event_message()) {
    clear_has_subscribe_topic_events_response_type();
      ::dapr::proto::runtime::v1::TopicEventRequest* temp = subscribe_topic_events_response_type_.event_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    subscribe_topic_events_response_type_.event_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dapr::proto::runtime::v1::TopicEventRequest& SubscribeTopicEventsResponseAlpha1::_internal_event_message() const {
  return _internal_has_event_message()
      ? *subscribe_topic_events_response_type_.event_message_
      : *reinterpret_cast< ::dapr::proto::runtime::v1::TopicEventRequest*>(&::dapr::proto::runtime::v1::_TopicEventRequest_default_instance_);
}
inline const ::dapr::proto::runtime::v1::TopicEventRequest& SubscribeTopicEventsResponseAlpha1::event_message() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubscribeTopicEventsResponseAlpha1.event_message)
  return _internal_event_message();
}
inline ::dapr::proto::runtime::v1::TopicEventRequest* SubscribeTopicEventsResponseAlpha1::unsafe_arena_release_event_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubscribeTopicEventsResponseAlpha1.event_message)
  if (_internal_has_event_message()) {
    clear_has_subscribe_topic_events_response_type();
    ::dapr::proto::runtime::v1::TopicEventRequest* temp = subscribe_topic_events_response_type_.event_message_;
    subscribe_topic_events_response_type_.event_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubscribeTopicEventsResponseAlpha1::unsafe_arena_set_allocated_event_message(::dapr::proto::runtime::v1::TopicEventRequest* event_message) {
  clear_subscribe_topic_events_response_type();
  if (event_message) {
    set_has_event_message();
    subscribe_topic_events_response_type_.event_message_ = event_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubscribeTopicEventsResponseAlpha1.event_message)
}
inline ::dapr::proto::runtime::v1::TopicEventRequest* SubscribeTopicEventsResponseAlpha1::_internal_mutable_event_message() {
  if (!_internal_has_event_message()) {
    clear_subscribe_topic_events_response_type();
    set_has_event_message();
    subscribe_topic_events_response_type_.event_message_ = CreateMaybeMessage< ::dapr::proto::runtime::v1::TopicEventRequest >(GetArena());
  }
  return subscribe_topic_events_response_type_.event_message_;
}
inline ::dapr::proto::runtime::v1::TopicEventRequest* SubscribeTopicEventsResponseAlpha1::mutable_event_message() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubscribeTopicEventsResponseAlpha1.event_message)
  return _internal_mutable_event_message();
}

inline bool SubscribeTopicEventsResponseAlpha1::has_subscribe_topic_events_response_type() const {
  return subscribe_topic_events_response_type_case() != SUBSCRIBE_TOPIC_EVENTS_RESPONSE_TYPE_NOT_SET;
}
inline void SubscribeTopicEventsResponseAlpha1::clear_has_subscribe_topic_events_response_type() {
  _oneof_case_[0] = SUBSCRIBE_TOPIC_EVENTS_RESPONSE_TYPE_NOT_SET;
}
inline SubscribeTopicEventsResponseAlpha1::SubscribeTopicEventsResponseTypeCase SubscribeTopicEventsResponseAlpha1::subscribe_topic_events_response_type_case() const {
  return SubscribeTopicEventsResponseAlpha1::SubscribeTopicEventsResponseTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SubscribeTopicEventsResponseInitialAlpha1

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InvokeBindingRequest

// string name = 1;
inline void InvokeBindingRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InvokeBindingRequest::name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.InvokeBindingRequest.name)
  return _internal_name();
}
inline void InvokeBindingRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.InvokeBindingRequest.name)
}
inline std::string* InvokeBindingRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.InvokeBindingRequest.name)
  return _internal_mutable_name();
}
inline const std::string& InvokeBindingRequest::_internal_name() const {
  return name_.Get();
}
inline void InvokeBindingRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InvokeBindingRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.InvokeBindingRequest.name)
}
inline void InvokeBindingRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.InvokeBindingRequest.name)
}
inline void InvokeBindingRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.InvokeBindingRequest.name)
}
inline std::string* InvokeBindingRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InvokeBindingRequest::release_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.InvokeBindingRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvokeBindingRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.InvokeBindingRequest.name)
}
inline std::string* InvokeBindingRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.InvokeBindingRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InvokeBindingRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.InvokeBindingRequest.name)
}

// bytes data = 2;
inline void InvokeBindingRequest::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InvokeBindingRequest::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.InvokeBindingRequest.data)
  return _internal_data();
}
inline void InvokeBindingRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.InvokeBindingRequest.data)
}
inline std::string* InvokeBindingRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.InvokeBindingRequest.data)
  return _internal_mutable_data();
}
inline const std::string& InvokeBindingRequest::_internal_data() const {
  return data_.Get();
}
inline void InvokeBindingRequest::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InvokeBindingRequest::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.InvokeBindingRequest.data)
}
inline void InvokeBindingRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.InvokeBindingRequest.data)
}
inline void InvokeBindingRequest::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.InvokeBindingRequest.data)
}
inline std::string* InvokeBindingRequest::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InvokeBindingRequest::release_data() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.InvokeBindingRequest.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvokeBindingRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.InvokeBindingRequest.data)
}
inline std::string* InvokeBindingRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.InvokeBindingRequest.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InvokeBindingRequest::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.InvokeBindingRequest.data)
}

// map<string, string> metadata = 3;
inline int InvokeBindingRequest::_internal_metadata_size() const {
  return metadata_.size();
}
inline int InvokeBindingRequest::metadata_size() const {
  return _internal_metadata_size();
}
inline void InvokeBindingRequest::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InvokeBindingRequest::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InvokeBindingRequest::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.InvokeBindingRequest.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InvokeBindingRequest::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InvokeBindingRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.InvokeBindingRequest.metadata)
  return _internal_mutable_metadata();
}

// string operation = 4;
inline void InvokeBindingRequest::clear_operation() {
  operation_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InvokeBindingRequest::operation() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.InvokeBindingRequest.operation)
  return _internal_operation();
}
inline void InvokeBindingRequest::set_operation(const std::string& value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.InvokeBindingRequest.operation)
}
inline std::string* InvokeBindingRequest::mutable_operation() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.InvokeBindingRequest.operation)
  return _internal_mutable_operation();
}
inline const std::string& InvokeBindingRequest::_internal_operation() const {
  return operation_.Get();
}
inline void InvokeBindingRequest::_internal_set_operation(const std::string& value) {
  
  operation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InvokeBindingRequest::set_operation(std::string&& value) {
  
  operation_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.InvokeBindingRequest.operation)
}
inline void InvokeBindingRequest::set_operation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.InvokeBindingRequest.operation)
}
inline void InvokeBindingRequest::set_operation(const char* value,
    size_t size) {
  
  operation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.InvokeBindingRequest.operation)
}
inline std::string* InvokeBindingRequest::_internal_mutable_operation() {
  
  return operation_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InvokeBindingRequest::release_operation() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.InvokeBindingRequest.operation)
  return operation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvokeBindingRequest::set_allocated_operation(std::string* operation) {
  if (operation != nullptr) {
    
  } else {
    
  }
  operation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.InvokeBindingRequest.operation)
}
inline std::string* InvokeBindingRequest::unsafe_arena_release_operation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.InvokeBindingRequest.operation)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return operation_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InvokeBindingRequest::unsafe_arena_set_allocated_operation(
    std::string* operation) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (operation != nullptr) {
    
  } else {
    
  }
  operation_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      operation, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.InvokeBindingRequest.operation)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InvokeBindingResponse

// bytes data = 1;
inline void InvokeBindingResponse::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InvokeBindingResponse::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.InvokeBindingResponse.data)
  return _internal_data();
}
inline void InvokeBindingResponse::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.InvokeBindingResponse.data)
}
inline std::string* InvokeBindingResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.InvokeBindingResponse.data)
  return _internal_mutable_data();
}
inline const std::string& InvokeBindingResponse::_internal_data() const {
  return data_.Get();
}
inline void InvokeBindingResponse::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InvokeBindingResponse::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.InvokeBindingResponse.data)
}
inline void InvokeBindingResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.InvokeBindingResponse.data)
}
inline void InvokeBindingResponse::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.InvokeBindingResponse.data)
}
inline std::string* InvokeBindingResponse::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InvokeBindingResponse::release_data() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.InvokeBindingResponse.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvokeBindingResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.InvokeBindingResponse.data)
}
inline std::string* InvokeBindingResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.InvokeBindingResponse.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InvokeBindingResponse::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.InvokeBindingResponse.data)
}

// map<string, string> metadata = 2;
inline int InvokeBindingResponse::_internal_metadata_size() const {
  return metadata_.size();
}
inline int InvokeBindingResponse::metadata_size() const {
  return _internal_metadata_size();
}
inline void InvokeBindingResponse::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InvokeBindingResponse::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InvokeBindingResponse::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.InvokeBindingResponse.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InvokeBindingResponse::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InvokeBindingResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.InvokeBindingResponse.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetSecretRequest

// string store_name = 1[json_name = "storeName"];
inline void GetSecretRequest::clear_store_name() {
  store_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSecretRequest::store_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetSecretRequest.store_name)
  return _internal_store_name();
}
inline void GetSecretRequest::set_store_name(const std::string& value) {
  _internal_set_store_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetSecretRequest.store_name)
}
inline std::string* GetSecretRequest::mutable_store_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetSecretRequest.store_name)
  return _internal_mutable_store_name();
}
inline const std::string& GetSecretRequest::_internal_store_name() const {
  return store_name_.Get();
}
inline void GetSecretRequest::_internal_set_store_name(const std::string& value) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSecretRequest::set_store_name(std::string&& value) {
  
  store_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.GetSecretRequest.store_name)
}
inline void GetSecretRequest::set_store_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetSecretRequest.store_name)
}
inline void GetSecretRequest::set_store_name(const char* value,
    size_t size) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetSecretRequest.store_name)
}
inline std::string* GetSecretRequest::_internal_mutable_store_name() {
  
  return store_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSecretRequest::release_store_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetSecretRequest.store_name)
  return store_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSecretRequest::set_allocated_store_name(std::string* store_name) {
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), store_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetSecretRequest.store_name)
}
inline std::string* GetSecretRequest::unsafe_arena_release_store_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.GetSecretRequest.store_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return store_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetSecretRequest::unsafe_arena_set_allocated_store_name(
    std::string* store_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      store_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetSecretRequest.store_name)
}

// string key = 2;
inline void GetSecretRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSecretRequest::key() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetSecretRequest.key)
  return _internal_key();
}
inline void GetSecretRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetSecretRequest.key)
}
inline std::string* GetSecretRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetSecretRequest.key)
  return _internal_mutable_key();
}
inline const std::string& GetSecretRequest::_internal_key() const {
  return key_.Get();
}
inline void GetSecretRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSecretRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.GetSecretRequest.key)
}
inline void GetSecretRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetSecretRequest.key)
}
inline void GetSecretRequest::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetSecretRequest.key)
}
inline std::string* GetSecretRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSecretRequest::release_key() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetSecretRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSecretRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetSecretRequest.key)
}
inline std::string* GetSecretRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.GetSecretRequest.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetSecretRequest::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetSecretRequest.key)
}

// map<string, string> metadata = 3;
inline int GetSecretRequest::_internal_metadata_size() const {
  return metadata_.size();
}
inline int GetSecretRequest::metadata_size() const {
  return _internal_metadata_size();
}
inline void GetSecretRequest::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetSecretRequest::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetSecretRequest::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.GetSecretRequest.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetSecretRequest::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetSecretRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.GetSecretRequest.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetSecretResponse

// map<string, string> data = 1;
inline int GetSecretResponse::_internal_data_size() const {
  return data_.size();
}
inline int GetSecretResponse::data_size() const {
  return _internal_data_size();
}
inline void GetSecretResponse::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetSecretResponse::_internal_data() const {
  return data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetSecretResponse::data() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.GetSecretResponse.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetSecretResponse::_internal_mutable_data() {
  return data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetSecretResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.GetSecretResponse.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetBulkSecretRequest

// string store_name = 1[json_name = "storeName"];
inline void GetBulkSecretRequest::clear_store_name() {
  store_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetBulkSecretRequest::store_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetBulkSecretRequest.store_name)
  return _internal_store_name();
}
inline void GetBulkSecretRequest::set_store_name(const std::string& value) {
  _internal_set_store_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetBulkSecretRequest.store_name)
}
inline std::string* GetBulkSecretRequest::mutable_store_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetBulkSecretRequest.store_name)
  return _internal_mutable_store_name();
}
inline const std::string& GetBulkSecretRequest::_internal_store_name() const {
  return store_name_.Get();
}
inline void GetBulkSecretRequest::_internal_set_store_name(const std::string& value) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetBulkSecretRequest::set_store_name(std::string&& value) {
  
  store_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.GetBulkSecretRequest.store_name)
}
inline void GetBulkSecretRequest::set_store_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetBulkSecretRequest.store_name)
}
inline void GetBulkSecretRequest::set_store_name(const char* value,
    size_t size) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetBulkSecretRequest.store_name)
}
inline std::string* GetBulkSecretRequest::_internal_mutable_store_name() {
  
  return store_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetBulkSecretRequest::release_store_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetBulkSecretRequest.store_name)
  return store_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetBulkSecretRequest::set_allocated_store_name(std::string* store_name) {
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), store_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetBulkSecretRequest.store_name)
}
inline std::string* GetBulkSecretRequest::unsafe_arena_release_store_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.GetBulkSecretRequest.store_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return store_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetBulkSecretRequest::unsafe_arena_set_allocated_store_name(
    std::string* store_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      store_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetBulkSecretRequest.store_name)
}

// map<string, string> metadata = 2;
inline int GetBulkSecretRequest::_internal_metadata_size() const {
  return metadata_.size();
}
inline int GetBulkSecretRequest::metadata_size() const {
  return _internal_metadata_size();
}
inline void GetBulkSecretRequest::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetBulkSecretRequest::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetBulkSecretRequest::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.GetBulkSecretRequest.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetBulkSecretRequest::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetBulkSecretRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.GetBulkSecretRequest.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SecretResponse

// map<string, string> secrets = 1;
inline int SecretResponse::_internal_secrets_size() const {
  return secrets_.size();
}
inline int SecretResponse::secrets_size() const {
  return _internal_secrets_size();
}
inline void SecretResponse::clear_secrets() {
  secrets_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SecretResponse::_internal_secrets() const {
  return secrets_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SecretResponse::secrets() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.SecretResponse.secrets)
  return _internal_secrets();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SecretResponse::_internal_mutable_secrets() {
  return secrets_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SecretResponse::mutable_secrets() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.SecretResponse.secrets)
  return _internal_mutable_secrets();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetBulkSecretResponse

// map<string, .dapr.proto.runtime.v1.SecretResponse> data = 1;
inline int GetBulkSecretResponse::_internal_data_size() const {
  return data_.size();
}
inline int GetBulkSecretResponse::data_size() const {
  return _internal_data_size();
}
inline void GetBulkSecretResponse::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::runtime::v1::SecretResponse >&
GetBulkSecretResponse::_internal_data() const {
  return data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::runtime::v1::SecretResponse >&
GetBulkSecretResponse::data() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.GetBulkSecretResponse.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::runtime::v1::SecretResponse >*
GetBulkSecretResponse::_internal_mutable_data() {
  return data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::runtime::v1::SecretResponse >*
GetBulkSecretResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.GetBulkSecretResponse.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// TransactionalStateOperation

// string operationType = 1;
inline void TransactionalStateOperation::clear_operationtype() {
  operationtype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TransactionalStateOperation::operationtype() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TransactionalStateOperation.operationType)
  return _internal_operationtype();
}
inline void TransactionalStateOperation::set_operationtype(const std::string& value) {
  _internal_set_operationtype(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TransactionalStateOperation.operationType)
}
inline std::string* TransactionalStateOperation::mutable_operationtype() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TransactionalStateOperation.operationType)
  return _internal_mutable_operationtype();
}
inline const std::string& TransactionalStateOperation::_internal_operationtype() const {
  return operationtype_.Get();
}
inline void TransactionalStateOperation::_internal_set_operationtype(const std::string& value) {
  
  operationtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransactionalStateOperation::set_operationtype(std::string&& value) {
  
  operationtype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.TransactionalStateOperation.operationType)
}
inline void TransactionalStateOperation::set_operationtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operationtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.TransactionalStateOperation.operationType)
}
inline void TransactionalStateOperation::set_operationtype(const char* value,
    size_t size) {
  
  operationtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.TransactionalStateOperation.operationType)
}
inline std::string* TransactionalStateOperation::_internal_mutable_operationtype() {
  
  return operationtype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransactionalStateOperation::release_operationtype() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TransactionalStateOperation.operationType)
  return operationtype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionalStateOperation::set_allocated_operationtype(std::string* operationtype) {
  if (operationtype != nullptr) {
    
  } else {
    
  }
  operationtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operationtype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TransactionalStateOperation.operationType)
}
inline std::string* TransactionalStateOperation::unsafe_arena_release_operationtype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.TransactionalStateOperation.operationType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return operationtype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TransactionalStateOperation::unsafe_arena_set_allocated_operationtype(
    std::string* operationtype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (operationtype != nullptr) {
    
  } else {
    
  }
  operationtype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      operationtype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.TransactionalStateOperation.operationType)
}

// .dapr.proto.common.v1.StateItem request = 2;
inline bool TransactionalStateOperation::_internal_has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline bool TransactionalStateOperation::has_request() const {
  return _internal_has_request();
}
inline const ::dapr::proto::common::v1::StateItem& TransactionalStateOperation::_internal_request() const {
  const ::dapr::proto::common::v1::StateItem* p = request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dapr::proto::common::v1::StateItem*>(
      &::dapr::proto::common::v1::_StateItem_default_instance_);
}
inline const ::dapr::proto::common::v1::StateItem& TransactionalStateOperation::request() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TransactionalStateOperation.request)
  return _internal_request();
}
inline void TransactionalStateOperation::unsafe_arena_set_allocated_request(
    ::dapr::proto::common::v1::StateItem* request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.TransactionalStateOperation.request)
}
inline ::dapr::proto::common::v1::StateItem* TransactionalStateOperation::release_request() {
  auto temp = unsafe_arena_release_request();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dapr::proto::common::v1::StateItem* TransactionalStateOperation::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TransactionalStateOperation.request)
  
  ::dapr::proto::common::v1::StateItem* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::dapr::proto::common::v1::StateItem* TransactionalStateOperation::_internal_mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::common::v1::StateItem>(GetArena());
    request_ = p;
  }
  return request_;
}
inline ::dapr::proto::common::v1::StateItem* TransactionalStateOperation::mutable_request() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TransactionalStateOperation.request)
  return _internal_mutable_request();
}
inline void TransactionalStateOperation::set_allocated_request(::dapr::proto::common::v1::StateItem* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request)->GetArena();
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TransactionalStateOperation.request)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ExecuteStateTransactionRequest

// string storeName = 1;
inline void ExecuteStateTransactionRequest::clear_storename() {
  storename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExecuteStateTransactionRequest::storename() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.ExecuteStateTransactionRequest.storeName)
  return _internal_storename();
}
inline void ExecuteStateTransactionRequest::set_storename(const std::string& value) {
  _internal_set_storename(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.ExecuteStateTransactionRequest.storeName)
}
inline std::string* ExecuteStateTransactionRequest::mutable_storename() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.ExecuteStateTransactionRequest.storeName)
  return _internal_mutable_storename();
}
inline const std::string& ExecuteStateTransactionRequest::_internal_storename() const {
  return storename_.Get();
}
inline void ExecuteStateTransactionRequest::_internal_set_storename(const std::string& value) {
  
  storename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecuteStateTransactionRequest::set_storename(std::string&& value) {
  
  storename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.ExecuteStateTransactionRequest.storeName)
}
inline void ExecuteStateTransactionRequest::set_storename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  storename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.ExecuteStateTransactionRequest.storeName)
}
inline void ExecuteStateTransactionRequest::set_storename(const char* value,
    size_t size) {
  
  storename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.ExecuteStateTransactionRequest.storeName)
}
inline std::string* ExecuteStateTransactionRequest::_internal_mutable_storename() {
  
  return storename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecuteStateTransactionRequest::release_storename() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.ExecuteStateTransactionRequest.storeName)
  return storename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecuteStateTransactionRequest::set_allocated_storename(std::string* storename) {
  if (storename != nullptr) {
    
  } else {
    
  }
  storename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.ExecuteStateTransactionRequest.storeName)
}
inline std::string* ExecuteStateTransactionRequest::unsafe_arena_release_storename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.ExecuteStateTransactionRequest.storeName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return storename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecuteStateTransactionRequest::unsafe_arena_set_allocated_storename(
    std::string* storename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (storename != nullptr) {
    
  } else {
    
  }
  storename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      storename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.ExecuteStateTransactionRequest.storeName)
}

// repeated .dapr.proto.runtime.v1.TransactionalStateOperation operations = 2;
inline int ExecuteStateTransactionRequest::_internal_operations_size() const {
  return operations_.size();
}
inline int ExecuteStateTransactionRequest::operations_size() const {
  return _internal_operations_size();
}
inline void ExecuteStateTransactionRequest::clear_operations() {
  operations_.Clear();
}
inline ::dapr::proto::runtime::v1::TransactionalStateOperation* ExecuteStateTransactionRequest::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.ExecuteStateTransactionRequest.operations)
  return operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::TransactionalStateOperation >*
ExecuteStateTransactionRequest::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.ExecuteStateTransactionRequest.operations)
  return &operations_;
}
inline const ::dapr::proto::runtime::v1::TransactionalStateOperation& ExecuteStateTransactionRequest::_internal_operations(int index) const {
  return operations_.Get(index);
}
inline const ::dapr::proto::runtime::v1::TransactionalStateOperation& ExecuteStateTransactionRequest::operations(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.ExecuteStateTransactionRequest.operations)
  return _internal_operations(index);
}
inline ::dapr::proto::runtime::v1::TransactionalStateOperation* ExecuteStateTransactionRequest::_internal_add_operations() {
  return operations_.Add();
}
inline ::dapr::proto::runtime::v1::TransactionalStateOperation* ExecuteStateTransactionRequest::add_operations() {
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.ExecuteStateTransactionRequest.operations)
  return _internal_add_operations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::TransactionalStateOperation >&
ExecuteStateTransactionRequest::operations() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.ExecuteStateTransactionRequest.operations)
  return operations_;
}

// map<string, string> metadata = 3;
inline int ExecuteStateTransactionRequest::_internal_metadata_size() const {
  return metadata_.size();
}
inline int ExecuteStateTransactionRequest::metadata_size() const {
  return _internal_metadata_size();
}
inline void ExecuteStateTransactionRequest::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ExecuteStateTransactionRequest::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ExecuteStateTransactionRequest::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.ExecuteStateTransactionRequest.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ExecuteStateTransactionRequest::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ExecuteStateTransactionRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.ExecuteStateTransactionRequest.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// RegisterActorTimerRequest

// string actor_type = 1[json_name = "actorType"];
inline void RegisterActorTimerRequest::clear_actor_type() {
  actor_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterActorTimerRequest::actor_type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.RegisterActorTimerRequest.actor_type)
  return _internal_actor_type();
}
inline void RegisterActorTimerRequest::set_actor_type(const std::string& value) {
  _internal_set_actor_type(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RegisterActorTimerRequest.actor_type)
}
inline std::string* RegisterActorTimerRequest::mutable_actor_type() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.RegisterActorTimerRequest.actor_type)
  return _internal_mutable_actor_type();
}
inline const std::string& RegisterActorTimerRequest::_internal_actor_type() const {
  return actor_type_.Get();
}
inline void RegisterActorTimerRequest::_internal_set_actor_type(const std::string& value) {
  
  actor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterActorTimerRequest::set_actor_type(std::string&& value) {
  
  actor_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.RegisterActorTimerRequest.actor_type)
}
inline void RegisterActorTimerRequest::set_actor_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.RegisterActorTimerRequest.actor_type)
}
inline void RegisterActorTimerRequest::set_actor_type(const char* value,
    size_t size) {
  
  actor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.RegisterActorTimerRequest.actor_type)
}
inline std::string* RegisterActorTimerRequest::_internal_mutable_actor_type() {
  
  return actor_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterActorTimerRequest::release_actor_type() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.RegisterActorTimerRequest.actor_type)
  return actor_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterActorTimerRequest::set_allocated_actor_type(std::string* actor_type) {
  if (actor_type != nullptr) {
    
  } else {
    
  }
  actor_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actor_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.RegisterActorTimerRequest.actor_type)
}
inline std::string* RegisterActorTimerRequest::unsafe_arena_release_actor_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.RegisterActorTimerRequest.actor_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return actor_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterActorTimerRequest::unsafe_arena_set_allocated_actor_type(
    std::string* actor_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (actor_type != nullptr) {
    
  } else {
    
  }
  actor_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      actor_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.RegisterActorTimerRequest.actor_type)
}

// string actor_id = 2[json_name = "actorId"];
inline void RegisterActorTimerRequest::clear_actor_id() {
  actor_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterActorTimerRequest::actor_id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.RegisterActorTimerRequest.actor_id)
  return _internal_actor_id();
}
inline void RegisterActorTimerRequest::set_actor_id(const std::string& value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RegisterActorTimerRequest.actor_id)
}
inline std::string* RegisterActorTimerRequest::mutable_actor_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.RegisterActorTimerRequest.actor_id)
  return _internal_mutable_actor_id();
}
inline const std::string& RegisterActorTimerRequest::_internal_actor_id() const {
  return actor_id_.Get();
}
inline void RegisterActorTimerRequest::_internal_set_actor_id(const std::string& value) {
  
  actor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterActorTimerRequest::set_actor_id(std::string&& value) {
  
  actor_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.RegisterActorTimerRequest.actor_id)
}
inline void RegisterActorTimerRequest::set_actor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.RegisterActorTimerRequest.actor_id)
}
inline void RegisterActorTimerRequest::set_actor_id(const char* value,
    size_t size) {
  
  actor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.RegisterActorTimerRequest.actor_id)
}
inline std::string* RegisterActorTimerRequest::_internal_mutable_actor_id() {
  
  return actor_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterActorTimerRequest::release_actor_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.RegisterActorTimerRequest.actor_id)
  return actor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterActorTimerRequest::set_allocated_actor_id(std::string* actor_id) {
  if (actor_id != nullptr) {
    
  } else {
    
  }
  actor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actor_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.RegisterActorTimerRequest.actor_id)
}
inline std::string* RegisterActorTimerRequest::unsafe_arena_release_actor_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.RegisterActorTimerRequest.actor_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return actor_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterActorTimerRequest::unsafe_arena_set_allocated_actor_id(
    std::string* actor_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (actor_id != nullptr) {
    
  } else {
    
  }
  actor_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      actor_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.RegisterActorTimerRequest.actor_id)
}

// string name = 3;
inline void RegisterActorTimerRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterActorTimerRequest::name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.RegisterActorTimerRequest.name)
  return _internal_name();
}
inline void RegisterActorTimerRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RegisterActorTimerRequest.name)
}
inline std::string* RegisterActorTimerRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.RegisterActorTimerRequest.name)
  return _internal_mutable_name();
}
inline const std::string& RegisterActorTimerRequest::_internal_name() const {
  return name_.Get();
}
inline void RegisterActorTimerRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterActorTimerRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.RegisterActorTimerRequest.name)
}
inline void RegisterActorTimerRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.RegisterActorTimerRequest.name)
}
inline void RegisterActorTimerRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.RegisterActorTimerRequest.name)
}
inline std::string* RegisterActorTimerRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterActorTimerRequest::release_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.RegisterActorTimerRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterActorTimerRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.RegisterActorTimerRequest.name)
}
inline std::string* RegisterActorTimerRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.RegisterActorTimerRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterActorTimerRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.RegisterActorTimerRequest.name)
}

// string due_time = 4[json_name = "dueTime"];
inline void RegisterActorTimerRequest::clear_due_time() {
  due_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterActorTimerRequest::due_time() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.RegisterActorTimerRequest.due_time)
  return _internal_due_time();
}
inline void RegisterActorTimerRequest::set_due_time(const std::string& value) {
  _internal_set_due_time(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RegisterActorTimerRequest.due_time)
}
inline std::string* RegisterActorTimerRequest::mutable_due_time() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.RegisterActorTimerRequest.due_time)
  return _internal_mutable_due_time();
}
inline const std::string& RegisterActorTimerRequest::_internal_due_time() const {
  return due_time_.Get();
}
inline void RegisterActorTimerRequest::_internal_set_due_time(const std::string& value) {
  
  due_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterActorTimerRequest::set_due_time(std::string&& value) {
  
  due_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.RegisterActorTimerRequest.due_time)
}
inline void RegisterActorTimerRequest::set_due_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  due_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.RegisterActorTimerRequest.due_time)
}
inline void RegisterActorTimerRequest::set_due_time(const char* value,
    size_t size) {
  
  due_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.RegisterActorTimerRequest.due_time)
}
inline std::string* RegisterActorTimerRequest::_internal_mutable_due_time() {
  
  return due_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterActorTimerRequest::release_due_time() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.RegisterActorTimerRequest.due_time)
  return due_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterActorTimerRequest::set_allocated_due_time(std::string* due_time) {
  if (due_time != nullptr) {
    
  } else {
    
  }
  due_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), due_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.RegisterActorTimerRequest.due_time)
}
inline std::string* RegisterActorTimerRequest::unsafe_arena_release_due_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.RegisterActorTimerRequest.due_time)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return due_time_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterActorTimerRequest::unsafe_arena_set_allocated_due_time(
    std::string* due_time) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (due_time != nullptr) {
    
  } else {
    
  }
  due_time_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      due_time, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.RegisterActorTimerRequest.due_time)
}

// string period = 5;
inline void RegisterActorTimerRequest::clear_period() {
  period_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterActorTimerRequest::period() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.RegisterActorTimerRequest.period)
  return _internal_period();
}
inline void RegisterActorTimerRequest::set_period(const std::string& value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RegisterActorTimerRequest.period)
}
inline std::string* RegisterActorTimerRequest::mutable_period() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.RegisterActorTimerRequest.period)
  return _internal_mutable_period();
}
inline const std::string& RegisterActorTimerRequest::_internal_period() const {
  return period_.Get();
}
inline void RegisterActorTimerRequest::_internal_set_period(const std::string& value) {
  
  period_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterActorTimerRequest::set_period(std::string&& value) {
  
  period_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.RegisterActorTimerRequest.period)
}
inline void RegisterActorTimerRequest::set_period(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  period_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.RegisterActorTimerRequest.period)
}
inline void RegisterActorTimerRequest::set_period(const char* value,
    size_t size) {
  
  period_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.RegisterActorTimerRequest.period)
}
inline std::string* RegisterActorTimerRequest::_internal_mutable_period() {
  
  return period_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterActorTimerRequest::release_period() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.RegisterActorTimerRequest.period)
  return period_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterActorTimerRequest::set_allocated_period(std::string* period) {
  if (period != nullptr) {
    
  } else {
    
  }
  period_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), period,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.RegisterActorTimerRequest.period)
}
inline std::string* RegisterActorTimerRequest::unsafe_arena_release_period() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.RegisterActorTimerRequest.period)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return period_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterActorTimerRequest::unsafe_arena_set_allocated_period(
    std::string* period) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (period != nullptr) {
    
  } else {
    
  }
  period_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      period, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.RegisterActorTimerRequest.period)
}

// string callback = 6;
inline void RegisterActorTimerRequest::clear_callback() {
  callback_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterActorTimerRequest::callback() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.RegisterActorTimerRequest.callback)
  return _internal_callback();
}
inline void RegisterActorTimerRequest::set_callback(const std::string& value) {
  _internal_set_callback(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RegisterActorTimerRequest.callback)
}
inline std::string* RegisterActorTimerRequest::mutable_callback() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.RegisterActorTimerRequest.callback)
  return _internal_mutable_callback();
}
inline const std::string& RegisterActorTimerRequest::_internal_callback() const {
  return callback_.Get();
}
inline void RegisterActorTimerRequest::_internal_set_callback(const std::string& value) {
  
  callback_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterActorTimerRequest::set_callback(std::string&& value) {
  
  callback_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.RegisterActorTimerRequest.callback)
}
inline void RegisterActorTimerRequest::set_callback(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  callback_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.RegisterActorTimerRequest.callback)
}
inline void RegisterActorTimerRequest::set_callback(const char* value,
    size_t size) {
  
  callback_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.RegisterActorTimerRequest.callback)
}
inline std::string* RegisterActorTimerRequest::_internal_mutable_callback() {
  
  return callback_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterActorTimerRequest::release_callback() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.RegisterActorTimerRequest.callback)
  return callback_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterActorTimerRequest::set_allocated_callback(std::string* callback) {
  if (callback != nullptr) {
    
  } else {
    
  }
  callback_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), callback,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.RegisterActorTimerRequest.callback)
}
inline std::string* RegisterActorTimerRequest::unsafe_arena_release_callback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.RegisterActorTimerRequest.callback)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return callback_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterActorTimerRequest::unsafe_arena_set_allocated_callback(
    std::string* callback) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (callback != nullptr) {
    
  } else {
    
  }
  callback_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      callback, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.RegisterActorTimerRequest.callback)
}

// bytes data = 7;
inline void RegisterActorTimerRequest::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterActorTimerRequest::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.RegisterActorTimerRequest.data)
  return _internal_data();
}
inline void RegisterActorTimerRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RegisterActorTimerRequest.data)
}
inline std::string* RegisterActorTimerRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.RegisterActorTimerRequest.data)
  return _internal_mutable_data();
}
inline const std::string& RegisterActorTimerRequest::_internal_data() const {
  return data_.Get();
}
inline void RegisterActorTimerRequest::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterActorTimerRequest::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.RegisterActorTimerRequest.data)
}
inline void RegisterActorTimerRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.RegisterActorTimerRequest.data)
}
inline void RegisterActorTimerRequest::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.RegisterActorTimerRequest.data)
}
inline std::string* RegisterActorTimerRequest::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterActorTimerRequest::release_data() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.RegisterActorTimerRequest.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterActorTimerRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.RegisterActorTimerRequest.data)
}
inline std::string* RegisterActorTimerRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.RegisterActorTimerRequest.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterActorTimerRequest::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.RegisterActorTimerRequest.data)
}

// string ttl = 8;
inline void RegisterActorTimerRequest::clear_ttl() {
  ttl_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterActorTimerRequest::ttl() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.RegisterActorTimerRequest.ttl)
  return _internal_ttl();
}
inline void RegisterActorTimerRequest::set_ttl(const std::string& value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RegisterActorTimerRequest.ttl)
}
inline std::string* RegisterActorTimerRequest::mutable_ttl() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.RegisterActorTimerRequest.ttl)
  return _internal_mutable_ttl();
}
inline const std::string& RegisterActorTimerRequest::_internal_ttl() const {
  return ttl_.Get();
}
inline void RegisterActorTimerRequest::_internal_set_ttl(const std::string& value) {
  
  ttl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterActorTimerRequest::set_ttl(std::string&& value) {
  
  ttl_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.RegisterActorTimerRequest.ttl)
}
inline void RegisterActorTimerRequest::set_ttl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ttl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.RegisterActorTimerRequest.ttl)
}
inline void RegisterActorTimerRequest::set_ttl(const char* value,
    size_t size) {
  
  ttl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.RegisterActorTimerRequest.ttl)
}
inline std::string* RegisterActorTimerRequest::_internal_mutable_ttl() {
  
  return ttl_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterActorTimerRequest::release_ttl() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.RegisterActorTimerRequest.ttl)
  return ttl_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterActorTimerRequest::set_allocated_ttl(std::string* ttl) {
  if (ttl != nullptr) {
    
  } else {
    
  }
  ttl_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ttl,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.RegisterActorTimerRequest.ttl)
}
inline std::string* RegisterActorTimerRequest::unsafe_arena_release_ttl() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.RegisterActorTimerRequest.ttl)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ttl_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterActorTimerRequest::unsafe_arena_set_allocated_ttl(
    std::string* ttl) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ttl != nullptr) {
    
  } else {
    
  }
  ttl_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ttl, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.RegisterActorTimerRequest.ttl)
}

// -------------------------------------------------------------------

// UnregisterActorTimerRequest

// string actor_type = 1[json_name = "actorType"];
inline void UnregisterActorTimerRequest::clear_actor_type() {
  actor_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnregisterActorTimerRequest::actor_type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.UnregisterActorTimerRequest.actor_type)
  return _internal_actor_type();
}
inline void UnregisterActorTimerRequest::set_actor_type(const std::string& value) {
  _internal_set_actor_type(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.UnregisterActorTimerRequest.actor_type)
}
inline std::string* UnregisterActorTimerRequest::mutable_actor_type() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.UnregisterActorTimerRequest.actor_type)
  return _internal_mutable_actor_type();
}
inline const std::string& UnregisterActorTimerRequest::_internal_actor_type() const {
  return actor_type_.Get();
}
inline void UnregisterActorTimerRequest::_internal_set_actor_type(const std::string& value) {
  
  actor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnregisterActorTimerRequest::set_actor_type(std::string&& value) {
  
  actor_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.UnregisterActorTimerRequest.actor_type)
}
inline void UnregisterActorTimerRequest::set_actor_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.UnregisterActorTimerRequest.actor_type)
}
inline void UnregisterActorTimerRequest::set_actor_type(const char* value,
    size_t size) {
  
  actor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.UnregisterActorTimerRequest.actor_type)
}
inline std::string* UnregisterActorTimerRequest::_internal_mutable_actor_type() {
  
  return actor_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnregisterActorTimerRequest::release_actor_type() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.UnregisterActorTimerRequest.actor_type)
  return actor_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnregisterActorTimerRequest::set_allocated_actor_type(std::string* actor_type) {
  if (actor_type != nullptr) {
    
  } else {
    
  }
  actor_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actor_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.UnregisterActorTimerRequest.actor_type)
}
inline std::string* UnregisterActorTimerRequest::unsafe_arena_release_actor_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.UnregisterActorTimerRequest.actor_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return actor_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UnregisterActorTimerRequest::unsafe_arena_set_allocated_actor_type(
    std::string* actor_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (actor_type != nullptr) {
    
  } else {
    
  }
  actor_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      actor_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.UnregisterActorTimerRequest.actor_type)
}

// string actor_id = 2[json_name = "actorId"];
inline void UnregisterActorTimerRequest::clear_actor_id() {
  actor_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnregisterActorTimerRequest::actor_id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.UnregisterActorTimerRequest.actor_id)
  return _internal_actor_id();
}
inline void UnregisterActorTimerRequest::set_actor_id(const std::string& value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.UnregisterActorTimerRequest.actor_id)
}
inline std::string* UnregisterActorTimerRequest::mutable_actor_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.UnregisterActorTimerRequest.actor_id)
  return _internal_mutable_actor_id();
}
inline const std::string& UnregisterActorTimerRequest::_internal_actor_id() const {
  return actor_id_.Get();
}
inline void UnregisterActorTimerRequest::_internal_set_actor_id(const std::string& value) {
  
  actor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnregisterActorTimerRequest::set_actor_id(std::string&& value) {
  
  actor_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.UnregisterActorTimerRequest.actor_id)
}
inline void UnregisterActorTimerRequest::set_actor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.UnregisterActorTimerRequest.actor_id)
}
inline void UnregisterActorTimerRequest::set_actor_id(const char* value,
    size_t size) {
  
  actor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.UnregisterActorTimerRequest.actor_id)
}
inline std::string* UnregisterActorTimerRequest::_internal_mutable_actor_id() {
  
  return actor_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnregisterActorTimerRequest::release_actor_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.UnregisterActorTimerRequest.actor_id)
  return actor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnregisterActorTimerRequest::set_allocated_actor_id(std::string* actor_id) {
  if (actor_id != nullptr) {
    
  } else {
    
  }
  actor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actor_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.UnregisterActorTimerRequest.actor_id)
}
inline std::string* UnregisterActorTimerRequest::unsafe_arena_release_actor_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.UnregisterActorTimerRequest.actor_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return actor_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UnregisterActorTimerRequest::unsafe_arena_set_allocated_actor_id(
    std::string* actor_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (actor_id != nullptr) {
    
  } else {
    
  }
  actor_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      actor_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.UnregisterActorTimerRequest.actor_id)
}

// string name = 3;
inline void UnregisterActorTimerRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnregisterActorTimerRequest::name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.UnregisterActorTimerRequest.name)
  return _internal_name();
}
inline void UnregisterActorTimerRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.UnregisterActorTimerRequest.name)
}
inline std::string* UnregisterActorTimerRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.UnregisterActorTimerRequest.name)
  return _internal_mutable_name();
}
inline const std::string& UnregisterActorTimerRequest::_internal_name() const {
  return name_.Get();
}
inline void UnregisterActorTimerRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnregisterActorTimerRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.UnregisterActorTimerRequest.name)
}
inline void UnregisterActorTimerRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.UnregisterActorTimerRequest.name)
}
inline void UnregisterActorTimerRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.UnregisterActorTimerRequest.name)
}
inline std::string* UnregisterActorTimerRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnregisterActorTimerRequest::release_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.UnregisterActorTimerRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnregisterActorTimerRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.UnregisterActorTimerRequest.name)
}
inline std::string* UnregisterActorTimerRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.UnregisterActorTimerRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UnregisterActorTimerRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.UnregisterActorTimerRequest.name)
}

// -------------------------------------------------------------------

// RegisterActorReminderRequest

// string actor_type = 1[json_name = "actorType"];
inline void RegisterActorReminderRequest::clear_actor_type() {
  actor_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterActorReminderRequest::actor_type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.RegisterActorReminderRequest.actor_type)
  return _internal_actor_type();
}
inline void RegisterActorReminderRequest::set_actor_type(const std::string& value) {
  _internal_set_actor_type(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RegisterActorReminderRequest.actor_type)
}
inline std::string* RegisterActorReminderRequest::mutable_actor_type() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.RegisterActorReminderRequest.actor_type)
  return _internal_mutable_actor_type();
}
inline const std::string& RegisterActorReminderRequest::_internal_actor_type() const {
  return actor_type_.Get();
}
inline void RegisterActorReminderRequest::_internal_set_actor_type(const std::string& value) {
  
  actor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterActorReminderRequest::set_actor_type(std::string&& value) {
  
  actor_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.RegisterActorReminderRequest.actor_type)
}
inline void RegisterActorReminderRequest::set_actor_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.RegisterActorReminderRequest.actor_type)
}
inline void RegisterActorReminderRequest::set_actor_type(const char* value,
    size_t size) {
  
  actor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.RegisterActorReminderRequest.actor_type)
}
inline std::string* RegisterActorReminderRequest::_internal_mutable_actor_type() {
  
  return actor_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterActorReminderRequest::release_actor_type() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.RegisterActorReminderRequest.actor_type)
  return actor_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterActorReminderRequest::set_allocated_actor_type(std::string* actor_type) {
  if (actor_type != nullptr) {
    
  } else {
    
  }
  actor_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actor_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.RegisterActorReminderRequest.actor_type)
}
inline std::string* RegisterActorReminderRequest::unsafe_arena_release_actor_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.RegisterActorReminderRequest.actor_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return actor_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterActorReminderRequest::unsafe_arena_set_allocated_actor_type(
    std::string* actor_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (actor_type != nullptr) {
    
  } else {
    
  }
  actor_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      actor_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.RegisterActorReminderRequest.actor_type)
}

// string actor_id = 2[json_name = "actorId"];
inline void RegisterActorReminderRequest::clear_actor_id() {
  actor_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterActorReminderRequest::actor_id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.RegisterActorReminderRequest.actor_id)
  return _internal_actor_id();
}
inline void RegisterActorReminderRequest::set_actor_id(const std::string& value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RegisterActorReminderRequest.actor_id)
}
inline std::string* RegisterActorReminderRequest::mutable_actor_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.RegisterActorReminderRequest.actor_id)
  return _internal_mutable_actor_id();
}
inline const std::string& RegisterActorReminderRequest::_internal_actor_id() const {
  return actor_id_.Get();
}
inline void RegisterActorReminderRequest::_internal_set_actor_id(const std::string& value) {
  
  actor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterActorReminderRequest::set_actor_id(std::string&& value) {
  
  actor_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.RegisterActorReminderRequest.actor_id)
}
inline void RegisterActorReminderRequest::set_actor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.RegisterActorReminderRequest.actor_id)
}
inline void RegisterActorReminderRequest::set_actor_id(const char* value,
    size_t size) {
  
  actor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.RegisterActorReminderRequest.actor_id)
}
inline std::string* RegisterActorReminderRequest::_internal_mutable_actor_id() {
  
  return actor_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterActorReminderRequest::release_actor_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.RegisterActorReminderRequest.actor_id)
  return actor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterActorReminderRequest::set_allocated_actor_id(std::string* actor_id) {
  if (actor_id != nullptr) {
    
  } else {
    
  }
  actor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actor_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.RegisterActorReminderRequest.actor_id)
}
inline std::string* RegisterActorReminderRequest::unsafe_arena_release_actor_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.RegisterActorReminderRequest.actor_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return actor_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterActorReminderRequest::unsafe_arena_set_allocated_actor_id(
    std::string* actor_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (actor_id != nullptr) {
    
  } else {
    
  }
  actor_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      actor_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.RegisterActorReminderRequest.actor_id)
}

// string name = 3;
inline void RegisterActorReminderRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterActorReminderRequest::name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.RegisterActorReminderRequest.name)
  return _internal_name();
}
inline void RegisterActorReminderRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RegisterActorReminderRequest.name)
}
inline std::string* RegisterActorReminderRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.RegisterActorReminderRequest.name)
  return _internal_mutable_name();
}
inline const std::string& RegisterActorReminderRequest::_internal_name() const {
  return name_.Get();
}
inline void RegisterActorReminderRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterActorReminderRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.RegisterActorReminderRequest.name)
}
inline void RegisterActorReminderRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.RegisterActorReminderRequest.name)
}
inline void RegisterActorReminderRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.RegisterActorReminderRequest.name)
}
inline std::string* RegisterActorReminderRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterActorReminderRequest::release_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.RegisterActorReminderRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterActorReminderRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.RegisterActorReminderRequest.name)
}
inline std::string* RegisterActorReminderRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.RegisterActorReminderRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterActorReminderRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.RegisterActorReminderRequest.name)
}

// string due_time = 4[json_name = "dueTime"];
inline void RegisterActorReminderRequest::clear_due_time() {
  due_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterActorReminderRequest::due_time() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.RegisterActorReminderRequest.due_time)
  return _internal_due_time();
}
inline void RegisterActorReminderRequest::set_due_time(const std::string& value) {
  _internal_set_due_time(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RegisterActorReminderRequest.due_time)
}
inline std::string* RegisterActorReminderRequest::mutable_due_time() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.RegisterActorReminderRequest.due_time)
  return _internal_mutable_due_time();
}
inline const std::string& RegisterActorReminderRequest::_internal_due_time() const {
  return due_time_.Get();
}
inline void RegisterActorReminderRequest::_internal_set_due_time(const std::string& value) {
  
  due_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterActorReminderRequest::set_due_time(std::string&& value) {
  
  due_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.RegisterActorReminderRequest.due_time)
}
inline void RegisterActorReminderRequest::set_due_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  due_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.RegisterActorReminderRequest.due_time)
}
inline void RegisterActorReminderRequest::set_due_time(const char* value,
    size_t size) {
  
  due_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.RegisterActorReminderRequest.due_time)
}
inline std::string* RegisterActorReminderRequest::_internal_mutable_due_time() {
  
  return due_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterActorReminderRequest::release_due_time() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.RegisterActorReminderRequest.due_time)
  return due_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterActorReminderRequest::set_allocated_due_time(std::string* due_time) {
  if (due_time != nullptr) {
    
  } else {
    
  }
  due_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), due_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.RegisterActorReminderRequest.due_time)
}
inline std::string* RegisterActorReminderRequest::unsafe_arena_release_due_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.RegisterActorReminderRequest.due_time)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return due_time_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterActorReminderRequest::unsafe_arena_set_allocated_due_time(
    std::string* due_time) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (due_time != nullptr) {
    
  } else {
    
  }
  due_time_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      due_time, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.RegisterActorReminderRequest.due_time)
}

// string period = 5;
inline void RegisterActorReminderRequest::clear_period() {
  period_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterActorReminderRequest::period() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.RegisterActorReminderRequest.period)
  return _internal_period();
}
inline void RegisterActorReminderRequest::set_period(const std::string& value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RegisterActorReminderRequest.period)
}
inline std::string* RegisterActorReminderRequest::mutable_period() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.RegisterActorReminderRequest.period)
  return _internal_mutable_period();
}
inline const std::string& RegisterActorReminderRequest::_internal_period() const {
  return period_.Get();
}
inline void RegisterActorReminderRequest::_internal_set_period(const std::string& value) {
  
  period_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterActorReminderRequest::set_period(std::string&& value) {
  
  period_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.RegisterActorReminderRequest.period)
}
inline void RegisterActorReminderRequest::set_period(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  period_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.RegisterActorReminderRequest.period)
}
inline void RegisterActorReminderRequest::set_period(const char* value,
    size_t size) {
  
  period_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.RegisterActorReminderRequest.period)
}
inline std::string* RegisterActorReminderRequest::_internal_mutable_period() {
  
  return period_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterActorReminderRequest::release_period() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.RegisterActorReminderRequest.period)
  return period_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterActorReminderRequest::set_allocated_period(std::string* period) {
  if (period != nullptr) {
    
  } else {
    
  }
  period_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), period,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.RegisterActorReminderRequest.period)
}
inline std::string* RegisterActorReminderRequest::unsafe_arena_release_period() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.RegisterActorReminderRequest.period)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return period_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterActorReminderRequest::unsafe_arena_set_allocated_period(
    std::string* period) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (period != nullptr) {
    
  } else {
    
  }
  period_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      period, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.RegisterActorReminderRequest.period)
}

// bytes data = 6;
inline void RegisterActorReminderRequest::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterActorReminderRequest::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.RegisterActorReminderRequest.data)
  return _internal_data();
}
inline void RegisterActorReminderRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RegisterActorReminderRequest.data)
}
inline std::string* RegisterActorReminderRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.RegisterActorReminderRequest.data)
  return _internal_mutable_data();
}
inline const std::string& RegisterActorReminderRequest::_internal_data() const {
  return data_.Get();
}
inline void RegisterActorReminderRequest::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterActorReminderRequest::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.RegisterActorReminderRequest.data)
}
inline void RegisterActorReminderRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.RegisterActorReminderRequest.data)
}
inline void RegisterActorReminderRequest::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.RegisterActorReminderRequest.data)
}
inline std::string* RegisterActorReminderRequest::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterActorReminderRequest::release_data() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.RegisterActorReminderRequest.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterActorReminderRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.RegisterActorReminderRequest.data)
}
inline std::string* RegisterActorReminderRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.RegisterActorReminderRequest.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterActorReminderRequest::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.RegisterActorReminderRequest.data)
}

// string ttl = 7;
inline void RegisterActorReminderRequest::clear_ttl() {
  ttl_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterActorReminderRequest::ttl() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.RegisterActorReminderRequest.ttl)
  return _internal_ttl();
}
inline void RegisterActorReminderRequest::set_ttl(const std::string& value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RegisterActorReminderRequest.ttl)
}
inline std::string* RegisterActorReminderRequest::mutable_ttl() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.RegisterActorReminderRequest.ttl)
  return _internal_mutable_ttl();
}
inline const std::string& RegisterActorReminderRequest::_internal_ttl() const {
  return ttl_.Get();
}
inline void RegisterActorReminderRequest::_internal_set_ttl(const std::string& value) {
  
  ttl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterActorReminderRequest::set_ttl(std::string&& value) {
  
  ttl_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.RegisterActorReminderRequest.ttl)
}
inline void RegisterActorReminderRequest::set_ttl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ttl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.RegisterActorReminderRequest.ttl)
}
inline void RegisterActorReminderRequest::set_ttl(const char* value,
    size_t size) {
  
  ttl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.RegisterActorReminderRequest.ttl)
}
inline std::string* RegisterActorReminderRequest::_internal_mutable_ttl() {
  
  return ttl_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterActorReminderRequest::release_ttl() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.RegisterActorReminderRequest.ttl)
  return ttl_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterActorReminderRequest::set_allocated_ttl(std::string* ttl) {
  if (ttl != nullptr) {
    
  } else {
    
  }
  ttl_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ttl,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.RegisterActorReminderRequest.ttl)
}
inline std::string* RegisterActorReminderRequest::unsafe_arena_release_ttl() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.RegisterActorReminderRequest.ttl)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ttl_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterActorReminderRequest::unsafe_arena_set_allocated_ttl(
    std::string* ttl) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ttl != nullptr) {
    
  } else {
    
  }
  ttl_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ttl, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.RegisterActorReminderRequest.ttl)
}

// -------------------------------------------------------------------

// UnregisterActorReminderRequest

// string actor_type = 1[json_name = "actorType"];
inline void UnregisterActorReminderRequest::clear_actor_type() {
  actor_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnregisterActorReminderRequest::actor_type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.UnregisterActorReminderRequest.actor_type)
  return _internal_actor_type();
}
inline void UnregisterActorReminderRequest::set_actor_type(const std::string& value) {
  _internal_set_actor_type(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.UnregisterActorReminderRequest.actor_type)
}
inline std::string* UnregisterActorReminderRequest::mutable_actor_type() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.UnregisterActorReminderRequest.actor_type)
  return _internal_mutable_actor_type();
}
inline const std::string& UnregisterActorReminderRequest::_internal_actor_type() const {
  return actor_type_.Get();
}
inline void UnregisterActorReminderRequest::_internal_set_actor_type(const std::string& value) {
  
  actor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnregisterActorReminderRequest::set_actor_type(std::string&& value) {
  
  actor_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.UnregisterActorReminderRequest.actor_type)
}
inline void UnregisterActorReminderRequest::set_actor_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.UnregisterActorReminderRequest.actor_type)
}
inline void UnregisterActorReminderRequest::set_actor_type(const char* value,
    size_t size) {
  
  actor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.UnregisterActorReminderRequest.actor_type)
}
inline std::string* UnregisterActorReminderRequest::_internal_mutable_actor_type() {
  
  return actor_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnregisterActorReminderRequest::release_actor_type() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.UnregisterActorReminderRequest.actor_type)
  return actor_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnregisterActorReminderRequest::set_allocated_actor_type(std::string* actor_type) {
  if (actor_type != nullptr) {
    
  } else {
    
  }
  actor_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actor_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.UnregisterActorReminderRequest.actor_type)
}
inline std::string* UnregisterActorReminderRequest::unsafe_arena_release_actor_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.UnregisterActorReminderRequest.actor_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return actor_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UnregisterActorReminderRequest::unsafe_arena_set_allocated_actor_type(
    std::string* actor_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (actor_type != nullptr) {
    
  } else {
    
  }
  actor_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      actor_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.UnregisterActorReminderRequest.actor_type)
}

// string actor_id = 2[json_name = "actorId"];
inline void UnregisterActorReminderRequest::clear_actor_id() {
  actor_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnregisterActorReminderRequest::actor_id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.UnregisterActorReminderRequest.actor_id)
  return _internal_actor_id();
}
inline void UnregisterActorReminderRequest::set_actor_id(const std::string& value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.UnregisterActorReminderRequest.actor_id)
}
inline std::string* UnregisterActorReminderRequest::mutable_actor_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.UnregisterActorReminderRequest.actor_id)
  return _internal_mutable_actor_id();
}
inline const std::string& UnregisterActorReminderRequest::_internal_actor_id() const {
  return actor_id_.Get();
}
inline void UnregisterActorReminderRequest::_internal_set_actor_id(const std::string& value) {
  
  actor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnregisterActorReminderRequest::set_actor_id(std::string&& value) {
  
  actor_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.UnregisterActorReminderRequest.actor_id)
}
inline void UnregisterActorReminderRequest::set_actor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.UnregisterActorReminderRequest.actor_id)
}
inline void UnregisterActorReminderRequest::set_actor_id(const char* value,
    size_t size) {
  
  actor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.UnregisterActorReminderRequest.actor_id)
}
inline std::string* UnregisterActorReminderRequest::_internal_mutable_actor_id() {
  
  return actor_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnregisterActorReminderRequest::release_actor_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.UnregisterActorReminderRequest.actor_id)
  return actor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnregisterActorReminderRequest::set_allocated_actor_id(std::string* actor_id) {
  if (actor_id != nullptr) {
    
  } else {
    
  }
  actor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actor_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.UnregisterActorReminderRequest.actor_id)
}
inline std::string* UnregisterActorReminderRequest::unsafe_arena_release_actor_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.UnregisterActorReminderRequest.actor_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return actor_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UnregisterActorReminderRequest::unsafe_arena_set_allocated_actor_id(
    std::string* actor_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (actor_id != nullptr) {
    
  } else {
    
  }
  actor_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      actor_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.UnregisterActorReminderRequest.actor_id)
}

// string name = 3;
inline void UnregisterActorReminderRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnregisterActorReminderRequest::name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.UnregisterActorReminderRequest.name)
  return _internal_name();
}
inline void UnregisterActorReminderRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.UnregisterActorReminderRequest.name)
}
inline std::string* UnregisterActorReminderRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.UnregisterActorReminderRequest.name)
  return _internal_mutable_name();
}
inline const std::string& UnregisterActorReminderRequest::_internal_name() const {
  return name_.Get();
}
inline void UnregisterActorReminderRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnregisterActorReminderRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.UnregisterActorReminderRequest.name)
}
inline void UnregisterActorReminderRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.UnregisterActorReminderRequest.name)
}
inline void UnregisterActorReminderRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.UnregisterActorReminderRequest.name)
}
inline std::string* UnregisterActorReminderRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnregisterActorReminderRequest::release_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.UnregisterActorReminderRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnregisterActorReminderRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.UnregisterActorReminderRequest.name)
}
inline std::string* UnregisterActorReminderRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.UnregisterActorReminderRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UnregisterActorReminderRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.UnregisterActorReminderRequest.name)
}

// -------------------------------------------------------------------

// GetActorStateRequest

// string actor_type = 1[json_name = "actorType"];
inline void GetActorStateRequest::clear_actor_type() {
  actor_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetActorStateRequest::actor_type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetActorStateRequest.actor_type)
  return _internal_actor_type();
}
inline void GetActorStateRequest::set_actor_type(const std::string& value) {
  _internal_set_actor_type(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetActorStateRequest.actor_type)
}
inline std::string* GetActorStateRequest::mutable_actor_type() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetActorStateRequest.actor_type)
  return _internal_mutable_actor_type();
}
inline const std::string& GetActorStateRequest::_internal_actor_type() const {
  return actor_type_.Get();
}
inline void GetActorStateRequest::_internal_set_actor_type(const std::string& value) {
  
  actor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetActorStateRequest::set_actor_type(std::string&& value) {
  
  actor_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.GetActorStateRequest.actor_type)
}
inline void GetActorStateRequest::set_actor_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetActorStateRequest.actor_type)
}
inline void GetActorStateRequest::set_actor_type(const char* value,
    size_t size) {
  
  actor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetActorStateRequest.actor_type)
}
inline std::string* GetActorStateRequest::_internal_mutable_actor_type() {
  
  return actor_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetActorStateRequest::release_actor_type() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetActorStateRequest.actor_type)
  return actor_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetActorStateRequest::set_allocated_actor_type(std::string* actor_type) {
  if (actor_type != nullptr) {
    
  } else {
    
  }
  actor_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actor_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetActorStateRequest.actor_type)
}
inline std::string* GetActorStateRequest::unsafe_arena_release_actor_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.GetActorStateRequest.actor_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return actor_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetActorStateRequest::unsafe_arena_set_allocated_actor_type(
    std::string* actor_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (actor_type != nullptr) {
    
  } else {
    
  }
  actor_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      actor_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetActorStateRequest.actor_type)
}

// string actor_id = 2[json_name = "actorId"];
inline void GetActorStateRequest::clear_actor_id() {
  actor_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetActorStateRequest::actor_id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetActorStateRequest.actor_id)
  return _internal_actor_id();
}
inline void GetActorStateRequest::set_actor_id(const std::string& value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetActorStateRequest.actor_id)
}
inline std::string* GetActorStateRequest::mutable_actor_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetActorStateRequest.actor_id)
  return _internal_mutable_actor_id();
}
inline const std::string& GetActorStateRequest::_internal_actor_id() const {
  return actor_id_.Get();
}
inline void GetActorStateRequest::_internal_set_actor_id(const std::string& value) {
  
  actor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetActorStateRequest::set_actor_id(std::string&& value) {
  
  actor_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.GetActorStateRequest.actor_id)
}
inline void GetActorStateRequest::set_actor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetActorStateRequest.actor_id)
}
inline void GetActorStateRequest::set_actor_id(const char* value,
    size_t size) {
  
  actor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetActorStateRequest.actor_id)
}
inline std::string* GetActorStateRequest::_internal_mutable_actor_id() {
  
  return actor_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetActorStateRequest::release_actor_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetActorStateRequest.actor_id)
  return actor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetActorStateRequest::set_allocated_actor_id(std::string* actor_id) {
  if (actor_id != nullptr) {
    
  } else {
    
  }
  actor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actor_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetActorStateRequest.actor_id)
}
inline std::string* GetActorStateRequest::unsafe_arena_release_actor_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.GetActorStateRequest.actor_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return actor_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetActorStateRequest::unsafe_arena_set_allocated_actor_id(
    std::string* actor_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (actor_id != nullptr) {
    
  } else {
    
  }
  actor_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      actor_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetActorStateRequest.actor_id)
}

// string key = 3;
inline void GetActorStateRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetActorStateRequest::key() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetActorStateRequest.key)
  return _internal_key();
}
inline void GetActorStateRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetActorStateRequest.key)
}
inline std::string* GetActorStateRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetActorStateRequest.key)
  return _internal_mutable_key();
}
inline const std::string& GetActorStateRequest::_internal_key() const {
  return key_.Get();
}
inline void GetActorStateRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetActorStateRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.GetActorStateRequest.key)
}
inline void GetActorStateRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetActorStateRequest.key)
}
inline void GetActorStateRequest::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetActorStateRequest.key)
}
inline std::string* GetActorStateRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetActorStateRequest::release_key() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetActorStateRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetActorStateRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetActorStateRequest.key)
}
inline std::string* GetActorStateRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.GetActorStateRequest.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetActorStateRequest::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetActorStateRequest.key)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetActorStateResponse

// bytes data = 1;
inline void GetActorStateResponse::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetActorStateResponse::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetActorStateResponse.data)
  return _internal_data();
}
inline void GetActorStateResponse::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetActorStateResponse.data)
}
inline std::string* GetActorStateResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetActorStateResponse.data)
  return _internal_mutable_data();
}
inline const std::string& GetActorStateResponse::_internal_data() const {
  return data_.Get();
}
inline void GetActorStateResponse::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetActorStateResponse::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.GetActorStateResponse.data)
}
inline void GetActorStateResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetActorStateResponse.data)
}
inline void GetActorStateResponse::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetActorStateResponse.data)
}
inline std::string* GetActorStateResponse::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetActorStateResponse::release_data() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetActorStateResponse.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetActorStateResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetActorStateResponse.data)
}
inline std::string* GetActorStateResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.GetActorStateResponse.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetActorStateResponse::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetActorStateResponse.data)
}

// map<string, string> metadata = 2;
inline int GetActorStateResponse::_internal_metadata_size() const {
  return metadata_.size();
}
inline int GetActorStateResponse::metadata_size() const {
  return _internal_metadata_size();
}
inline void GetActorStateResponse::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetActorStateResponse::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetActorStateResponse::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.GetActorStateResponse.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetActorStateResponse::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetActorStateResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.GetActorStateResponse.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// ExecuteActorStateTransactionRequest

// string actor_type = 1[json_name = "actorType"];
inline void ExecuteActorStateTransactionRequest::clear_actor_type() {
  actor_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExecuteActorStateTransactionRequest::actor_type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.actor_type)
  return _internal_actor_type();
}
inline void ExecuteActorStateTransactionRequest::set_actor_type(const std::string& value) {
  _internal_set_actor_type(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.actor_type)
}
inline std::string* ExecuteActorStateTransactionRequest::mutable_actor_type() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.actor_type)
  return _internal_mutable_actor_type();
}
inline const std::string& ExecuteActorStateTransactionRequest::_internal_actor_type() const {
  return actor_type_.Get();
}
inline void ExecuteActorStateTransactionRequest::_internal_set_actor_type(const std::string& value) {
  
  actor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecuteActorStateTransactionRequest::set_actor_type(std::string&& value) {
  
  actor_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.actor_type)
}
inline void ExecuteActorStateTransactionRequest::set_actor_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.actor_type)
}
inline void ExecuteActorStateTransactionRequest::set_actor_type(const char* value,
    size_t size) {
  
  actor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.actor_type)
}
inline std::string* ExecuteActorStateTransactionRequest::_internal_mutable_actor_type() {
  
  return actor_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecuteActorStateTransactionRequest::release_actor_type() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.actor_type)
  return actor_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecuteActorStateTransactionRequest::set_allocated_actor_type(std::string* actor_type) {
  if (actor_type != nullptr) {
    
  } else {
    
  }
  actor_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actor_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.actor_type)
}
inline std::string* ExecuteActorStateTransactionRequest::unsafe_arena_release_actor_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.actor_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return actor_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecuteActorStateTransactionRequest::unsafe_arena_set_allocated_actor_type(
    std::string* actor_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (actor_type != nullptr) {
    
  } else {
    
  }
  actor_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      actor_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.actor_type)
}

// string actor_id = 2[json_name = "actorId"];
inline void ExecuteActorStateTransactionRequest::clear_actor_id() {
  actor_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExecuteActorStateTransactionRequest::actor_id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.actor_id)
  return _internal_actor_id();
}
inline void ExecuteActorStateTransactionRequest::set_actor_id(const std::string& value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.actor_id)
}
inline std::string* ExecuteActorStateTransactionRequest::mutable_actor_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.actor_id)
  return _internal_mutable_actor_id();
}
inline const std::string& ExecuteActorStateTransactionRequest::_internal_actor_id() const {
  return actor_id_.Get();
}
inline void ExecuteActorStateTransactionRequest::_internal_set_actor_id(const std::string& value) {
  
  actor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecuteActorStateTransactionRequest::set_actor_id(std::string&& value) {
  
  actor_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.actor_id)
}
inline void ExecuteActorStateTransactionRequest::set_actor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.actor_id)
}
inline void ExecuteActorStateTransactionRequest::set_actor_id(const char* value,
    size_t size) {
  
  actor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.actor_id)
}
inline std::string* ExecuteActorStateTransactionRequest::_internal_mutable_actor_id() {
  
  return actor_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecuteActorStateTransactionRequest::release_actor_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.actor_id)
  return actor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecuteActorStateTransactionRequest::set_allocated_actor_id(std::string* actor_id) {
  if (actor_id != nullptr) {
    
  } else {
    
  }
  actor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actor_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.actor_id)
}
inline std::string* ExecuteActorStateTransactionRequest::unsafe_arena_release_actor_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.actor_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return actor_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecuteActorStateTransactionRequest::unsafe_arena_set_allocated_actor_id(
    std::string* actor_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (actor_id != nullptr) {
    
  } else {
    
  }
  actor_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      actor_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.actor_id)
}

// repeated .dapr.proto.runtime.v1.TransactionalActorStateOperation operations = 3;
inline int ExecuteActorStateTransactionRequest::_internal_operations_size() const {
  return operations_.size();
}
inline int ExecuteActorStateTransactionRequest::operations_size() const {
  return _internal_operations_size();
}
inline void ExecuteActorStateTransactionRequest::clear_operations() {
  operations_.Clear();
}
inline ::dapr::proto::runtime::v1::TransactionalActorStateOperation* ExecuteActorStateTransactionRequest::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.operations)
  return operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::TransactionalActorStateOperation >*
ExecuteActorStateTransactionRequest::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.operations)
  return &operations_;
}
inline const ::dapr::proto::runtime::v1::TransactionalActorStateOperation& ExecuteActorStateTransactionRequest::_internal_operations(int index) const {
  return operations_.Get(index);
}
inline const ::dapr::proto::runtime::v1::TransactionalActorStateOperation& ExecuteActorStateTransactionRequest::operations(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.operations)
  return _internal_operations(index);
}
inline ::dapr::proto::runtime::v1::TransactionalActorStateOperation* ExecuteActorStateTransactionRequest::_internal_add_operations() {
  return operations_.Add();
}
inline ::dapr::proto::runtime::v1::TransactionalActorStateOperation* ExecuteActorStateTransactionRequest::add_operations() {
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.operations)
  return _internal_add_operations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::TransactionalActorStateOperation >&
ExecuteActorStateTransactionRequest::operations() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.ExecuteActorStateTransactionRequest.operations)
  return operations_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TransactionalActorStateOperation

// string operationType = 1;
inline void TransactionalActorStateOperation::clear_operationtype() {
  operationtype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TransactionalActorStateOperation::operationtype() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TransactionalActorStateOperation.operationType)
  return _internal_operationtype();
}
inline void TransactionalActorStateOperation::set_operationtype(const std::string& value) {
  _internal_set_operationtype(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TransactionalActorStateOperation.operationType)
}
inline std::string* TransactionalActorStateOperation::mutable_operationtype() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TransactionalActorStateOperation.operationType)
  return _internal_mutable_operationtype();
}
inline const std::string& TransactionalActorStateOperation::_internal_operationtype() const {
  return operationtype_.Get();
}
inline void TransactionalActorStateOperation::_internal_set_operationtype(const std::string& value) {
  
  operationtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransactionalActorStateOperation::set_operationtype(std::string&& value) {
  
  operationtype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.TransactionalActorStateOperation.operationType)
}
inline void TransactionalActorStateOperation::set_operationtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operationtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.TransactionalActorStateOperation.operationType)
}
inline void TransactionalActorStateOperation::set_operationtype(const char* value,
    size_t size) {
  
  operationtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.TransactionalActorStateOperation.operationType)
}
inline std::string* TransactionalActorStateOperation::_internal_mutable_operationtype() {
  
  return operationtype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransactionalActorStateOperation::release_operationtype() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TransactionalActorStateOperation.operationType)
  return operationtype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionalActorStateOperation::set_allocated_operationtype(std::string* operationtype) {
  if (operationtype != nullptr) {
    
  } else {
    
  }
  operationtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operationtype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TransactionalActorStateOperation.operationType)
}
inline std::string* TransactionalActorStateOperation::unsafe_arena_release_operationtype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.TransactionalActorStateOperation.operationType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return operationtype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TransactionalActorStateOperation::unsafe_arena_set_allocated_operationtype(
    std::string* operationtype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (operationtype != nullptr) {
    
  } else {
    
  }
  operationtype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      operationtype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.TransactionalActorStateOperation.operationType)
}

// string key = 2;
inline void TransactionalActorStateOperation::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TransactionalActorStateOperation::key() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TransactionalActorStateOperation.key)
  return _internal_key();
}
inline void TransactionalActorStateOperation::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TransactionalActorStateOperation.key)
}
inline std::string* TransactionalActorStateOperation::mutable_key() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TransactionalActorStateOperation.key)
  return _internal_mutable_key();
}
inline const std::string& TransactionalActorStateOperation::_internal_key() const {
  return key_.Get();
}
inline void TransactionalActorStateOperation::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransactionalActorStateOperation::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.TransactionalActorStateOperation.key)
}
inline void TransactionalActorStateOperation::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.TransactionalActorStateOperation.key)
}
inline void TransactionalActorStateOperation::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.TransactionalActorStateOperation.key)
}
inline std::string* TransactionalActorStateOperation::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransactionalActorStateOperation::release_key() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TransactionalActorStateOperation.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionalActorStateOperation::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TransactionalActorStateOperation.key)
}
inline std::string* TransactionalActorStateOperation::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.TransactionalActorStateOperation.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TransactionalActorStateOperation::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.TransactionalActorStateOperation.key)
}

// .google.protobuf.Any value = 3;
inline bool TransactionalActorStateOperation::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool TransactionalActorStateOperation::has_value() const {
  return _internal_has_value();
}
inline const PROTOBUF_NAMESPACE_ID::Any& TransactionalActorStateOperation::_internal_value() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& TransactionalActorStateOperation::value() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TransactionalActorStateOperation.value)
  return _internal_value();
}
inline void TransactionalActorStateOperation::unsafe_arena_set_allocated_value(
    PROTOBUF_NAMESPACE_ID::Any* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.TransactionalActorStateOperation.value)
}
inline PROTOBUF_NAMESPACE_ID::Any* TransactionalActorStateOperation::release_value() {
  auto temp = unsafe_arena_release_value();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* TransactionalActorStateOperation::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TransactionalActorStateOperation.value)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = value_;
  value_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* TransactionalActorStateOperation::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    value_ = p;
  }
  return value_;
}
inline PROTOBUF_NAMESPACE_ID::Any* TransactionalActorStateOperation::mutable_value() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TransactionalActorStateOperation.value)
  return _internal_mutable_value();
}
inline void TransactionalActorStateOperation::set_allocated_value(PROTOBUF_NAMESPACE_ID::Any* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TransactionalActorStateOperation.value)
}

// map<string, string> metadata = 4;
inline int TransactionalActorStateOperation::_internal_metadata_size() const {
  return metadata_.size();
}
inline int TransactionalActorStateOperation::metadata_size() const {
  return _internal_metadata_size();
}
inline void TransactionalActorStateOperation::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TransactionalActorStateOperation::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TransactionalActorStateOperation::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.TransactionalActorStateOperation.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TransactionalActorStateOperation::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TransactionalActorStateOperation::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.TransactionalActorStateOperation.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InvokeActorRequest

// string actor_type = 1[json_name = "actorType"];
inline void InvokeActorRequest::clear_actor_type() {
  actor_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InvokeActorRequest::actor_type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.InvokeActorRequest.actor_type)
  return _internal_actor_type();
}
inline void InvokeActorRequest::set_actor_type(const std::string& value) {
  _internal_set_actor_type(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.InvokeActorRequest.actor_type)
}
inline std::string* InvokeActorRequest::mutable_actor_type() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.InvokeActorRequest.actor_type)
  return _internal_mutable_actor_type();
}
inline const std::string& InvokeActorRequest::_internal_actor_type() const {
  return actor_type_.Get();
}
inline void InvokeActorRequest::_internal_set_actor_type(const std::string& value) {
  
  actor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InvokeActorRequest::set_actor_type(std::string&& value) {
  
  actor_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.InvokeActorRequest.actor_type)
}
inline void InvokeActorRequest::set_actor_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.InvokeActorRequest.actor_type)
}
inline void InvokeActorRequest::set_actor_type(const char* value,
    size_t size) {
  
  actor_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.InvokeActorRequest.actor_type)
}
inline std::string* InvokeActorRequest::_internal_mutable_actor_type() {
  
  return actor_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InvokeActorRequest::release_actor_type() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.InvokeActorRequest.actor_type)
  return actor_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvokeActorRequest::set_allocated_actor_type(std::string* actor_type) {
  if (actor_type != nullptr) {
    
  } else {
    
  }
  actor_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actor_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.InvokeActorRequest.actor_type)
}
inline std::string* InvokeActorRequest::unsafe_arena_release_actor_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.InvokeActorRequest.actor_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return actor_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InvokeActorRequest::unsafe_arena_set_allocated_actor_type(
    std::string* actor_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (actor_type != nullptr) {
    
  } else {
    
  }
  actor_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      actor_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.InvokeActorRequest.actor_type)
}

// string actor_id = 2[json_name = "actorId"];
inline void InvokeActorRequest::clear_actor_id() {
  actor_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InvokeActorRequest::actor_id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.InvokeActorRequest.actor_id)
  return _internal_actor_id();
}
inline void InvokeActorRequest::set_actor_id(const std::string& value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.InvokeActorRequest.actor_id)
}
inline std::string* InvokeActorRequest::mutable_actor_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.InvokeActorRequest.actor_id)
  return _internal_mutable_actor_id();
}
inline const std::string& InvokeActorRequest::_internal_actor_id() const {
  return actor_id_.Get();
}
inline void InvokeActorRequest::_internal_set_actor_id(const std::string& value) {
  
  actor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InvokeActorRequest::set_actor_id(std::string&& value) {
  
  actor_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.InvokeActorRequest.actor_id)
}
inline void InvokeActorRequest::set_actor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.InvokeActorRequest.actor_id)
}
inline void InvokeActorRequest::set_actor_id(const char* value,
    size_t size) {
  
  actor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.InvokeActorRequest.actor_id)
}
inline std::string* InvokeActorRequest::_internal_mutable_actor_id() {
  
  return actor_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InvokeActorRequest::release_actor_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.InvokeActorRequest.actor_id)
  return actor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvokeActorRequest::set_allocated_actor_id(std::string* actor_id) {
  if (actor_id != nullptr) {
    
  } else {
    
  }
  actor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actor_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.InvokeActorRequest.actor_id)
}
inline std::string* InvokeActorRequest::unsafe_arena_release_actor_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.InvokeActorRequest.actor_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return actor_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InvokeActorRequest::unsafe_arena_set_allocated_actor_id(
    std::string* actor_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (actor_id != nullptr) {
    
  } else {
    
  }
  actor_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      actor_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.InvokeActorRequest.actor_id)
}

// string method = 3;
inline void InvokeActorRequest::clear_method() {
  method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InvokeActorRequest::method() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.InvokeActorRequest.method)
  return _internal_method();
}
inline void InvokeActorRequest::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.InvokeActorRequest.method)
}
inline std::string* InvokeActorRequest::mutable_method() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.InvokeActorRequest.method)
  return _internal_mutable_method();
}
inline const std::string& InvokeActorRequest::_internal_method() const {
  return method_.Get();
}
inline void InvokeActorRequest::_internal_set_method(const std::string& value) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InvokeActorRequest::set_method(std::string&& value) {
  
  method_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.InvokeActorRequest.method)
}
inline void InvokeActorRequest::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.InvokeActorRequest.method)
}
inline void InvokeActorRequest::set_method(const char* value,
    size_t size) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.InvokeActorRequest.method)
}
inline std::string* InvokeActorRequest::_internal_mutable_method() {
  
  return method_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InvokeActorRequest::release_method() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.InvokeActorRequest.method)
  return method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvokeActorRequest::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.InvokeActorRequest.method)
}
inline std::string* InvokeActorRequest::unsafe_arena_release_method() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.InvokeActorRequest.method)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return method_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InvokeActorRequest::unsafe_arena_set_allocated_method(
    std::string* method) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (method != nullptr) {
    
  } else {
    
  }
  method_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      method, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.InvokeActorRequest.method)
}

// bytes data = 4;
inline void InvokeActorRequest::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InvokeActorRequest::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.InvokeActorRequest.data)
  return _internal_data();
}
inline void InvokeActorRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.InvokeActorRequest.data)
}
inline std::string* InvokeActorRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.InvokeActorRequest.data)
  return _internal_mutable_data();
}
inline const std::string& InvokeActorRequest::_internal_data() const {
  return data_.Get();
}
inline void InvokeActorRequest::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InvokeActorRequest::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.InvokeActorRequest.data)
}
inline void InvokeActorRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.InvokeActorRequest.data)
}
inline void InvokeActorRequest::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.InvokeActorRequest.data)
}
inline std::string* InvokeActorRequest::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InvokeActorRequest::release_data() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.InvokeActorRequest.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvokeActorRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.InvokeActorRequest.data)
}
inline std::string* InvokeActorRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.InvokeActorRequest.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InvokeActorRequest::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.InvokeActorRequest.data)
}

// map<string, string> metadata = 5;
inline int InvokeActorRequest::_internal_metadata_size() const {
  return metadata_.size();
}
inline int InvokeActorRequest::metadata_size() const {
  return _internal_metadata_size();
}
inline void InvokeActorRequest::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InvokeActorRequest::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InvokeActorRequest::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.InvokeActorRequest.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InvokeActorRequest::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InvokeActorRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.InvokeActorRequest.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// InvokeActorResponse

// bytes data = 1;
inline void InvokeActorResponse::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InvokeActorResponse::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.InvokeActorResponse.data)
  return _internal_data();
}
inline void InvokeActorResponse::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.InvokeActorResponse.data)
}
inline std::string* InvokeActorResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.InvokeActorResponse.data)
  return _internal_mutable_data();
}
inline const std::string& InvokeActorResponse::_internal_data() const {
  return data_.Get();
}
inline void InvokeActorResponse::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InvokeActorResponse::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.InvokeActorResponse.data)
}
inline void InvokeActorResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.InvokeActorResponse.data)
}
inline void InvokeActorResponse::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.InvokeActorResponse.data)
}
inline std::string* InvokeActorResponse::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InvokeActorResponse::release_data() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.InvokeActorResponse.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvokeActorResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.InvokeActorResponse.data)
}
inline std::string* InvokeActorResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.InvokeActorResponse.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InvokeActorResponse::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.InvokeActorResponse.data)
}

// -------------------------------------------------------------------

// GetMetadataRequest

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetMetadataResponse

// string id = 1;
inline void GetMetadataResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetMetadataResponse::id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetMetadataResponse.id)
  return _internal_id();
}
inline void GetMetadataResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetMetadataResponse.id)
}
inline std::string* GetMetadataResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetMetadataResponse.id)
  return _internal_mutable_id();
}
inline const std::string& GetMetadataResponse::_internal_id() const {
  return id_.Get();
}
inline void GetMetadataResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetMetadataResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.GetMetadataResponse.id)
}
inline void GetMetadataResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetMetadataResponse.id)
}
inline void GetMetadataResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetMetadataResponse.id)
}
inline std::string* GetMetadataResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetMetadataResponse::release_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetMetadataResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetMetadataResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetMetadataResponse.id)
}
inline std::string* GetMetadataResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.GetMetadataResponse.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetMetadataResponse::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetMetadataResponse.id)
}

// repeated .dapr.proto.runtime.v1.ActiveActorsCount active_actors_count = 2[json_name = "actors", deprecated = true];
inline int GetMetadataResponse::_internal_active_actors_count_size() const {
  return active_actors_count_.size();
}
inline int GetMetadataResponse::active_actors_count_size() const {
  return _internal_active_actors_count_size();
}
inline void GetMetadataResponse::clear_active_actors_count() {
  active_actors_count_.Clear();
}
inline ::dapr::proto::runtime::v1::ActiveActorsCount* GetMetadataResponse::mutable_active_actors_count(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetMetadataResponse.active_actors_count)
  return active_actors_count_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::ActiveActorsCount >*
GetMetadataResponse::mutable_active_actors_count() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.GetMetadataResponse.active_actors_count)
  return &active_actors_count_;
}
inline const ::dapr::proto::runtime::v1::ActiveActorsCount& GetMetadataResponse::_internal_active_actors_count(int index) const {
  return active_actors_count_.Get(index);
}
inline const ::dapr::proto::runtime::v1::ActiveActorsCount& GetMetadataResponse::active_actors_count(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetMetadataResponse.active_actors_count)
  return _internal_active_actors_count(index);
}
inline ::dapr::proto::runtime::v1::ActiveActorsCount* GetMetadataResponse::_internal_add_active_actors_count() {
  return active_actors_count_.Add();
}
inline ::dapr::proto::runtime::v1::ActiveActorsCount* GetMetadataResponse::add_active_actors_count() {
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.GetMetadataResponse.active_actors_count)
  return _internal_add_active_actors_count();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::ActiveActorsCount >&
GetMetadataResponse::active_actors_count() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.GetMetadataResponse.active_actors_count)
  return active_actors_count_;
}

// repeated .dapr.proto.runtime.v1.RegisteredComponents registered_components = 3[json_name = "components"];
inline int GetMetadataResponse::_internal_registered_components_size() const {
  return registered_components_.size();
}
inline int GetMetadataResponse::registered_components_size() const {
  return _internal_registered_components_size();
}
inline void GetMetadataResponse::clear_registered_components() {
  registered_components_.Clear();
}
inline ::dapr::proto::runtime::v1::RegisteredComponents* GetMetadataResponse::mutable_registered_components(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetMetadataResponse.registered_components)
  return registered_components_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::RegisteredComponents >*
GetMetadataResponse::mutable_registered_components() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.GetMetadataResponse.registered_components)
  return &registered_components_;
}
inline const ::dapr::proto::runtime::v1::RegisteredComponents& GetMetadataResponse::_internal_registered_components(int index) const {
  return registered_components_.Get(index);
}
inline const ::dapr::proto::runtime::v1::RegisteredComponents& GetMetadataResponse::registered_components(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetMetadataResponse.registered_components)
  return _internal_registered_components(index);
}
inline ::dapr::proto::runtime::v1::RegisteredComponents* GetMetadataResponse::_internal_add_registered_components() {
  return registered_components_.Add();
}
inline ::dapr::proto::runtime::v1::RegisteredComponents* GetMetadataResponse::add_registered_components() {
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.GetMetadataResponse.registered_components)
  return _internal_add_registered_components();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::RegisteredComponents >&
GetMetadataResponse::registered_components() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.GetMetadataResponse.registered_components)
  return registered_components_;
}

// map<string, string> extended_metadata = 4[json_name = "extended"];
inline int GetMetadataResponse::_internal_extended_metadata_size() const {
  return extended_metadata_.size();
}
inline int GetMetadataResponse::extended_metadata_size() const {
  return _internal_extended_metadata_size();
}
inline void GetMetadataResponse::clear_extended_metadata() {
  extended_metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetMetadataResponse::_internal_extended_metadata() const {
  return extended_metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetMetadataResponse::extended_metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.GetMetadataResponse.extended_metadata)
  return _internal_extended_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetMetadataResponse::_internal_mutable_extended_metadata() {
  return extended_metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetMetadataResponse::mutable_extended_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.GetMetadataResponse.extended_metadata)
  return _internal_mutable_extended_metadata();
}

// repeated .dapr.proto.runtime.v1.PubsubSubscription subscriptions = 5[json_name = "subscriptions"];
inline int GetMetadataResponse::_internal_subscriptions_size() const {
  return subscriptions_.size();
}
inline int GetMetadataResponse::subscriptions_size() const {
  return _internal_subscriptions_size();
}
inline void GetMetadataResponse::clear_subscriptions() {
  subscriptions_.Clear();
}
inline ::dapr::proto::runtime::v1::PubsubSubscription* GetMetadataResponse::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetMetadataResponse.subscriptions)
  return subscriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::PubsubSubscription >*
GetMetadataResponse::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.GetMetadataResponse.subscriptions)
  return &subscriptions_;
}
inline const ::dapr::proto::runtime::v1::PubsubSubscription& GetMetadataResponse::_internal_subscriptions(int index) const {
  return subscriptions_.Get(index);
}
inline const ::dapr::proto::runtime::v1::PubsubSubscription& GetMetadataResponse::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetMetadataResponse.subscriptions)
  return _internal_subscriptions(index);
}
inline ::dapr::proto::runtime::v1::PubsubSubscription* GetMetadataResponse::_internal_add_subscriptions() {
  return subscriptions_.Add();
}
inline ::dapr::proto::runtime::v1::PubsubSubscription* GetMetadataResponse::add_subscriptions() {
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.GetMetadataResponse.subscriptions)
  return _internal_add_subscriptions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::PubsubSubscription >&
GetMetadataResponse::subscriptions() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.GetMetadataResponse.subscriptions)
  return subscriptions_;
}

// repeated .dapr.proto.runtime.v1.MetadataHTTPEndpoint http_endpoints = 6[json_name = "httpEndpoints"];
inline int GetMetadataResponse::_internal_http_endpoints_size() const {
  return http_endpoints_.size();
}
inline int GetMetadataResponse::http_endpoints_size() const {
  return _internal_http_endpoints_size();
}
inline void GetMetadataResponse::clear_http_endpoints() {
  http_endpoints_.Clear();
}
inline ::dapr::proto::runtime::v1::MetadataHTTPEndpoint* GetMetadataResponse::mutable_http_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetMetadataResponse.http_endpoints)
  return http_endpoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::MetadataHTTPEndpoint >*
GetMetadataResponse::mutable_http_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.GetMetadataResponse.http_endpoints)
  return &http_endpoints_;
}
inline const ::dapr::proto::runtime::v1::MetadataHTTPEndpoint& GetMetadataResponse::_internal_http_endpoints(int index) const {
  return http_endpoints_.Get(index);
}
inline const ::dapr::proto::runtime::v1::MetadataHTTPEndpoint& GetMetadataResponse::http_endpoints(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetMetadataResponse.http_endpoints)
  return _internal_http_endpoints(index);
}
inline ::dapr::proto::runtime::v1::MetadataHTTPEndpoint* GetMetadataResponse::_internal_add_http_endpoints() {
  return http_endpoints_.Add();
}
inline ::dapr::proto::runtime::v1::MetadataHTTPEndpoint* GetMetadataResponse::add_http_endpoints() {
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.GetMetadataResponse.http_endpoints)
  return _internal_add_http_endpoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::MetadataHTTPEndpoint >&
GetMetadataResponse::http_endpoints() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.GetMetadataResponse.http_endpoints)
  return http_endpoints_;
}

// .dapr.proto.runtime.v1.AppConnectionProperties app_connection_properties = 7[json_name = "appConnectionProperties"];
inline bool GetMetadataResponse::_internal_has_app_connection_properties() const {
  return this != internal_default_instance() && app_connection_properties_ != nullptr;
}
inline bool GetMetadataResponse::has_app_connection_properties() const {
  return _internal_has_app_connection_properties();
}
inline void GetMetadataResponse::clear_app_connection_properties() {
  if (GetArena() == nullptr && app_connection_properties_ != nullptr) {
    delete app_connection_properties_;
  }
  app_connection_properties_ = nullptr;
}
inline const ::dapr::proto::runtime::v1::AppConnectionProperties& GetMetadataResponse::_internal_app_connection_properties() const {
  const ::dapr::proto::runtime::v1::AppConnectionProperties* p = app_connection_properties_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dapr::proto::runtime::v1::AppConnectionProperties*>(
      &::dapr::proto::runtime::v1::_AppConnectionProperties_default_instance_);
}
inline const ::dapr::proto::runtime::v1::AppConnectionProperties& GetMetadataResponse::app_connection_properties() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetMetadataResponse.app_connection_properties)
  return _internal_app_connection_properties();
}
inline void GetMetadataResponse::unsafe_arena_set_allocated_app_connection_properties(
    ::dapr::proto::runtime::v1::AppConnectionProperties* app_connection_properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_connection_properties_);
  }
  app_connection_properties_ = app_connection_properties;
  if (app_connection_properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetMetadataResponse.app_connection_properties)
}
inline ::dapr::proto::runtime::v1::AppConnectionProperties* GetMetadataResponse::release_app_connection_properties() {
  auto temp = unsafe_arena_release_app_connection_properties();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dapr::proto::runtime::v1::AppConnectionProperties* GetMetadataResponse::unsafe_arena_release_app_connection_properties() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetMetadataResponse.app_connection_properties)
  
  ::dapr::proto::runtime::v1::AppConnectionProperties* temp = app_connection_properties_;
  app_connection_properties_ = nullptr;
  return temp;
}
inline ::dapr::proto::runtime::v1::AppConnectionProperties* GetMetadataResponse::_internal_mutable_app_connection_properties() {
  
  if (app_connection_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::runtime::v1::AppConnectionProperties>(GetArena());
    app_connection_properties_ = p;
  }
  return app_connection_properties_;
}
inline ::dapr::proto::runtime::v1::AppConnectionProperties* GetMetadataResponse::mutable_app_connection_properties() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetMetadataResponse.app_connection_properties)
  return _internal_mutable_app_connection_properties();
}
inline void GetMetadataResponse::set_allocated_app_connection_properties(::dapr::proto::runtime::v1::AppConnectionProperties* app_connection_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete app_connection_properties_;
  }
  if (app_connection_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(app_connection_properties);
    if (message_arena != submessage_arena) {
      app_connection_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_connection_properties, submessage_arena);
    }
    
  } else {
    
  }
  app_connection_properties_ = app_connection_properties;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetMetadataResponse.app_connection_properties)
}

// string runtime_version = 8[json_name = "runtimeVersion"];
inline void GetMetadataResponse::clear_runtime_version() {
  runtime_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetMetadataResponse::runtime_version() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetMetadataResponse.runtime_version)
  return _internal_runtime_version();
}
inline void GetMetadataResponse::set_runtime_version(const std::string& value) {
  _internal_set_runtime_version(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetMetadataResponse.runtime_version)
}
inline std::string* GetMetadataResponse::mutable_runtime_version() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetMetadataResponse.runtime_version)
  return _internal_mutable_runtime_version();
}
inline const std::string& GetMetadataResponse::_internal_runtime_version() const {
  return runtime_version_.Get();
}
inline void GetMetadataResponse::_internal_set_runtime_version(const std::string& value) {
  
  runtime_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetMetadataResponse::set_runtime_version(std::string&& value) {
  
  runtime_version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.GetMetadataResponse.runtime_version)
}
inline void GetMetadataResponse::set_runtime_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runtime_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetMetadataResponse.runtime_version)
}
inline void GetMetadataResponse::set_runtime_version(const char* value,
    size_t size) {
  
  runtime_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetMetadataResponse.runtime_version)
}
inline std::string* GetMetadataResponse::_internal_mutable_runtime_version() {
  
  return runtime_version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetMetadataResponse::release_runtime_version() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetMetadataResponse.runtime_version)
  return runtime_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetMetadataResponse::set_allocated_runtime_version(std::string* runtime_version) {
  if (runtime_version != nullptr) {
    
  } else {
    
  }
  runtime_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runtime_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetMetadataResponse.runtime_version)
}
inline std::string* GetMetadataResponse::unsafe_arena_release_runtime_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.GetMetadataResponse.runtime_version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return runtime_version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetMetadataResponse::unsafe_arena_set_allocated_runtime_version(
    std::string* runtime_version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (runtime_version != nullptr) {
    
  } else {
    
  }
  runtime_version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      runtime_version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetMetadataResponse.runtime_version)
}

// repeated string enabled_features = 9[json_name = "enabledFeatures"];
inline int GetMetadataResponse::_internal_enabled_features_size() const {
  return enabled_features_.size();
}
inline int GetMetadataResponse::enabled_features_size() const {
  return _internal_enabled_features_size();
}
inline void GetMetadataResponse::clear_enabled_features() {
  enabled_features_.Clear();
}
inline std::string* GetMetadataResponse::add_enabled_features() {
  // @@protoc_insertion_point(field_add_mutable:dapr.proto.runtime.v1.GetMetadataResponse.enabled_features)
  return _internal_add_enabled_features();
}
inline const std::string& GetMetadataResponse::_internal_enabled_features(int index) const {
  return enabled_features_.Get(index);
}
inline const std::string& GetMetadataResponse::enabled_features(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetMetadataResponse.enabled_features)
  return _internal_enabled_features(index);
}
inline std::string* GetMetadataResponse::mutable_enabled_features(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetMetadataResponse.enabled_features)
  return enabled_features_.Mutable(index);
}
inline void GetMetadataResponse::set_enabled_features(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetMetadataResponse.enabled_features)
  enabled_features_.Mutable(index)->assign(value);
}
inline void GetMetadataResponse::set_enabled_features(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetMetadataResponse.enabled_features)
  enabled_features_.Mutable(index)->assign(std::move(value));
}
inline void GetMetadataResponse::set_enabled_features(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  enabled_features_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetMetadataResponse.enabled_features)
}
inline void GetMetadataResponse::set_enabled_features(int index, const char* value, size_t size) {
  enabled_features_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetMetadataResponse.enabled_features)
}
inline std::string* GetMetadataResponse::_internal_add_enabled_features() {
  return enabled_features_.Add();
}
inline void GetMetadataResponse::add_enabled_features(const std::string& value) {
  enabled_features_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.GetMetadataResponse.enabled_features)
}
inline void GetMetadataResponse::add_enabled_features(std::string&& value) {
  enabled_features_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.GetMetadataResponse.enabled_features)
}
inline void GetMetadataResponse::add_enabled_features(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  enabled_features_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dapr.proto.runtime.v1.GetMetadataResponse.enabled_features)
}
inline void GetMetadataResponse::add_enabled_features(const char* value, size_t size) {
  enabled_features_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dapr.proto.runtime.v1.GetMetadataResponse.enabled_features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetMetadataResponse::enabled_features() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.GetMetadataResponse.enabled_features)
  return enabled_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetMetadataResponse::mutable_enabled_features() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.GetMetadataResponse.enabled_features)
  return &enabled_features_;
}

// .dapr.proto.runtime.v1.ActorRuntime actor_runtime = 10[json_name = "actorRuntime"];
inline bool GetMetadataResponse::_internal_has_actor_runtime() const {
  return this != internal_default_instance() && actor_runtime_ != nullptr;
}
inline bool GetMetadataResponse::has_actor_runtime() const {
  return _internal_has_actor_runtime();
}
inline void GetMetadataResponse::clear_actor_runtime() {
  if (GetArena() == nullptr && actor_runtime_ != nullptr) {
    delete actor_runtime_;
  }
  actor_runtime_ = nullptr;
}
inline const ::dapr::proto::runtime::v1::ActorRuntime& GetMetadataResponse::_internal_actor_runtime() const {
  const ::dapr::proto::runtime::v1::ActorRuntime* p = actor_runtime_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dapr::proto::runtime::v1::ActorRuntime*>(
      &::dapr::proto::runtime::v1::_ActorRuntime_default_instance_);
}
inline const ::dapr::proto::runtime::v1::ActorRuntime& GetMetadataResponse::actor_runtime() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetMetadataResponse.actor_runtime)
  return _internal_actor_runtime();
}
inline void GetMetadataResponse::unsafe_arena_set_allocated_actor_runtime(
    ::dapr::proto::runtime::v1::ActorRuntime* actor_runtime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actor_runtime_);
  }
  actor_runtime_ = actor_runtime;
  if (actor_runtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetMetadataResponse.actor_runtime)
}
inline ::dapr::proto::runtime::v1::ActorRuntime* GetMetadataResponse::release_actor_runtime() {
  auto temp = unsafe_arena_release_actor_runtime();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dapr::proto::runtime::v1::ActorRuntime* GetMetadataResponse::unsafe_arena_release_actor_runtime() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetMetadataResponse.actor_runtime)
  
  ::dapr::proto::runtime::v1::ActorRuntime* temp = actor_runtime_;
  actor_runtime_ = nullptr;
  return temp;
}
inline ::dapr::proto::runtime::v1::ActorRuntime* GetMetadataResponse::_internal_mutable_actor_runtime() {
  
  if (actor_runtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::runtime::v1::ActorRuntime>(GetArena());
    actor_runtime_ = p;
  }
  return actor_runtime_;
}
inline ::dapr::proto::runtime::v1::ActorRuntime* GetMetadataResponse::mutable_actor_runtime() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetMetadataResponse.actor_runtime)
  return _internal_mutable_actor_runtime();
}
inline void GetMetadataResponse::set_allocated_actor_runtime(::dapr::proto::runtime::v1::ActorRuntime* actor_runtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete actor_runtime_;
  }
  if (actor_runtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(actor_runtime);
    if (message_arena != submessage_arena) {
      actor_runtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actor_runtime, submessage_arena);
    }
    
  } else {
    
  }
  actor_runtime_ = actor_runtime;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetMetadataResponse.actor_runtime)
}

// -------------------------------------------------------------------

// ActorRuntime

// .dapr.proto.runtime.v1.ActorRuntime.ActorRuntimeStatus runtime_status = 1[json_name = "runtimeStatus"];
inline void ActorRuntime::clear_runtime_status() {
  runtime_status_ = 0;
}
inline ::dapr::proto::runtime::v1::ActorRuntime_ActorRuntimeStatus ActorRuntime::_internal_runtime_status() const {
  return static_cast< ::dapr::proto::runtime::v1::ActorRuntime_ActorRuntimeStatus >(runtime_status_);
}
inline ::dapr::proto::runtime::v1::ActorRuntime_ActorRuntimeStatus ActorRuntime::runtime_status() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.ActorRuntime.runtime_status)
  return _internal_runtime_status();
}
inline void ActorRuntime::_internal_set_runtime_status(::dapr::proto::runtime::v1::ActorRuntime_ActorRuntimeStatus value) {
  
  runtime_status_ = value;
}
inline void ActorRuntime::set_runtime_status(::dapr::proto::runtime::v1::ActorRuntime_ActorRuntimeStatus value) {
  _internal_set_runtime_status(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.ActorRuntime.runtime_status)
}

// repeated .dapr.proto.runtime.v1.ActiveActorsCount active_actors = 2[json_name = "activeActors"];
inline int ActorRuntime::_internal_active_actors_size() const {
  return active_actors_.size();
}
inline int ActorRuntime::active_actors_size() const {
  return _internal_active_actors_size();
}
inline void ActorRuntime::clear_active_actors() {
  active_actors_.Clear();
}
inline ::dapr::proto::runtime::v1::ActiveActorsCount* ActorRuntime::mutable_active_actors(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.ActorRuntime.active_actors)
  return active_actors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::ActiveActorsCount >*
ActorRuntime::mutable_active_actors() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.ActorRuntime.active_actors)
  return &active_actors_;
}
inline const ::dapr::proto::runtime::v1::ActiveActorsCount& ActorRuntime::_internal_active_actors(int index) const {
  return active_actors_.Get(index);
}
inline const ::dapr::proto::runtime::v1::ActiveActorsCount& ActorRuntime::active_actors(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.ActorRuntime.active_actors)
  return _internal_active_actors(index);
}
inline ::dapr::proto::runtime::v1::ActiveActorsCount* ActorRuntime::_internal_add_active_actors() {
  return active_actors_.Add();
}
inline ::dapr::proto::runtime::v1::ActiveActorsCount* ActorRuntime::add_active_actors() {
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.ActorRuntime.active_actors)
  return _internal_add_active_actors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::ActiveActorsCount >&
ActorRuntime::active_actors() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.ActorRuntime.active_actors)
  return active_actors_;
}

// bool host_ready = 3[json_name = "hostReady"];
inline void ActorRuntime::clear_host_ready() {
  host_ready_ = false;
}
inline bool ActorRuntime::_internal_host_ready() const {
  return host_ready_;
}
inline bool ActorRuntime::host_ready() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.ActorRuntime.host_ready)
  return _internal_host_ready();
}
inline void ActorRuntime::_internal_set_host_ready(bool value) {
  
  host_ready_ = value;
}
inline void ActorRuntime::set_host_ready(bool value) {
  _internal_set_host_ready(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.ActorRuntime.host_ready)
}

// string placement = 4[json_name = "placement"];
inline void ActorRuntime::clear_placement() {
  placement_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ActorRuntime::placement() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.ActorRuntime.placement)
  return _internal_placement();
}
inline void ActorRuntime::set_placement(const std::string& value) {
  _internal_set_placement(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.ActorRuntime.placement)
}
inline std::string* ActorRuntime::mutable_placement() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.ActorRuntime.placement)
  return _internal_mutable_placement();
}
inline const std::string& ActorRuntime::_internal_placement() const {
  return placement_.Get();
}
inline void ActorRuntime::_internal_set_placement(const std::string& value) {
  
  placement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ActorRuntime::set_placement(std::string&& value) {
  
  placement_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.ActorRuntime.placement)
}
inline void ActorRuntime::set_placement(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  placement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.ActorRuntime.placement)
}
inline void ActorRuntime::set_placement(const char* value,
    size_t size) {
  
  placement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.ActorRuntime.placement)
}
inline std::string* ActorRuntime::_internal_mutable_placement() {
  
  return placement_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ActorRuntime::release_placement() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.ActorRuntime.placement)
  return placement_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActorRuntime::set_allocated_placement(std::string* placement) {
  if (placement != nullptr) {
    
  } else {
    
  }
  placement_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), placement,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.ActorRuntime.placement)
}
inline std::string* ActorRuntime::unsafe_arena_release_placement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.ActorRuntime.placement)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return placement_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ActorRuntime::unsafe_arena_set_allocated_placement(
    std::string* placement) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (placement != nullptr) {
    
  } else {
    
  }
  placement_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      placement, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.ActorRuntime.placement)
}

// -------------------------------------------------------------------

// ActiveActorsCount

// string type = 1;
inline void ActiveActorsCount::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ActiveActorsCount::type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.ActiveActorsCount.type)
  return _internal_type();
}
inline void ActiveActorsCount::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.ActiveActorsCount.type)
}
inline std::string* ActiveActorsCount::mutable_type() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.ActiveActorsCount.type)
  return _internal_mutable_type();
}
inline const std::string& ActiveActorsCount::_internal_type() const {
  return type_.Get();
}
inline void ActiveActorsCount::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ActiveActorsCount::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.ActiveActorsCount.type)
}
inline void ActiveActorsCount::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.ActiveActorsCount.type)
}
inline void ActiveActorsCount::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.ActiveActorsCount.type)
}
inline std::string* ActiveActorsCount::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ActiveActorsCount::release_type() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.ActiveActorsCount.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActiveActorsCount::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.ActiveActorsCount.type)
}
inline std::string* ActiveActorsCount::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.ActiveActorsCount.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ActiveActorsCount::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.ActiveActorsCount.type)
}

// int32 count = 2;
inline void ActiveActorsCount::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActiveActorsCount::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActiveActorsCount::count() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.ActiveActorsCount.count)
  return _internal_count();
}
inline void ActiveActorsCount::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void ActiveActorsCount::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.ActiveActorsCount.count)
}

// -------------------------------------------------------------------

// RegisteredComponents

// string name = 1;
inline void RegisteredComponents::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisteredComponents::name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.RegisteredComponents.name)
  return _internal_name();
}
inline void RegisteredComponents::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RegisteredComponents.name)
}
inline std::string* RegisteredComponents::mutable_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.RegisteredComponents.name)
  return _internal_mutable_name();
}
inline const std::string& RegisteredComponents::_internal_name() const {
  return name_.Get();
}
inline void RegisteredComponents::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisteredComponents::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.RegisteredComponents.name)
}
inline void RegisteredComponents::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.RegisteredComponents.name)
}
inline void RegisteredComponents::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.RegisteredComponents.name)
}
inline std::string* RegisteredComponents::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisteredComponents::release_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.RegisteredComponents.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisteredComponents::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.RegisteredComponents.name)
}
inline std::string* RegisteredComponents::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.RegisteredComponents.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisteredComponents::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.RegisteredComponents.name)
}

// string type = 2;
inline void RegisteredComponents::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisteredComponents::type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.RegisteredComponents.type)
  return _internal_type();
}
inline void RegisteredComponents::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RegisteredComponents.type)
}
inline std::string* RegisteredComponents::mutable_type() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.RegisteredComponents.type)
  return _internal_mutable_type();
}
inline const std::string& RegisteredComponents::_internal_type() const {
  return type_.Get();
}
inline void RegisteredComponents::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisteredComponents::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.RegisteredComponents.type)
}
inline void RegisteredComponents::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.RegisteredComponents.type)
}
inline void RegisteredComponents::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.RegisteredComponents.type)
}
inline std::string* RegisteredComponents::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisteredComponents::release_type() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.RegisteredComponents.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisteredComponents::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.RegisteredComponents.type)
}
inline std::string* RegisteredComponents::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.RegisteredComponents.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisteredComponents::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.RegisteredComponents.type)
}

// string version = 3;
inline void RegisteredComponents::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisteredComponents::version() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.RegisteredComponents.version)
  return _internal_version();
}
inline void RegisteredComponents::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RegisteredComponents.version)
}
inline std::string* RegisteredComponents::mutable_version() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.RegisteredComponents.version)
  return _internal_mutable_version();
}
inline const std::string& RegisteredComponents::_internal_version() const {
  return version_.Get();
}
inline void RegisteredComponents::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisteredComponents::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.RegisteredComponents.version)
}
inline void RegisteredComponents::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.RegisteredComponents.version)
}
inline void RegisteredComponents::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.RegisteredComponents.version)
}
inline std::string* RegisteredComponents::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisteredComponents::release_version() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.RegisteredComponents.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisteredComponents::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.RegisteredComponents.version)
}
inline std::string* RegisteredComponents::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.RegisteredComponents.version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisteredComponents::unsafe_arena_set_allocated_version(
    std::string* version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version != nullptr) {
    
  } else {
    
  }
  version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.RegisteredComponents.version)
}

// repeated string capabilities = 4;
inline int RegisteredComponents::_internal_capabilities_size() const {
  return capabilities_.size();
}
inline int RegisteredComponents::capabilities_size() const {
  return _internal_capabilities_size();
}
inline void RegisteredComponents::clear_capabilities() {
  capabilities_.Clear();
}
inline std::string* RegisteredComponents::add_capabilities() {
  // @@protoc_insertion_point(field_add_mutable:dapr.proto.runtime.v1.RegisteredComponents.capabilities)
  return _internal_add_capabilities();
}
inline const std::string& RegisteredComponents::_internal_capabilities(int index) const {
  return capabilities_.Get(index);
}
inline const std::string& RegisteredComponents::capabilities(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.RegisteredComponents.capabilities)
  return _internal_capabilities(index);
}
inline std::string* RegisteredComponents::mutable_capabilities(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.RegisteredComponents.capabilities)
  return capabilities_.Mutable(index);
}
inline void RegisteredComponents::set_capabilities(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RegisteredComponents.capabilities)
  capabilities_.Mutable(index)->assign(value);
}
inline void RegisteredComponents::set_capabilities(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RegisteredComponents.capabilities)
  capabilities_.Mutable(index)->assign(std::move(value));
}
inline void RegisteredComponents::set_capabilities(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  capabilities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.RegisteredComponents.capabilities)
}
inline void RegisteredComponents::set_capabilities(int index, const char* value, size_t size) {
  capabilities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.RegisteredComponents.capabilities)
}
inline std::string* RegisteredComponents::_internal_add_capabilities() {
  return capabilities_.Add();
}
inline void RegisteredComponents::add_capabilities(const std::string& value) {
  capabilities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.RegisteredComponents.capabilities)
}
inline void RegisteredComponents::add_capabilities(std::string&& value) {
  capabilities_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.RegisteredComponents.capabilities)
}
inline void RegisteredComponents::add_capabilities(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  capabilities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dapr.proto.runtime.v1.RegisteredComponents.capabilities)
}
inline void RegisteredComponents::add_capabilities(const char* value, size_t size) {
  capabilities_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dapr.proto.runtime.v1.RegisteredComponents.capabilities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RegisteredComponents::capabilities() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.RegisteredComponents.capabilities)
  return capabilities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RegisteredComponents::mutable_capabilities() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.RegisteredComponents.capabilities)
  return &capabilities_;
}

// -------------------------------------------------------------------

// MetadataHTTPEndpoint

// string name = 1[json_name = "name"];
inline void MetadataHTTPEndpoint::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MetadataHTTPEndpoint::name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.MetadataHTTPEndpoint.name)
  return _internal_name();
}
inline void MetadataHTTPEndpoint::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.MetadataHTTPEndpoint.name)
}
inline std::string* MetadataHTTPEndpoint::mutable_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.MetadataHTTPEndpoint.name)
  return _internal_mutable_name();
}
inline const std::string& MetadataHTTPEndpoint::_internal_name() const {
  return name_.Get();
}
inline void MetadataHTTPEndpoint::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MetadataHTTPEndpoint::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.MetadataHTTPEndpoint.name)
}
inline void MetadataHTTPEndpoint::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.MetadataHTTPEndpoint.name)
}
inline void MetadataHTTPEndpoint::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.MetadataHTTPEndpoint.name)
}
inline std::string* MetadataHTTPEndpoint::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MetadataHTTPEndpoint::release_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.MetadataHTTPEndpoint.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MetadataHTTPEndpoint::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.MetadataHTTPEndpoint.name)
}
inline std::string* MetadataHTTPEndpoint::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.MetadataHTTPEndpoint.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MetadataHTTPEndpoint::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.MetadataHTTPEndpoint.name)
}

// -------------------------------------------------------------------

// AppConnectionProperties

// int32 port = 1;
inline void AppConnectionProperties::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppConnectionProperties::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppConnectionProperties::port() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.AppConnectionProperties.port)
  return _internal_port();
}
inline void AppConnectionProperties::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void AppConnectionProperties::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.AppConnectionProperties.port)
}

// string protocol = 2;
inline void AppConnectionProperties::clear_protocol() {
  protocol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppConnectionProperties::protocol() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.AppConnectionProperties.protocol)
  return _internal_protocol();
}
inline void AppConnectionProperties::set_protocol(const std::string& value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.AppConnectionProperties.protocol)
}
inline std::string* AppConnectionProperties::mutable_protocol() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.AppConnectionProperties.protocol)
  return _internal_mutable_protocol();
}
inline const std::string& AppConnectionProperties::_internal_protocol() const {
  return protocol_.Get();
}
inline void AppConnectionProperties::_internal_set_protocol(const std::string& value) {
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppConnectionProperties::set_protocol(std::string&& value) {
  
  protocol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.AppConnectionProperties.protocol)
}
inline void AppConnectionProperties::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.AppConnectionProperties.protocol)
}
inline void AppConnectionProperties::set_protocol(const char* value,
    size_t size) {
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.AppConnectionProperties.protocol)
}
inline std::string* AppConnectionProperties::_internal_mutable_protocol() {
  
  return protocol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppConnectionProperties::release_protocol() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.AppConnectionProperties.protocol)
  return protocol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppConnectionProperties::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.AppConnectionProperties.protocol)
}
inline std::string* AppConnectionProperties::unsafe_arena_release_protocol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.AppConnectionProperties.protocol)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return protocol_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppConnectionProperties::unsafe_arena_set_allocated_protocol(
    std::string* protocol) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      protocol, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.AppConnectionProperties.protocol)
}

// string channel_address = 3[json_name = "channelAddress"];
inline void AppConnectionProperties::clear_channel_address() {
  channel_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppConnectionProperties::channel_address() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.AppConnectionProperties.channel_address)
  return _internal_channel_address();
}
inline void AppConnectionProperties::set_channel_address(const std::string& value) {
  _internal_set_channel_address(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.AppConnectionProperties.channel_address)
}
inline std::string* AppConnectionProperties::mutable_channel_address() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.AppConnectionProperties.channel_address)
  return _internal_mutable_channel_address();
}
inline const std::string& AppConnectionProperties::_internal_channel_address() const {
  return channel_address_.Get();
}
inline void AppConnectionProperties::_internal_set_channel_address(const std::string& value) {
  
  channel_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppConnectionProperties::set_channel_address(std::string&& value) {
  
  channel_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.AppConnectionProperties.channel_address)
}
inline void AppConnectionProperties::set_channel_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.AppConnectionProperties.channel_address)
}
inline void AppConnectionProperties::set_channel_address(const char* value,
    size_t size) {
  
  channel_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.AppConnectionProperties.channel_address)
}
inline std::string* AppConnectionProperties::_internal_mutable_channel_address() {
  
  return channel_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppConnectionProperties::release_channel_address() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.AppConnectionProperties.channel_address)
  return channel_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppConnectionProperties::set_allocated_channel_address(std::string* channel_address) {
  if (channel_address != nullptr) {
    
  } else {
    
  }
  channel_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.AppConnectionProperties.channel_address)
}
inline std::string* AppConnectionProperties::unsafe_arena_release_channel_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.AppConnectionProperties.channel_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return channel_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppConnectionProperties::unsafe_arena_set_allocated_channel_address(
    std::string* channel_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (channel_address != nullptr) {
    
  } else {
    
  }
  channel_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      channel_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.AppConnectionProperties.channel_address)
}

// int32 max_concurrency = 4[json_name = "maxConcurrency"];
inline void AppConnectionProperties::clear_max_concurrency() {
  max_concurrency_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppConnectionProperties::_internal_max_concurrency() const {
  return max_concurrency_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppConnectionProperties::max_concurrency() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.AppConnectionProperties.max_concurrency)
  return _internal_max_concurrency();
}
inline void AppConnectionProperties::_internal_set_max_concurrency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_concurrency_ = value;
}
inline void AppConnectionProperties::set_max_concurrency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_concurrency(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.AppConnectionProperties.max_concurrency)
}

// .dapr.proto.runtime.v1.AppConnectionHealthProperties health = 5;
inline bool AppConnectionProperties::_internal_has_health() const {
  return this != internal_default_instance() && health_ != nullptr;
}
inline bool AppConnectionProperties::has_health() const {
  return _internal_has_health();
}
inline void AppConnectionProperties::clear_health() {
  if (GetArena() == nullptr && health_ != nullptr) {
    delete health_;
  }
  health_ = nullptr;
}
inline const ::dapr::proto::runtime::v1::AppConnectionHealthProperties& AppConnectionProperties::_internal_health() const {
  const ::dapr::proto::runtime::v1::AppConnectionHealthProperties* p = health_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dapr::proto::runtime::v1::AppConnectionHealthProperties*>(
      &::dapr::proto::runtime::v1::_AppConnectionHealthProperties_default_instance_);
}
inline const ::dapr::proto::runtime::v1::AppConnectionHealthProperties& AppConnectionProperties::health() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.AppConnectionProperties.health)
  return _internal_health();
}
inline void AppConnectionProperties::unsafe_arena_set_allocated_health(
    ::dapr::proto::runtime::v1::AppConnectionHealthProperties* health) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(health_);
  }
  health_ = health;
  if (health) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.AppConnectionProperties.health)
}
inline ::dapr::proto::runtime::v1::AppConnectionHealthProperties* AppConnectionProperties::release_health() {
  auto temp = unsafe_arena_release_health();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dapr::proto::runtime::v1::AppConnectionHealthProperties* AppConnectionProperties::unsafe_arena_release_health() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.AppConnectionProperties.health)
  
  ::dapr::proto::runtime::v1::AppConnectionHealthProperties* temp = health_;
  health_ = nullptr;
  return temp;
}
inline ::dapr::proto::runtime::v1::AppConnectionHealthProperties* AppConnectionProperties::_internal_mutable_health() {
  
  if (health_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::runtime::v1::AppConnectionHealthProperties>(GetArena());
    health_ = p;
  }
  return health_;
}
inline ::dapr::proto::runtime::v1::AppConnectionHealthProperties* AppConnectionProperties::mutable_health() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.AppConnectionProperties.health)
  return _internal_mutable_health();
}
inline void AppConnectionProperties::set_allocated_health(::dapr::proto::runtime::v1::AppConnectionHealthProperties* health) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete health_;
  }
  if (health) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(health);
    if (message_arena != submessage_arena) {
      health = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, health, submessage_arena);
    }
    
  } else {
    
  }
  health_ = health;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.AppConnectionProperties.health)
}

// -------------------------------------------------------------------

// AppConnectionHealthProperties

// string health_check_path = 1[json_name = "healthCheckPath"];
inline void AppConnectionHealthProperties::clear_health_check_path() {
  health_check_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppConnectionHealthProperties::health_check_path() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_check_path)
  return _internal_health_check_path();
}
inline void AppConnectionHealthProperties::set_health_check_path(const std::string& value) {
  _internal_set_health_check_path(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_check_path)
}
inline std::string* AppConnectionHealthProperties::mutable_health_check_path() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_check_path)
  return _internal_mutable_health_check_path();
}
inline const std::string& AppConnectionHealthProperties::_internal_health_check_path() const {
  return health_check_path_.Get();
}
inline void AppConnectionHealthProperties::_internal_set_health_check_path(const std::string& value) {
  
  health_check_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppConnectionHealthProperties::set_health_check_path(std::string&& value) {
  
  health_check_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_check_path)
}
inline void AppConnectionHealthProperties::set_health_check_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  health_check_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_check_path)
}
inline void AppConnectionHealthProperties::set_health_check_path(const char* value,
    size_t size) {
  
  health_check_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_check_path)
}
inline std::string* AppConnectionHealthProperties::_internal_mutable_health_check_path() {
  
  return health_check_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppConnectionHealthProperties::release_health_check_path() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_check_path)
  return health_check_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppConnectionHealthProperties::set_allocated_health_check_path(std::string* health_check_path) {
  if (health_check_path != nullptr) {
    
  } else {
    
  }
  health_check_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), health_check_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_check_path)
}
inline std::string* AppConnectionHealthProperties::unsafe_arena_release_health_check_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_check_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return health_check_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppConnectionHealthProperties::unsafe_arena_set_allocated_health_check_path(
    std::string* health_check_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (health_check_path != nullptr) {
    
  } else {
    
  }
  health_check_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      health_check_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_check_path)
}

// string health_probe_interval = 2[json_name = "healthProbeInterval"];
inline void AppConnectionHealthProperties::clear_health_probe_interval() {
  health_probe_interval_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppConnectionHealthProperties::health_probe_interval() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_probe_interval)
  return _internal_health_probe_interval();
}
inline void AppConnectionHealthProperties::set_health_probe_interval(const std::string& value) {
  _internal_set_health_probe_interval(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_probe_interval)
}
inline std::string* AppConnectionHealthProperties::mutable_health_probe_interval() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_probe_interval)
  return _internal_mutable_health_probe_interval();
}
inline const std::string& AppConnectionHealthProperties::_internal_health_probe_interval() const {
  return health_probe_interval_.Get();
}
inline void AppConnectionHealthProperties::_internal_set_health_probe_interval(const std::string& value) {
  
  health_probe_interval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppConnectionHealthProperties::set_health_probe_interval(std::string&& value) {
  
  health_probe_interval_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_probe_interval)
}
inline void AppConnectionHealthProperties::set_health_probe_interval(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  health_probe_interval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_probe_interval)
}
inline void AppConnectionHealthProperties::set_health_probe_interval(const char* value,
    size_t size) {
  
  health_probe_interval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_probe_interval)
}
inline std::string* AppConnectionHealthProperties::_internal_mutable_health_probe_interval() {
  
  return health_probe_interval_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppConnectionHealthProperties::release_health_probe_interval() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_probe_interval)
  return health_probe_interval_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppConnectionHealthProperties::set_allocated_health_probe_interval(std::string* health_probe_interval) {
  if (health_probe_interval != nullptr) {
    
  } else {
    
  }
  health_probe_interval_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), health_probe_interval,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_probe_interval)
}
inline std::string* AppConnectionHealthProperties::unsafe_arena_release_health_probe_interval() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_probe_interval)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return health_probe_interval_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppConnectionHealthProperties::unsafe_arena_set_allocated_health_probe_interval(
    std::string* health_probe_interval) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (health_probe_interval != nullptr) {
    
  } else {
    
  }
  health_probe_interval_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      health_probe_interval, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_probe_interval)
}

// string health_probe_timeout = 3[json_name = "healthProbeTimeout"];
inline void AppConnectionHealthProperties::clear_health_probe_timeout() {
  health_probe_timeout_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppConnectionHealthProperties::health_probe_timeout() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_probe_timeout)
  return _internal_health_probe_timeout();
}
inline void AppConnectionHealthProperties::set_health_probe_timeout(const std::string& value) {
  _internal_set_health_probe_timeout(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_probe_timeout)
}
inline std::string* AppConnectionHealthProperties::mutable_health_probe_timeout() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_probe_timeout)
  return _internal_mutable_health_probe_timeout();
}
inline const std::string& AppConnectionHealthProperties::_internal_health_probe_timeout() const {
  return health_probe_timeout_.Get();
}
inline void AppConnectionHealthProperties::_internal_set_health_probe_timeout(const std::string& value) {
  
  health_probe_timeout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppConnectionHealthProperties::set_health_probe_timeout(std::string&& value) {
  
  health_probe_timeout_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_probe_timeout)
}
inline void AppConnectionHealthProperties::set_health_probe_timeout(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  health_probe_timeout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_probe_timeout)
}
inline void AppConnectionHealthProperties::set_health_probe_timeout(const char* value,
    size_t size) {
  
  health_probe_timeout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_probe_timeout)
}
inline std::string* AppConnectionHealthProperties::_internal_mutable_health_probe_timeout() {
  
  return health_probe_timeout_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppConnectionHealthProperties::release_health_probe_timeout() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_probe_timeout)
  return health_probe_timeout_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppConnectionHealthProperties::set_allocated_health_probe_timeout(std::string* health_probe_timeout) {
  if (health_probe_timeout != nullptr) {
    
  } else {
    
  }
  health_probe_timeout_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), health_probe_timeout,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_probe_timeout)
}
inline std::string* AppConnectionHealthProperties::unsafe_arena_release_health_probe_timeout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_probe_timeout)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return health_probe_timeout_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppConnectionHealthProperties::unsafe_arena_set_allocated_health_probe_timeout(
    std::string* health_probe_timeout) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (health_probe_timeout != nullptr) {
    
  } else {
    
  }
  health_probe_timeout_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      health_probe_timeout, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_probe_timeout)
}

// int32 health_threshold = 4[json_name = "healthThreshold"];
inline void AppConnectionHealthProperties::clear_health_threshold() {
  health_threshold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppConnectionHealthProperties::_internal_health_threshold() const {
  return health_threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppConnectionHealthProperties::health_threshold() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_threshold)
  return _internal_health_threshold();
}
inline void AppConnectionHealthProperties::_internal_set_health_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  health_threshold_ = value;
}
inline void AppConnectionHealthProperties::set_health_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_health_threshold(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.AppConnectionHealthProperties.health_threshold)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PubsubSubscription

// string pubsub_name = 1[json_name = "pubsubname"];
inline void PubsubSubscription::clear_pubsub_name() {
  pubsub_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PubsubSubscription::pubsub_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.PubsubSubscription.pubsub_name)
  return _internal_pubsub_name();
}
inline void PubsubSubscription::set_pubsub_name(const std::string& value) {
  _internal_set_pubsub_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.PubsubSubscription.pubsub_name)
}
inline std::string* PubsubSubscription::mutable_pubsub_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.PubsubSubscription.pubsub_name)
  return _internal_mutable_pubsub_name();
}
inline const std::string& PubsubSubscription::_internal_pubsub_name() const {
  return pubsub_name_.Get();
}
inline void PubsubSubscription::_internal_set_pubsub_name(const std::string& value) {
  
  pubsub_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PubsubSubscription::set_pubsub_name(std::string&& value) {
  
  pubsub_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.PubsubSubscription.pubsub_name)
}
inline void PubsubSubscription::set_pubsub_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubsub_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.PubsubSubscription.pubsub_name)
}
inline void PubsubSubscription::set_pubsub_name(const char* value,
    size_t size) {
  
  pubsub_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.PubsubSubscription.pubsub_name)
}
inline std::string* PubsubSubscription::_internal_mutable_pubsub_name() {
  
  return pubsub_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PubsubSubscription::release_pubsub_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.PubsubSubscription.pubsub_name)
  return pubsub_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PubsubSubscription::set_allocated_pubsub_name(std::string* pubsub_name) {
  if (pubsub_name != nullptr) {
    
  } else {
    
  }
  pubsub_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubsub_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.PubsubSubscription.pubsub_name)
}
inline std::string* PubsubSubscription::unsafe_arena_release_pubsub_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.PubsubSubscription.pubsub_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pubsub_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PubsubSubscription::unsafe_arena_set_allocated_pubsub_name(
    std::string* pubsub_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pubsub_name != nullptr) {
    
  } else {
    
  }
  pubsub_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pubsub_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.PubsubSubscription.pubsub_name)
}

// string topic = 2[json_name = "topic"];
inline void PubsubSubscription::clear_topic() {
  topic_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PubsubSubscription::topic() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.PubsubSubscription.topic)
  return _internal_topic();
}
inline void PubsubSubscription::set_topic(const std::string& value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.PubsubSubscription.topic)
}
inline std::string* PubsubSubscription::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.PubsubSubscription.topic)
  return _internal_mutable_topic();
}
inline const std::string& PubsubSubscription::_internal_topic() const {
  return topic_.Get();
}
inline void PubsubSubscription::_internal_set_topic(const std::string& value) {
  
  topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PubsubSubscription::set_topic(std::string&& value) {
  
  topic_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.PubsubSubscription.topic)
}
inline void PubsubSubscription::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.PubsubSubscription.topic)
}
inline void PubsubSubscription::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.PubsubSubscription.topic)
}
inline std::string* PubsubSubscription::_internal_mutable_topic() {
  
  return topic_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PubsubSubscription::release_topic() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.PubsubSubscription.topic)
  return topic_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PubsubSubscription::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.PubsubSubscription.topic)
}
inline std::string* PubsubSubscription::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.PubsubSubscription.topic)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return topic_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PubsubSubscription::unsafe_arena_set_allocated_topic(
    std::string* topic) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      topic, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.PubsubSubscription.topic)
}

// map<string, string> metadata = 3[json_name = "metadata"];
inline int PubsubSubscription::_internal_metadata_size() const {
  return metadata_.size();
}
inline int PubsubSubscription::metadata_size() const {
  return _internal_metadata_size();
}
inline void PubsubSubscription::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PubsubSubscription::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PubsubSubscription::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.PubsubSubscription.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PubsubSubscription::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PubsubSubscription::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.PubsubSubscription.metadata)
  return _internal_mutable_metadata();
}

// .dapr.proto.runtime.v1.PubsubSubscriptionRules rules = 4[json_name = "rules"];
inline bool PubsubSubscription::_internal_has_rules() const {
  return this != internal_default_instance() && rules_ != nullptr;
}
inline bool PubsubSubscription::has_rules() const {
  return _internal_has_rules();
}
inline void PubsubSubscription::clear_rules() {
  if (GetArena() == nullptr && rules_ != nullptr) {
    delete rules_;
  }
  rules_ = nullptr;
}
inline const ::dapr::proto::runtime::v1::PubsubSubscriptionRules& PubsubSubscription::_internal_rules() const {
  const ::dapr::proto::runtime::v1::PubsubSubscriptionRules* p = rules_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dapr::proto::runtime::v1::PubsubSubscriptionRules*>(
      &::dapr::proto::runtime::v1::_PubsubSubscriptionRules_default_instance_);
}
inline const ::dapr::proto::runtime::v1::PubsubSubscriptionRules& PubsubSubscription::rules() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.PubsubSubscription.rules)
  return _internal_rules();
}
inline void PubsubSubscription::unsafe_arena_set_allocated_rules(
    ::dapr::proto::runtime::v1::PubsubSubscriptionRules* rules) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rules_);
  }
  rules_ = rules;
  if (rules) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.PubsubSubscription.rules)
}
inline ::dapr::proto::runtime::v1::PubsubSubscriptionRules* PubsubSubscription::release_rules() {
  auto temp = unsafe_arena_release_rules();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dapr::proto::runtime::v1::PubsubSubscriptionRules* PubsubSubscription::unsafe_arena_release_rules() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.PubsubSubscription.rules)
  
  ::dapr::proto::runtime::v1::PubsubSubscriptionRules* temp = rules_;
  rules_ = nullptr;
  return temp;
}
inline ::dapr::proto::runtime::v1::PubsubSubscriptionRules* PubsubSubscription::_internal_mutable_rules() {
  
  if (rules_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::runtime::v1::PubsubSubscriptionRules>(GetArena());
    rules_ = p;
  }
  return rules_;
}
inline ::dapr::proto::runtime::v1::PubsubSubscriptionRules* PubsubSubscription::mutable_rules() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.PubsubSubscription.rules)
  return _internal_mutable_rules();
}
inline void PubsubSubscription::set_allocated_rules(::dapr::proto::runtime::v1::PubsubSubscriptionRules* rules) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rules_;
  }
  if (rules) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rules);
    if (message_arena != submessage_arena) {
      rules = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rules, submessage_arena);
    }
    
  } else {
    
  }
  rules_ = rules;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.PubsubSubscription.rules)
}

// string dead_letter_topic = 5[json_name = "deadLetterTopic"];
inline void PubsubSubscription::clear_dead_letter_topic() {
  dead_letter_topic_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PubsubSubscription::dead_letter_topic() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.PubsubSubscription.dead_letter_topic)
  return _internal_dead_letter_topic();
}
inline void PubsubSubscription::set_dead_letter_topic(const std::string& value) {
  _internal_set_dead_letter_topic(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.PubsubSubscription.dead_letter_topic)
}
inline std::string* PubsubSubscription::mutable_dead_letter_topic() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.PubsubSubscription.dead_letter_topic)
  return _internal_mutable_dead_letter_topic();
}
inline const std::string& PubsubSubscription::_internal_dead_letter_topic() const {
  return dead_letter_topic_.Get();
}
inline void PubsubSubscription::_internal_set_dead_letter_topic(const std::string& value) {
  
  dead_letter_topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PubsubSubscription::set_dead_letter_topic(std::string&& value) {
  
  dead_letter_topic_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.PubsubSubscription.dead_letter_topic)
}
inline void PubsubSubscription::set_dead_letter_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dead_letter_topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.PubsubSubscription.dead_letter_topic)
}
inline void PubsubSubscription::set_dead_letter_topic(const char* value,
    size_t size) {
  
  dead_letter_topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.PubsubSubscription.dead_letter_topic)
}
inline std::string* PubsubSubscription::_internal_mutable_dead_letter_topic() {
  
  return dead_letter_topic_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PubsubSubscription::release_dead_letter_topic() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.PubsubSubscription.dead_letter_topic)
  return dead_letter_topic_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PubsubSubscription::set_allocated_dead_letter_topic(std::string* dead_letter_topic) {
  if (dead_letter_topic != nullptr) {
    
  } else {
    
  }
  dead_letter_topic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dead_letter_topic,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.PubsubSubscription.dead_letter_topic)
}
inline std::string* PubsubSubscription::unsafe_arena_release_dead_letter_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.PubsubSubscription.dead_letter_topic)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dead_letter_topic_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PubsubSubscription::unsafe_arena_set_allocated_dead_letter_topic(
    std::string* dead_letter_topic) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dead_letter_topic != nullptr) {
    
  } else {
    
  }
  dead_letter_topic_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dead_letter_topic, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.PubsubSubscription.dead_letter_topic)
}

// .dapr.proto.runtime.v1.PubsubSubscriptionType type = 6[json_name = "type"];
inline void PubsubSubscription::clear_type() {
  type_ = 0;
}
inline ::dapr::proto::runtime::v1::PubsubSubscriptionType PubsubSubscription::_internal_type() const {
  return static_cast< ::dapr::proto::runtime::v1::PubsubSubscriptionType >(type_);
}
inline ::dapr::proto::runtime::v1::PubsubSubscriptionType PubsubSubscription::type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.PubsubSubscription.type)
  return _internal_type();
}
inline void PubsubSubscription::_internal_set_type(::dapr::proto::runtime::v1::PubsubSubscriptionType value) {
  
  type_ = value;
}
inline void PubsubSubscription::set_type(::dapr::proto::runtime::v1::PubsubSubscriptionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.PubsubSubscription.type)
}

// -------------------------------------------------------------------

// PubsubSubscriptionRules

// repeated .dapr.proto.runtime.v1.PubsubSubscriptionRule rules = 1;
inline int PubsubSubscriptionRules::_internal_rules_size() const {
  return rules_.size();
}
inline int PubsubSubscriptionRules::rules_size() const {
  return _internal_rules_size();
}
inline void PubsubSubscriptionRules::clear_rules() {
  rules_.Clear();
}
inline ::dapr::proto::runtime::v1::PubsubSubscriptionRule* PubsubSubscriptionRules::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.PubsubSubscriptionRules.rules)
  return rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::PubsubSubscriptionRule >*
PubsubSubscriptionRules::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.PubsubSubscriptionRules.rules)
  return &rules_;
}
inline const ::dapr::proto::runtime::v1::PubsubSubscriptionRule& PubsubSubscriptionRules::_internal_rules(int index) const {
  return rules_.Get(index);
}
inline const ::dapr::proto::runtime::v1::PubsubSubscriptionRule& PubsubSubscriptionRules::rules(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.PubsubSubscriptionRules.rules)
  return _internal_rules(index);
}
inline ::dapr::proto::runtime::v1::PubsubSubscriptionRule* PubsubSubscriptionRules::_internal_add_rules() {
  return rules_.Add();
}
inline ::dapr::proto::runtime::v1::PubsubSubscriptionRule* PubsubSubscriptionRules::add_rules() {
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.PubsubSubscriptionRules.rules)
  return _internal_add_rules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dapr::proto::runtime::v1::PubsubSubscriptionRule >&
PubsubSubscriptionRules::rules() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.PubsubSubscriptionRules.rules)
  return rules_;
}

// -------------------------------------------------------------------

// PubsubSubscriptionRule

// string match = 1;
inline void PubsubSubscriptionRule::clear_match() {
  match_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PubsubSubscriptionRule::match() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.PubsubSubscriptionRule.match)
  return _internal_match();
}
inline void PubsubSubscriptionRule::set_match(const std::string& value) {
  _internal_set_match(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.PubsubSubscriptionRule.match)
}
inline std::string* PubsubSubscriptionRule::mutable_match() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.PubsubSubscriptionRule.match)
  return _internal_mutable_match();
}
inline const std::string& PubsubSubscriptionRule::_internal_match() const {
  return match_.Get();
}
inline void PubsubSubscriptionRule::_internal_set_match(const std::string& value) {
  
  match_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PubsubSubscriptionRule::set_match(std::string&& value) {
  
  match_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.PubsubSubscriptionRule.match)
}
inline void PubsubSubscriptionRule::set_match(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  match_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.PubsubSubscriptionRule.match)
}
inline void PubsubSubscriptionRule::set_match(const char* value,
    size_t size) {
  
  match_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.PubsubSubscriptionRule.match)
}
inline std::string* PubsubSubscriptionRule::_internal_mutable_match() {
  
  return match_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PubsubSubscriptionRule::release_match() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.PubsubSubscriptionRule.match)
  return match_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PubsubSubscriptionRule::set_allocated_match(std::string* match) {
  if (match != nullptr) {
    
  } else {
    
  }
  match_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), match,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.PubsubSubscriptionRule.match)
}
inline std::string* PubsubSubscriptionRule::unsafe_arena_release_match() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.PubsubSubscriptionRule.match)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return match_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PubsubSubscriptionRule::unsafe_arena_set_allocated_match(
    std::string* match) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (match != nullptr) {
    
  } else {
    
  }
  match_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      match, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.PubsubSubscriptionRule.match)
}

// string path = 2;
inline void PubsubSubscriptionRule::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PubsubSubscriptionRule::path() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.PubsubSubscriptionRule.path)
  return _internal_path();
}
inline void PubsubSubscriptionRule::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.PubsubSubscriptionRule.path)
}
inline std::string* PubsubSubscriptionRule::mutable_path() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.PubsubSubscriptionRule.path)
  return _internal_mutable_path();
}
inline const std::string& PubsubSubscriptionRule::_internal_path() const {
  return path_.Get();
}
inline void PubsubSubscriptionRule::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PubsubSubscriptionRule::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.PubsubSubscriptionRule.path)
}
inline void PubsubSubscriptionRule::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.PubsubSubscriptionRule.path)
}
inline void PubsubSubscriptionRule::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.PubsubSubscriptionRule.path)
}
inline std::string* PubsubSubscriptionRule::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PubsubSubscriptionRule::release_path() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.PubsubSubscriptionRule.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PubsubSubscriptionRule::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.PubsubSubscriptionRule.path)
}
inline std::string* PubsubSubscriptionRule::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.PubsubSubscriptionRule.path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PubsubSubscriptionRule::unsafe_arena_set_allocated_path(
    std::string* path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (path != nullptr) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.PubsubSubscriptionRule.path)
}

// -------------------------------------------------------------------

// SetMetadataRequest

// string key = 1;
inline void SetMetadataRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetMetadataRequest::key() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SetMetadataRequest.key)
  return _internal_key();
}
inline void SetMetadataRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SetMetadataRequest.key)
}
inline std::string* SetMetadataRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SetMetadataRequest.key)
  return _internal_mutable_key();
}
inline const std::string& SetMetadataRequest::_internal_key() const {
  return key_.Get();
}
inline void SetMetadataRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetMetadataRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SetMetadataRequest.key)
}
inline void SetMetadataRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SetMetadataRequest.key)
}
inline void SetMetadataRequest::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SetMetadataRequest.key)
}
inline std::string* SetMetadataRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetMetadataRequest::release_key() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SetMetadataRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetMetadataRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SetMetadataRequest.key)
}
inline std::string* SetMetadataRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SetMetadataRequest.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetMetadataRequest::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SetMetadataRequest.key)
}

// string value = 2;
inline void SetMetadataRequest::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetMetadataRequest::value() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SetMetadataRequest.value)
  return _internal_value();
}
inline void SetMetadataRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SetMetadataRequest.value)
}
inline std::string* SetMetadataRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SetMetadataRequest.value)
  return _internal_mutable_value();
}
inline const std::string& SetMetadataRequest::_internal_value() const {
  return value_.Get();
}
inline void SetMetadataRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetMetadataRequest::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SetMetadataRequest.value)
}
inline void SetMetadataRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SetMetadataRequest.value)
}
inline void SetMetadataRequest::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SetMetadataRequest.value)
}
inline std::string* SetMetadataRequest::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetMetadataRequest::release_value() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SetMetadataRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetMetadataRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SetMetadataRequest.value)
}
inline std::string* SetMetadataRequest::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SetMetadataRequest.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetMetadataRequest::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SetMetadataRequest.value)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetConfigurationRequest

// string store_name = 1;
inline void GetConfigurationRequest::clear_store_name() {
  store_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetConfigurationRequest::store_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetConfigurationRequest.store_name)
  return _internal_store_name();
}
inline void GetConfigurationRequest::set_store_name(const std::string& value) {
  _internal_set_store_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetConfigurationRequest.store_name)
}
inline std::string* GetConfigurationRequest::mutable_store_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetConfigurationRequest.store_name)
  return _internal_mutable_store_name();
}
inline const std::string& GetConfigurationRequest::_internal_store_name() const {
  return store_name_.Get();
}
inline void GetConfigurationRequest::_internal_set_store_name(const std::string& value) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetConfigurationRequest::set_store_name(std::string&& value) {
  
  store_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.GetConfigurationRequest.store_name)
}
inline void GetConfigurationRequest::set_store_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetConfigurationRequest.store_name)
}
inline void GetConfigurationRequest::set_store_name(const char* value,
    size_t size) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetConfigurationRequest.store_name)
}
inline std::string* GetConfigurationRequest::_internal_mutable_store_name() {
  
  return store_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetConfigurationRequest::release_store_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetConfigurationRequest.store_name)
  return store_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetConfigurationRequest::set_allocated_store_name(std::string* store_name) {
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), store_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetConfigurationRequest.store_name)
}
inline std::string* GetConfigurationRequest::unsafe_arena_release_store_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.GetConfigurationRequest.store_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return store_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetConfigurationRequest::unsafe_arena_set_allocated_store_name(
    std::string* store_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      store_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetConfigurationRequest.store_name)
}

// repeated string keys = 2;
inline int GetConfigurationRequest::_internal_keys_size() const {
  return keys_.size();
}
inline int GetConfigurationRequest::keys_size() const {
  return _internal_keys_size();
}
inline void GetConfigurationRequest::clear_keys() {
  keys_.Clear();
}
inline std::string* GetConfigurationRequest::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:dapr.proto.runtime.v1.GetConfigurationRequest.keys)
  return _internal_add_keys();
}
inline const std::string& GetConfigurationRequest::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const std::string& GetConfigurationRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetConfigurationRequest.keys)
  return _internal_keys(index);
}
inline std::string* GetConfigurationRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetConfigurationRequest.keys)
  return keys_.Mutable(index);
}
inline void GetConfigurationRequest::set_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetConfigurationRequest.keys)
  keys_.Mutable(index)->assign(value);
}
inline void GetConfigurationRequest::set_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetConfigurationRequest.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
inline void GetConfigurationRequest::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetConfigurationRequest.keys)
}
inline void GetConfigurationRequest::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetConfigurationRequest.keys)
}
inline std::string* GetConfigurationRequest::_internal_add_keys() {
  return keys_.Add();
}
inline void GetConfigurationRequest::add_keys(const std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.GetConfigurationRequest.keys)
}
inline void GetConfigurationRequest::add_keys(std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.GetConfigurationRequest.keys)
}
inline void GetConfigurationRequest::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dapr.proto.runtime.v1.GetConfigurationRequest.keys)
}
inline void GetConfigurationRequest::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dapr.proto.runtime.v1.GetConfigurationRequest.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetConfigurationRequest::keys() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.GetConfigurationRequest.keys)
  return keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetConfigurationRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.GetConfigurationRequest.keys)
  return &keys_;
}

// map<string, string> metadata = 3;
inline int GetConfigurationRequest::_internal_metadata_size() const {
  return metadata_.size();
}
inline int GetConfigurationRequest::metadata_size() const {
  return _internal_metadata_size();
}
inline void GetConfigurationRequest::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetConfigurationRequest::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetConfigurationRequest::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.GetConfigurationRequest.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetConfigurationRequest::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetConfigurationRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.GetConfigurationRequest.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetConfigurationResponse

// map<string, .dapr.proto.common.v1.ConfigurationItem> items = 1;
inline int GetConfigurationResponse::_internal_items_size() const {
  return items_.size();
}
inline int GetConfigurationResponse::items_size() const {
  return _internal_items_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::common::v1::ConfigurationItem >&
GetConfigurationResponse::_internal_items() const {
  return items_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::common::v1::ConfigurationItem >&
GetConfigurationResponse::items() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.GetConfigurationResponse.items)
  return _internal_items();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::common::v1::ConfigurationItem >*
GetConfigurationResponse::_internal_mutable_items() {
  return items_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::common::v1::ConfigurationItem >*
GetConfigurationResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.GetConfigurationResponse.items)
  return _internal_mutable_items();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SubscribeConfigurationRequest

// string store_name = 1;
inline void SubscribeConfigurationRequest::clear_store_name() {
  store_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscribeConfigurationRequest::store_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubscribeConfigurationRequest.store_name)
  return _internal_store_name();
}
inline void SubscribeConfigurationRequest::set_store_name(const std::string& value) {
  _internal_set_store_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubscribeConfigurationRequest.store_name)
}
inline std::string* SubscribeConfigurationRequest::mutable_store_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubscribeConfigurationRequest.store_name)
  return _internal_mutable_store_name();
}
inline const std::string& SubscribeConfigurationRequest::_internal_store_name() const {
  return store_name_.Get();
}
inline void SubscribeConfigurationRequest::_internal_set_store_name(const std::string& value) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscribeConfigurationRequest::set_store_name(std::string&& value) {
  
  store_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubscribeConfigurationRequest.store_name)
}
inline void SubscribeConfigurationRequest::set_store_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubscribeConfigurationRequest.store_name)
}
inline void SubscribeConfigurationRequest::set_store_name(const char* value,
    size_t size) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubscribeConfigurationRequest.store_name)
}
inline std::string* SubscribeConfigurationRequest::_internal_mutable_store_name() {
  
  return store_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscribeConfigurationRequest::release_store_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubscribeConfigurationRequest.store_name)
  return store_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscribeConfigurationRequest::set_allocated_store_name(std::string* store_name) {
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), store_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubscribeConfigurationRequest.store_name)
}
inline std::string* SubscribeConfigurationRequest::unsafe_arena_release_store_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubscribeConfigurationRequest.store_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return store_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscribeConfigurationRequest::unsafe_arena_set_allocated_store_name(
    std::string* store_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      store_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubscribeConfigurationRequest.store_name)
}

// repeated string keys = 2;
inline int SubscribeConfigurationRequest::_internal_keys_size() const {
  return keys_.size();
}
inline int SubscribeConfigurationRequest::keys_size() const {
  return _internal_keys_size();
}
inline void SubscribeConfigurationRequest::clear_keys() {
  keys_.Clear();
}
inline std::string* SubscribeConfigurationRequest::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:dapr.proto.runtime.v1.SubscribeConfigurationRequest.keys)
  return _internal_add_keys();
}
inline const std::string& SubscribeConfigurationRequest::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const std::string& SubscribeConfigurationRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubscribeConfigurationRequest.keys)
  return _internal_keys(index);
}
inline std::string* SubscribeConfigurationRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubscribeConfigurationRequest.keys)
  return keys_.Mutable(index);
}
inline void SubscribeConfigurationRequest::set_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubscribeConfigurationRequest.keys)
  keys_.Mutable(index)->assign(value);
}
inline void SubscribeConfigurationRequest::set_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubscribeConfigurationRequest.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
inline void SubscribeConfigurationRequest::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubscribeConfigurationRequest.keys)
}
inline void SubscribeConfigurationRequest::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubscribeConfigurationRequest.keys)
}
inline std::string* SubscribeConfigurationRequest::_internal_add_keys() {
  return keys_.Add();
}
inline void SubscribeConfigurationRequest::add_keys(const std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.SubscribeConfigurationRequest.keys)
}
inline void SubscribeConfigurationRequest::add_keys(std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.SubscribeConfigurationRequest.keys)
}
inline void SubscribeConfigurationRequest::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dapr.proto.runtime.v1.SubscribeConfigurationRequest.keys)
}
inline void SubscribeConfigurationRequest::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dapr.proto.runtime.v1.SubscribeConfigurationRequest.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SubscribeConfigurationRequest::keys() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.SubscribeConfigurationRequest.keys)
  return keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SubscribeConfigurationRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.SubscribeConfigurationRequest.keys)
  return &keys_;
}

// map<string, string> metadata = 3;
inline int SubscribeConfigurationRequest::_internal_metadata_size() const {
  return metadata_.size();
}
inline int SubscribeConfigurationRequest::metadata_size() const {
  return _internal_metadata_size();
}
inline void SubscribeConfigurationRequest::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SubscribeConfigurationRequest::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SubscribeConfigurationRequest::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.SubscribeConfigurationRequest.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SubscribeConfigurationRequest::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SubscribeConfigurationRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.SubscribeConfigurationRequest.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// UnsubscribeConfigurationRequest

// string store_name = 1;
inline void UnsubscribeConfigurationRequest::clear_store_name() {
  store_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnsubscribeConfigurationRequest::store_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.UnsubscribeConfigurationRequest.store_name)
  return _internal_store_name();
}
inline void UnsubscribeConfigurationRequest::set_store_name(const std::string& value) {
  _internal_set_store_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.UnsubscribeConfigurationRequest.store_name)
}
inline std::string* UnsubscribeConfigurationRequest::mutable_store_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.UnsubscribeConfigurationRequest.store_name)
  return _internal_mutable_store_name();
}
inline const std::string& UnsubscribeConfigurationRequest::_internal_store_name() const {
  return store_name_.Get();
}
inline void UnsubscribeConfigurationRequest::_internal_set_store_name(const std::string& value) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnsubscribeConfigurationRequest::set_store_name(std::string&& value) {
  
  store_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.UnsubscribeConfigurationRequest.store_name)
}
inline void UnsubscribeConfigurationRequest::set_store_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.UnsubscribeConfigurationRequest.store_name)
}
inline void UnsubscribeConfigurationRequest::set_store_name(const char* value,
    size_t size) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.UnsubscribeConfigurationRequest.store_name)
}
inline std::string* UnsubscribeConfigurationRequest::_internal_mutable_store_name() {
  
  return store_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnsubscribeConfigurationRequest::release_store_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.UnsubscribeConfigurationRequest.store_name)
  return store_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnsubscribeConfigurationRequest::set_allocated_store_name(std::string* store_name) {
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), store_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.UnsubscribeConfigurationRequest.store_name)
}
inline std::string* UnsubscribeConfigurationRequest::unsafe_arena_release_store_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.UnsubscribeConfigurationRequest.store_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return store_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UnsubscribeConfigurationRequest::unsafe_arena_set_allocated_store_name(
    std::string* store_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      store_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.UnsubscribeConfigurationRequest.store_name)
}

// string id = 2;
inline void UnsubscribeConfigurationRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnsubscribeConfigurationRequest::id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.UnsubscribeConfigurationRequest.id)
  return _internal_id();
}
inline void UnsubscribeConfigurationRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.UnsubscribeConfigurationRequest.id)
}
inline std::string* UnsubscribeConfigurationRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.UnsubscribeConfigurationRequest.id)
  return _internal_mutable_id();
}
inline const std::string& UnsubscribeConfigurationRequest::_internal_id() const {
  return id_.Get();
}
inline void UnsubscribeConfigurationRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnsubscribeConfigurationRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.UnsubscribeConfigurationRequest.id)
}
inline void UnsubscribeConfigurationRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.UnsubscribeConfigurationRequest.id)
}
inline void UnsubscribeConfigurationRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.UnsubscribeConfigurationRequest.id)
}
inline std::string* UnsubscribeConfigurationRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnsubscribeConfigurationRequest::release_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.UnsubscribeConfigurationRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnsubscribeConfigurationRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.UnsubscribeConfigurationRequest.id)
}
inline std::string* UnsubscribeConfigurationRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.UnsubscribeConfigurationRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UnsubscribeConfigurationRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.UnsubscribeConfigurationRequest.id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SubscribeConfigurationResponse

// string id = 1;
inline void SubscribeConfigurationResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscribeConfigurationResponse::id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubscribeConfigurationResponse.id)
  return _internal_id();
}
inline void SubscribeConfigurationResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubscribeConfigurationResponse.id)
}
inline std::string* SubscribeConfigurationResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubscribeConfigurationResponse.id)
  return _internal_mutable_id();
}
inline const std::string& SubscribeConfigurationResponse::_internal_id() const {
  return id_.Get();
}
inline void SubscribeConfigurationResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscribeConfigurationResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubscribeConfigurationResponse.id)
}
inline void SubscribeConfigurationResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubscribeConfigurationResponse.id)
}
inline void SubscribeConfigurationResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubscribeConfigurationResponse.id)
}
inline std::string* SubscribeConfigurationResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscribeConfigurationResponse::release_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubscribeConfigurationResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscribeConfigurationResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubscribeConfigurationResponse.id)
}
inline std::string* SubscribeConfigurationResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubscribeConfigurationResponse.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubscribeConfigurationResponse::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubscribeConfigurationResponse.id)
}

// map<string, .dapr.proto.common.v1.ConfigurationItem> items = 2;
inline int SubscribeConfigurationResponse::_internal_items_size() const {
  return items_.size();
}
inline int SubscribeConfigurationResponse::items_size() const {
  return _internal_items_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::common::v1::ConfigurationItem >&
SubscribeConfigurationResponse::_internal_items() const {
  return items_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::common::v1::ConfigurationItem >&
SubscribeConfigurationResponse::items() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.SubscribeConfigurationResponse.items)
  return _internal_items();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::common::v1::ConfigurationItem >*
SubscribeConfigurationResponse::_internal_mutable_items() {
  return items_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dapr::proto::common::v1::ConfigurationItem >*
SubscribeConfigurationResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.SubscribeConfigurationResponse.items)
  return _internal_mutable_items();
}

// -------------------------------------------------------------------

// UnsubscribeConfigurationResponse

// bool ok = 1;
inline void UnsubscribeConfigurationResponse::clear_ok() {
  ok_ = false;
}
inline bool UnsubscribeConfigurationResponse::_internal_ok() const {
  return ok_;
}
inline bool UnsubscribeConfigurationResponse::ok() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.UnsubscribeConfigurationResponse.ok)
  return _internal_ok();
}
inline void UnsubscribeConfigurationResponse::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void UnsubscribeConfigurationResponse::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.UnsubscribeConfigurationResponse.ok)
}

// string message = 2;
inline void UnsubscribeConfigurationResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnsubscribeConfigurationResponse::message() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.UnsubscribeConfigurationResponse.message)
  return _internal_message();
}
inline void UnsubscribeConfigurationResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.UnsubscribeConfigurationResponse.message)
}
inline std::string* UnsubscribeConfigurationResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.UnsubscribeConfigurationResponse.message)
  return _internal_mutable_message();
}
inline const std::string& UnsubscribeConfigurationResponse::_internal_message() const {
  return message_.Get();
}
inline void UnsubscribeConfigurationResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnsubscribeConfigurationResponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.UnsubscribeConfigurationResponse.message)
}
inline void UnsubscribeConfigurationResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.UnsubscribeConfigurationResponse.message)
}
inline void UnsubscribeConfigurationResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.UnsubscribeConfigurationResponse.message)
}
inline std::string* UnsubscribeConfigurationResponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnsubscribeConfigurationResponse::release_message() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.UnsubscribeConfigurationResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnsubscribeConfigurationResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.UnsubscribeConfigurationResponse.message)
}
inline std::string* UnsubscribeConfigurationResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.UnsubscribeConfigurationResponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UnsubscribeConfigurationResponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.UnsubscribeConfigurationResponse.message)
}

// -------------------------------------------------------------------

// TryLockRequest

// string store_name = 1[json_name = "storeName"];
inline void TryLockRequest::clear_store_name() {
  store_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TryLockRequest::store_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TryLockRequest.store_name)
  return _internal_store_name();
}
inline void TryLockRequest::set_store_name(const std::string& value) {
  _internal_set_store_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TryLockRequest.store_name)
}
inline std::string* TryLockRequest::mutable_store_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TryLockRequest.store_name)
  return _internal_mutable_store_name();
}
inline const std::string& TryLockRequest::_internal_store_name() const {
  return store_name_.Get();
}
inline void TryLockRequest::_internal_set_store_name(const std::string& value) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TryLockRequest::set_store_name(std::string&& value) {
  
  store_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.TryLockRequest.store_name)
}
inline void TryLockRequest::set_store_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.TryLockRequest.store_name)
}
inline void TryLockRequest::set_store_name(const char* value,
    size_t size) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.TryLockRequest.store_name)
}
inline std::string* TryLockRequest::_internal_mutable_store_name() {
  
  return store_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TryLockRequest::release_store_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TryLockRequest.store_name)
  return store_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TryLockRequest::set_allocated_store_name(std::string* store_name) {
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), store_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TryLockRequest.store_name)
}
inline std::string* TryLockRequest::unsafe_arena_release_store_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.TryLockRequest.store_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return store_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TryLockRequest::unsafe_arena_set_allocated_store_name(
    std::string* store_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      store_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.TryLockRequest.store_name)
}

// string resource_id = 2[json_name = "resourceId"];
inline void TryLockRequest::clear_resource_id() {
  resource_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TryLockRequest::resource_id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TryLockRequest.resource_id)
  return _internal_resource_id();
}
inline void TryLockRequest::set_resource_id(const std::string& value) {
  _internal_set_resource_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TryLockRequest.resource_id)
}
inline std::string* TryLockRequest::mutable_resource_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TryLockRequest.resource_id)
  return _internal_mutable_resource_id();
}
inline const std::string& TryLockRequest::_internal_resource_id() const {
  return resource_id_.Get();
}
inline void TryLockRequest::_internal_set_resource_id(const std::string& value) {
  
  resource_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TryLockRequest::set_resource_id(std::string&& value) {
  
  resource_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.TryLockRequest.resource_id)
}
inline void TryLockRequest::set_resource_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.TryLockRequest.resource_id)
}
inline void TryLockRequest::set_resource_id(const char* value,
    size_t size) {
  
  resource_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.TryLockRequest.resource_id)
}
inline std::string* TryLockRequest::_internal_mutable_resource_id() {
  
  return resource_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TryLockRequest::release_resource_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TryLockRequest.resource_id)
  return resource_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TryLockRequest::set_allocated_resource_id(std::string* resource_id) {
  if (resource_id != nullptr) {
    
  } else {
    
  }
  resource_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TryLockRequest.resource_id)
}
inline std::string* TryLockRequest::unsafe_arena_release_resource_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.TryLockRequest.resource_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return resource_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TryLockRequest::unsafe_arena_set_allocated_resource_id(
    std::string* resource_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (resource_id != nullptr) {
    
  } else {
    
  }
  resource_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      resource_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.TryLockRequest.resource_id)
}

// string lock_owner = 3[json_name = "lockOwner"];
inline void TryLockRequest::clear_lock_owner() {
  lock_owner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TryLockRequest::lock_owner() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TryLockRequest.lock_owner)
  return _internal_lock_owner();
}
inline void TryLockRequest::set_lock_owner(const std::string& value) {
  _internal_set_lock_owner(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TryLockRequest.lock_owner)
}
inline std::string* TryLockRequest::mutable_lock_owner() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TryLockRequest.lock_owner)
  return _internal_mutable_lock_owner();
}
inline const std::string& TryLockRequest::_internal_lock_owner() const {
  return lock_owner_.Get();
}
inline void TryLockRequest::_internal_set_lock_owner(const std::string& value) {
  
  lock_owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TryLockRequest::set_lock_owner(std::string&& value) {
  
  lock_owner_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.TryLockRequest.lock_owner)
}
inline void TryLockRequest::set_lock_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lock_owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.TryLockRequest.lock_owner)
}
inline void TryLockRequest::set_lock_owner(const char* value,
    size_t size) {
  
  lock_owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.TryLockRequest.lock_owner)
}
inline std::string* TryLockRequest::_internal_mutable_lock_owner() {
  
  return lock_owner_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TryLockRequest::release_lock_owner() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TryLockRequest.lock_owner)
  return lock_owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TryLockRequest::set_allocated_lock_owner(std::string* lock_owner) {
  if (lock_owner != nullptr) {
    
  } else {
    
  }
  lock_owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lock_owner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TryLockRequest.lock_owner)
}
inline std::string* TryLockRequest::unsafe_arena_release_lock_owner() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.TryLockRequest.lock_owner)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return lock_owner_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TryLockRequest::unsafe_arena_set_allocated_lock_owner(
    std::string* lock_owner) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (lock_owner != nullptr) {
    
  } else {
    
  }
  lock_owner_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      lock_owner, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.TryLockRequest.lock_owner)
}

// int32 expiry_in_seconds = 4[json_name = "expiryInSeconds"];
inline void TryLockRequest::clear_expiry_in_seconds() {
  expiry_in_seconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TryLockRequest::_internal_expiry_in_seconds() const {
  return expiry_in_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TryLockRequest::expiry_in_seconds() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TryLockRequest.expiry_in_seconds)
  return _internal_expiry_in_seconds();
}
inline void TryLockRequest::_internal_set_expiry_in_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expiry_in_seconds_ = value;
}
inline void TryLockRequest::set_expiry_in_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expiry_in_seconds(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TryLockRequest.expiry_in_seconds)
}

// -------------------------------------------------------------------

// TryLockResponse

// bool success = 1;
inline void TryLockResponse::clear_success() {
  success_ = false;
}
inline bool TryLockResponse::_internal_success() const {
  return success_;
}
inline bool TryLockResponse::success() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TryLockResponse.success)
  return _internal_success();
}
inline void TryLockResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void TryLockResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TryLockResponse.success)
}

// -------------------------------------------------------------------

// UnlockRequest

// string store_name = 1[json_name = "storeName"];
inline void UnlockRequest::clear_store_name() {
  store_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnlockRequest::store_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.UnlockRequest.store_name)
  return _internal_store_name();
}
inline void UnlockRequest::set_store_name(const std::string& value) {
  _internal_set_store_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.UnlockRequest.store_name)
}
inline std::string* UnlockRequest::mutable_store_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.UnlockRequest.store_name)
  return _internal_mutable_store_name();
}
inline const std::string& UnlockRequest::_internal_store_name() const {
  return store_name_.Get();
}
inline void UnlockRequest::_internal_set_store_name(const std::string& value) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnlockRequest::set_store_name(std::string&& value) {
  
  store_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.UnlockRequest.store_name)
}
inline void UnlockRequest::set_store_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.UnlockRequest.store_name)
}
inline void UnlockRequest::set_store_name(const char* value,
    size_t size) {
  
  store_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.UnlockRequest.store_name)
}
inline std::string* UnlockRequest::_internal_mutable_store_name() {
  
  return store_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnlockRequest::release_store_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.UnlockRequest.store_name)
  return store_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnlockRequest::set_allocated_store_name(std::string* store_name) {
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), store_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.UnlockRequest.store_name)
}
inline std::string* UnlockRequest::unsafe_arena_release_store_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.UnlockRequest.store_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return store_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UnlockRequest::unsafe_arena_set_allocated_store_name(
    std::string* store_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (store_name != nullptr) {
    
  } else {
    
  }
  store_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      store_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.UnlockRequest.store_name)
}

// string resource_id = 2[json_name = "resourceId"];
inline void UnlockRequest::clear_resource_id() {
  resource_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnlockRequest::resource_id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.UnlockRequest.resource_id)
  return _internal_resource_id();
}
inline void UnlockRequest::set_resource_id(const std::string& value) {
  _internal_set_resource_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.UnlockRequest.resource_id)
}
inline std::string* UnlockRequest::mutable_resource_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.UnlockRequest.resource_id)
  return _internal_mutable_resource_id();
}
inline const std::string& UnlockRequest::_internal_resource_id() const {
  return resource_id_.Get();
}
inline void UnlockRequest::_internal_set_resource_id(const std::string& value) {
  
  resource_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnlockRequest::set_resource_id(std::string&& value) {
  
  resource_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.UnlockRequest.resource_id)
}
inline void UnlockRequest::set_resource_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.UnlockRequest.resource_id)
}
inline void UnlockRequest::set_resource_id(const char* value,
    size_t size) {
  
  resource_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.UnlockRequest.resource_id)
}
inline std::string* UnlockRequest::_internal_mutable_resource_id() {
  
  return resource_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnlockRequest::release_resource_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.UnlockRequest.resource_id)
  return resource_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnlockRequest::set_allocated_resource_id(std::string* resource_id) {
  if (resource_id != nullptr) {
    
  } else {
    
  }
  resource_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.UnlockRequest.resource_id)
}
inline std::string* UnlockRequest::unsafe_arena_release_resource_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.UnlockRequest.resource_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return resource_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UnlockRequest::unsafe_arena_set_allocated_resource_id(
    std::string* resource_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (resource_id != nullptr) {
    
  } else {
    
  }
  resource_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      resource_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.UnlockRequest.resource_id)
}

// string lock_owner = 3[json_name = "lockOwner"];
inline void UnlockRequest::clear_lock_owner() {
  lock_owner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnlockRequest::lock_owner() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.UnlockRequest.lock_owner)
  return _internal_lock_owner();
}
inline void UnlockRequest::set_lock_owner(const std::string& value) {
  _internal_set_lock_owner(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.UnlockRequest.lock_owner)
}
inline std::string* UnlockRequest::mutable_lock_owner() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.UnlockRequest.lock_owner)
  return _internal_mutable_lock_owner();
}
inline const std::string& UnlockRequest::_internal_lock_owner() const {
  return lock_owner_.Get();
}
inline void UnlockRequest::_internal_set_lock_owner(const std::string& value) {
  
  lock_owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnlockRequest::set_lock_owner(std::string&& value) {
  
  lock_owner_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.UnlockRequest.lock_owner)
}
inline void UnlockRequest::set_lock_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lock_owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.UnlockRequest.lock_owner)
}
inline void UnlockRequest::set_lock_owner(const char* value,
    size_t size) {
  
  lock_owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.UnlockRequest.lock_owner)
}
inline std::string* UnlockRequest::_internal_mutable_lock_owner() {
  
  return lock_owner_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnlockRequest::release_lock_owner() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.UnlockRequest.lock_owner)
  return lock_owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnlockRequest::set_allocated_lock_owner(std::string* lock_owner) {
  if (lock_owner != nullptr) {
    
  } else {
    
  }
  lock_owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lock_owner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.UnlockRequest.lock_owner)
}
inline std::string* UnlockRequest::unsafe_arena_release_lock_owner() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.UnlockRequest.lock_owner)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return lock_owner_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UnlockRequest::unsafe_arena_set_allocated_lock_owner(
    std::string* lock_owner) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (lock_owner != nullptr) {
    
  } else {
    
  }
  lock_owner_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      lock_owner, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.UnlockRequest.lock_owner)
}

// -------------------------------------------------------------------

// UnlockResponse

// .dapr.proto.runtime.v1.UnlockResponse.Status status = 1;
inline void UnlockResponse::clear_status() {
  status_ = 0;
}
inline ::dapr::proto::runtime::v1::UnlockResponse_Status UnlockResponse::_internal_status() const {
  return static_cast< ::dapr::proto::runtime::v1::UnlockResponse_Status >(status_);
}
inline ::dapr::proto::runtime::v1::UnlockResponse_Status UnlockResponse::status() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.UnlockResponse.status)
  return _internal_status();
}
inline void UnlockResponse::_internal_set_status(::dapr::proto::runtime::v1::UnlockResponse_Status value) {
  
  status_ = value;
}
inline void UnlockResponse::set_status(::dapr::proto::runtime::v1::UnlockResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.UnlockResponse.status)
}

// -------------------------------------------------------------------

// SubtleGetKeyRequest

// string component_name = 1[json_name = "componentName"];
inline void SubtleGetKeyRequest::clear_component_name() {
  component_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleGetKeyRequest::component_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleGetKeyRequest.component_name)
  return _internal_component_name();
}
inline void SubtleGetKeyRequest::set_component_name(const std::string& value) {
  _internal_set_component_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleGetKeyRequest.component_name)
}
inline std::string* SubtleGetKeyRequest::mutable_component_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleGetKeyRequest.component_name)
  return _internal_mutable_component_name();
}
inline const std::string& SubtleGetKeyRequest::_internal_component_name() const {
  return component_name_.Get();
}
inline void SubtleGetKeyRequest::_internal_set_component_name(const std::string& value) {
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleGetKeyRequest::set_component_name(std::string&& value) {
  
  component_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleGetKeyRequest.component_name)
}
inline void SubtleGetKeyRequest::set_component_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleGetKeyRequest.component_name)
}
inline void SubtleGetKeyRequest::set_component_name(const char* value,
    size_t size) {
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleGetKeyRequest.component_name)
}
inline std::string* SubtleGetKeyRequest::_internal_mutable_component_name() {
  
  return component_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleGetKeyRequest::release_component_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleGetKeyRequest.component_name)
  return component_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleGetKeyRequest::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    
  } else {
    
  }
  component_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleGetKeyRequest.component_name)
}
inline std::string* SubtleGetKeyRequest::unsafe_arena_release_component_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleGetKeyRequest.component_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return component_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleGetKeyRequest::unsafe_arena_set_allocated_component_name(
    std::string* component_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (component_name != nullptr) {
    
  } else {
    
  }
  component_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      component_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleGetKeyRequest.component_name)
}

// string name = 2;
inline void SubtleGetKeyRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleGetKeyRequest::name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleGetKeyRequest.name)
  return _internal_name();
}
inline void SubtleGetKeyRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleGetKeyRequest.name)
}
inline std::string* SubtleGetKeyRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleGetKeyRequest.name)
  return _internal_mutable_name();
}
inline const std::string& SubtleGetKeyRequest::_internal_name() const {
  return name_.Get();
}
inline void SubtleGetKeyRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleGetKeyRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleGetKeyRequest.name)
}
inline void SubtleGetKeyRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleGetKeyRequest.name)
}
inline void SubtleGetKeyRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleGetKeyRequest.name)
}
inline std::string* SubtleGetKeyRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleGetKeyRequest::release_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleGetKeyRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleGetKeyRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleGetKeyRequest.name)
}
inline std::string* SubtleGetKeyRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleGetKeyRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleGetKeyRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleGetKeyRequest.name)
}

// .dapr.proto.runtime.v1.SubtleGetKeyRequest.KeyFormat format = 3;
inline void SubtleGetKeyRequest::clear_format() {
  format_ = 0;
}
inline ::dapr::proto::runtime::v1::SubtleGetKeyRequest_KeyFormat SubtleGetKeyRequest::_internal_format() const {
  return static_cast< ::dapr::proto::runtime::v1::SubtleGetKeyRequest_KeyFormat >(format_);
}
inline ::dapr::proto::runtime::v1::SubtleGetKeyRequest_KeyFormat SubtleGetKeyRequest::format() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleGetKeyRequest.format)
  return _internal_format();
}
inline void SubtleGetKeyRequest::_internal_set_format(::dapr::proto::runtime::v1::SubtleGetKeyRequest_KeyFormat value) {
  
  format_ = value;
}
inline void SubtleGetKeyRequest::set_format(::dapr::proto::runtime::v1::SubtleGetKeyRequest_KeyFormat value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleGetKeyRequest.format)
}

// -------------------------------------------------------------------

// SubtleGetKeyResponse

// string name = 1;
inline void SubtleGetKeyResponse::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleGetKeyResponse::name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleGetKeyResponse.name)
  return _internal_name();
}
inline void SubtleGetKeyResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleGetKeyResponse.name)
}
inline std::string* SubtleGetKeyResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleGetKeyResponse.name)
  return _internal_mutable_name();
}
inline const std::string& SubtleGetKeyResponse::_internal_name() const {
  return name_.Get();
}
inline void SubtleGetKeyResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleGetKeyResponse::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleGetKeyResponse.name)
}
inline void SubtleGetKeyResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleGetKeyResponse.name)
}
inline void SubtleGetKeyResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleGetKeyResponse.name)
}
inline std::string* SubtleGetKeyResponse::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleGetKeyResponse::release_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleGetKeyResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleGetKeyResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleGetKeyResponse.name)
}
inline std::string* SubtleGetKeyResponse::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleGetKeyResponse.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleGetKeyResponse::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleGetKeyResponse.name)
}

// string public_key = 2[json_name = "publicKey"];
inline void SubtleGetKeyResponse::clear_public_key() {
  public_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleGetKeyResponse::public_key() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleGetKeyResponse.public_key)
  return _internal_public_key();
}
inline void SubtleGetKeyResponse::set_public_key(const std::string& value) {
  _internal_set_public_key(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleGetKeyResponse.public_key)
}
inline std::string* SubtleGetKeyResponse::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleGetKeyResponse.public_key)
  return _internal_mutable_public_key();
}
inline const std::string& SubtleGetKeyResponse::_internal_public_key() const {
  return public_key_.Get();
}
inline void SubtleGetKeyResponse::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleGetKeyResponse::set_public_key(std::string&& value) {
  
  public_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleGetKeyResponse.public_key)
}
inline void SubtleGetKeyResponse::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleGetKeyResponse.public_key)
}
inline void SubtleGetKeyResponse::set_public_key(const char* value,
    size_t size) {
  
  public_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleGetKeyResponse.public_key)
}
inline std::string* SubtleGetKeyResponse::_internal_mutable_public_key() {
  
  return public_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleGetKeyResponse::release_public_key() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleGetKeyResponse.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleGetKeyResponse::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleGetKeyResponse.public_key)
}
inline std::string* SubtleGetKeyResponse::unsafe_arena_release_public_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleGetKeyResponse.public_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return public_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleGetKeyResponse::unsafe_arena_set_allocated_public_key(
    std::string* public_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      public_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleGetKeyResponse.public_key)
}

// -------------------------------------------------------------------

// SubtleEncryptRequest

// string component_name = 1[json_name = "componentName"];
inline void SubtleEncryptRequest::clear_component_name() {
  component_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleEncryptRequest::component_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleEncryptRequest.component_name)
  return _internal_component_name();
}
inline void SubtleEncryptRequest::set_component_name(const std::string& value) {
  _internal_set_component_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleEncryptRequest.component_name)
}
inline std::string* SubtleEncryptRequest::mutable_component_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleEncryptRequest.component_name)
  return _internal_mutable_component_name();
}
inline const std::string& SubtleEncryptRequest::_internal_component_name() const {
  return component_name_.Get();
}
inline void SubtleEncryptRequest::_internal_set_component_name(const std::string& value) {
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleEncryptRequest::set_component_name(std::string&& value) {
  
  component_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleEncryptRequest.component_name)
}
inline void SubtleEncryptRequest::set_component_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleEncryptRequest.component_name)
}
inline void SubtleEncryptRequest::set_component_name(const char* value,
    size_t size) {
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleEncryptRequest.component_name)
}
inline std::string* SubtleEncryptRequest::_internal_mutable_component_name() {
  
  return component_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleEncryptRequest::release_component_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleEncryptRequest.component_name)
  return component_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleEncryptRequest::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    
  } else {
    
  }
  component_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleEncryptRequest.component_name)
}
inline std::string* SubtleEncryptRequest::unsafe_arena_release_component_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleEncryptRequest.component_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return component_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleEncryptRequest::unsafe_arena_set_allocated_component_name(
    std::string* component_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (component_name != nullptr) {
    
  } else {
    
  }
  component_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      component_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleEncryptRequest.component_name)
}

// bytes plaintext = 2;
inline void SubtleEncryptRequest::clear_plaintext() {
  plaintext_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleEncryptRequest::plaintext() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleEncryptRequest.plaintext)
  return _internal_plaintext();
}
inline void SubtleEncryptRequest::set_plaintext(const std::string& value) {
  _internal_set_plaintext(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleEncryptRequest.plaintext)
}
inline std::string* SubtleEncryptRequest::mutable_plaintext() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleEncryptRequest.plaintext)
  return _internal_mutable_plaintext();
}
inline const std::string& SubtleEncryptRequest::_internal_plaintext() const {
  return plaintext_.Get();
}
inline void SubtleEncryptRequest::_internal_set_plaintext(const std::string& value) {
  
  plaintext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleEncryptRequest::set_plaintext(std::string&& value) {
  
  plaintext_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleEncryptRequest.plaintext)
}
inline void SubtleEncryptRequest::set_plaintext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  plaintext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleEncryptRequest.plaintext)
}
inline void SubtleEncryptRequest::set_plaintext(const void* value,
    size_t size) {
  
  plaintext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleEncryptRequest.plaintext)
}
inline std::string* SubtleEncryptRequest::_internal_mutable_plaintext() {
  
  return plaintext_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleEncryptRequest::release_plaintext() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleEncryptRequest.plaintext)
  return plaintext_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleEncryptRequest::set_allocated_plaintext(std::string* plaintext) {
  if (plaintext != nullptr) {
    
  } else {
    
  }
  plaintext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintext,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleEncryptRequest.plaintext)
}
inline std::string* SubtleEncryptRequest::unsafe_arena_release_plaintext() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleEncryptRequest.plaintext)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return plaintext_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleEncryptRequest::unsafe_arena_set_allocated_plaintext(
    std::string* plaintext) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (plaintext != nullptr) {
    
  } else {
    
  }
  plaintext_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      plaintext, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleEncryptRequest.plaintext)
}

// string algorithm = 3;
inline void SubtleEncryptRequest::clear_algorithm() {
  algorithm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleEncryptRequest::algorithm() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleEncryptRequest.algorithm)
  return _internal_algorithm();
}
inline void SubtleEncryptRequest::set_algorithm(const std::string& value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleEncryptRequest.algorithm)
}
inline std::string* SubtleEncryptRequest::mutable_algorithm() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleEncryptRequest.algorithm)
  return _internal_mutable_algorithm();
}
inline const std::string& SubtleEncryptRequest::_internal_algorithm() const {
  return algorithm_.Get();
}
inline void SubtleEncryptRequest::_internal_set_algorithm(const std::string& value) {
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleEncryptRequest::set_algorithm(std::string&& value) {
  
  algorithm_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleEncryptRequest.algorithm)
}
inline void SubtleEncryptRequest::set_algorithm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleEncryptRequest.algorithm)
}
inline void SubtleEncryptRequest::set_algorithm(const char* value,
    size_t size) {
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleEncryptRequest.algorithm)
}
inline std::string* SubtleEncryptRequest::_internal_mutable_algorithm() {
  
  return algorithm_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleEncryptRequest::release_algorithm() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleEncryptRequest.algorithm)
  return algorithm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleEncryptRequest::set_allocated_algorithm(std::string* algorithm) {
  if (algorithm != nullptr) {
    
  } else {
    
  }
  algorithm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algorithm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleEncryptRequest.algorithm)
}
inline std::string* SubtleEncryptRequest::unsafe_arena_release_algorithm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleEncryptRequest.algorithm)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return algorithm_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleEncryptRequest::unsafe_arena_set_allocated_algorithm(
    std::string* algorithm) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (algorithm != nullptr) {
    
  } else {
    
  }
  algorithm_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      algorithm, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleEncryptRequest.algorithm)
}

// string key_name = 4[json_name = "keyName"];
inline void SubtleEncryptRequest::clear_key_name() {
  key_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleEncryptRequest::key_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleEncryptRequest.key_name)
  return _internal_key_name();
}
inline void SubtleEncryptRequest::set_key_name(const std::string& value) {
  _internal_set_key_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleEncryptRequest.key_name)
}
inline std::string* SubtleEncryptRequest::mutable_key_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleEncryptRequest.key_name)
  return _internal_mutable_key_name();
}
inline const std::string& SubtleEncryptRequest::_internal_key_name() const {
  return key_name_.Get();
}
inline void SubtleEncryptRequest::_internal_set_key_name(const std::string& value) {
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleEncryptRequest::set_key_name(std::string&& value) {
  
  key_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleEncryptRequest.key_name)
}
inline void SubtleEncryptRequest::set_key_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleEncryptRequest.key_name)
}
inline void SubtleEncryptRequest::set_key_name(const char* value,
    size_t size) {
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleEncryptRequest.key_name)
}
inline std::string* SubtleEncryptRequest::_internal_mutable_key_name() {
  
  return key_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleEncryptRequest::release_key_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleEncryptRequest.key_name)
  return key_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleEncryptRequest::set_allocated_key_name(std::string* key_name) {
  if (key_name != nullptr) {
    
  } else {
    
  }
  key_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleEncryptRequest.key_name)
}
inline std::string* SubtleEncryptRequest::unsafe_arena_release_key_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleEncryptRequest.key_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleEncryptRequest::unsafe_arena_set_allocated_key_name(
    std::string* key_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key_name != nullptr) {
    
  } else {
    
  }
  key_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleEncryptRequest.key_name)
}

// bytes nonce = 5;
inline void SubtleEncryptRequest::clear_nonce() {
  nonce_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleEncryptRequest::nonce() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleEncryptRequest.nonce)
  return _internal_nonce();
}
inline void SubtleEncryptRequest::set_nonce(const std::string& value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleEncryptRequest.nonce)
}
inline std::string* SubtleEncryptRequest::mutable_nonce() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleEncryptRequest.nonce)
  return _internal_mutable_nonce();
}
inline const std::string& SubtleEncryptRequest::_internal_nonce() const {
  return nonce_.Get();
}
inline void SubtleEncryptRequest::_internal_set_nonce(const std::string& value) {
  
  nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleEncryptRequest::set_nonce(std::string&& value) {
  
  nonce_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleEncryptRequest.nonce)
}
inline void SubtleEncryptRequest::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleEncryptRequest.nonce)
}
inline void SubtleEncryptRequest::set_nonce(const void* value,
    size_t size) {
  
  nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleEncryptRequest.nonce)
}
inline std::string* SubtleEncryptRequest::_internal_mutable_nonce() {
  
  return nonce_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleEncryptRequest::release_nonce() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleEncryptRequest.nonce)
  return nonce_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleEncryptRequest::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleEncryptRequest.nonce)
}
inline std::string* SubtleEncryptRequest::unsafe_arena_release_nonce() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleEncryptRequest.nonce)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return nonce_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleEncryptRequest::unsafe_arena_set_allocated_nonce(
    std::string* nonce) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nonce, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleEncryptRequest.nonce)
}

// bytes associated_data = 6[json_name = "associatedData"];
inline void SubtleEncryptRequest::clear_associated_data() {
  associated_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleEncryptRequest::associated_data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleEncryptRequest.associated_data)
  return _internal_associated_data();
}
inline void SubtleEncryptRequest::set_associated_data(const std::string& value) {
  _internal_set_associated_data(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleEncryptRequest.associated_data)
}
inline std::string* SubtleEncryptRequest::mutable_associated_data() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleEncryptRequest.associated_data)
  return _internal_mutable_associated_data();
}
inline const std::string& SubtleEncryptRequest::_internal_associated_data() const {
  return associated_data_.Get();
}
inline void SubtleEncryptRequest::_internal_set_associated_data(const std::string& value) {
  
  associated_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleEncryptRequest::set_associated_data(std::string&& value) {
  
  associated_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleEncryptRequest.associated_data)
}
inline void SubtleEncryptRequest::set_associated_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  associated_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleEncryptRequest.associated_data)
}
inline void SubtleEncryptRequest::set_associated_data(const void* value,
    size_t size) {
  
  associated_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleEncryptRequest.associated_data)
}
inline std::string* SubtleEncryptRequest::_internal_mutable_associated_data() {
  
  return associated_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleEncryptRequest::release_associated_data() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleEncryptRequest.associated_data)
  return associated_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleEncryptRequest::set_allocated_associated_data(std::string* associated_data) {
  if (associated_data != nullptr) {
    
  } else {
    
  }
  associated_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), associated_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleEncryptRequest.associated_data)
}
inline std::string* SubtleEncryptRequest::unsafe_arena_release_associated_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleEncryptRequest.associated_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return associated_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleEncryptRequest::unsafe_arena_set_allocated_associated_data(
    std::string* associated_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (associated_data != nullptr) {
    
  } else {
    
  }
  associated_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      associated_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleEncryptRequest.associated_data)
}

// -------------------------------------------------------------------

// SubtleEncryptResponse

// bytes ciphertext = 1;
inline void SubtleEncryptResponse::clear_ciphertext() {
  ciphertext_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleEncryptResponse::ciphertext() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleEncryptResponse.ciphertext)
  return _internal_ciphertext();
}
inline void SubtleEncryptResponse::set_ciphertext(const std::string& value) {
  _internal_set_ciphertext(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleEncryptResponse.ciphertext)
}
inline std::string* SubtleEncryptResponse::mutable_ciphertext() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleEncryptResponse.ciphertext)
  return _internal_mutable_ciphertext();
}
inline const std::string& SubtleEncryptResponse::_internal_ciphertext() const {
  return ciphertext_.Get();
}
inline void SubtleEncryptResponse::_internal_set_ciphertext(const std::string& value) {
  
  ciphertext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleEncryptResponse::set_ciphertext(std::string&& value) {
  
  ciphertext_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleEncryptResponse.ciphertext)
}
inline void SubtleEncryptResponse::set_ciphertext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ciphertext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleEncryptResponse.ciphertext)
}
inline void SubtleEncryptResponse::set_ciphertext(const void* value,
    size_t size) {
  
  ciphertext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleEncryptResponse.ciphertext)
}
inline std::string* SubtleEncryptResponse::_internal_mutable_ciphertext() {
  
  return ciphertext_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleEncryptResponse::release_ciphertext() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleEncryptResponse.ciphertext)
  return ciphertext_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleEncryptResponse::set_allocated_ciphertext(std::string* ciphertext) {
  if (ciphertext != nullptr) {
    
  } else {
    
  }
  ciphertext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ciphertext,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleEncryptResponse.ciphertext)
}
inline std::string* SubtleEncryptResponse::unsafe_arena_release_ciphertext() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleEncryptResponse.ciphertext)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ciphertext_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleEncryptResponse::unsafe_arena_set_allocated_ciphertext(
    std::string* ciphertext) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ciphertext != nullptr) {
    
  } else {
    
  }
  ciphertext_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ciphertext, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleEncryptResponse.ciphertext)
}

// bytes tag = 2;
inline void SubtleEncryptResponse::clear_tag() {
  tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleEncryptResponse::tag() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleEncryptResponse.tag)
  return _internal_tag();
}
inline void SubtleEncryptResponse::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleEncryptResponse.tag)
}
inline std::string* SubtleEncryptResponse::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleEncryptResponse.tag)
  return _internal_mutable_tag();
}
inline const std::string& SubtleEncryptResponse::_internal_tag() const {
  return tag_.Get();
}
inline void SubtleEncryptResponse::_internal_set_tag(const std::string& value) {
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleEncryptResponse::set_tag(std::string&& value) {
  
  tag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleEncryptResponse.tag)
}
inline void SubtleEncryptResponse::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleEncryptResponse.tag)
}
inline void SubtleEncryptResponse::set_tag(const void* value,
    size_t size) {
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleEncryptResponse.tag)
}
inline std::string* SubtleEncryptResponse::_internal_mutable_tag() {
  
  return tag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleEncryptResponse::release_tag() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleEncryptResponse.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleEncryptResponse::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleEncryptResponse.tag)
}
inline std::string* SubtleEncryptResponse::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleEncryptResponse.tag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleEncryptResponse::unsafe_arena_set_allocated_tag(
    std::string* tag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleEncryptResponse.tag)
}

// -------------------------------------------------------------------

// SubtleDecryptRequest

// string component_name = 1[json_name = "componentName"];
inline void SubtleDecryptRequest::clear_component_name() {
  component_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleDecryptRequest::component_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleDecryptRequest.component_name)
  return _internal_component_name();
}
inline void SubtleDecryptRequest::set_component_name(const std::string& value) {
  _internal_set_component_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleDecryptRequest.component_name)
}
inline std::string* SubtleDecryptRequest::mutable_component_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleDecryptRequest.component_name)
  return _internal_mutable_component_name();
}
inline const std::string& SubtleDecryptRequest::_internal_component_name() const {
  return component_name_.Get();
}
inline void SubtleDecryptRequest::_internal_set_component_name(const std::string& value) {
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleDecryptRequest::set_component_name(std::string&& value) {
  
  component_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleDecryptRequest.component_name)
}
inline void SubtleDecryptRequest::set_component_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleDecryptRequest.component_name)
}
inline void SubtleDecryptRequest::set_component_name(const char* value,
    size_t size) {
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleDecryptRequest.component_name)
}
inline std::string* SubtleDecryptRequest::_internal_mutable_component_name() {
  
  return component_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleDecryptRequest::release_component_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleDecryptRequest.component_name)
  return component_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleDecryptRequest::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    
  } else {
    
  }
  component_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleDecryptRequest.component_name)
}
inline std::string* SubtleDecryptRequest::unsafe_arena_release_component_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleDecryptRequest.component_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return component_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleDecryptRequest::unsafe_arena_set_allocated_component_name(
    std::string* component_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (component_name != nullptr) {
    
  } else {
    
  }
  component_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      component_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleDecryptRequest.component_name)
}

// bytes ciphertext = 2;
inline void SubtleDecryptRequest::clear_ciphertext() {
  ciphertext_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleDecryptRequest::ciphertext() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleDecryptRequest.ciphertext)
  return _internal_ciphertext();
}
inline void SubtleDecryptRequest::set_ciphertext(const std::string& value) {
  _internal_set_ciphertext(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleDecryptRequest.ciphertext)
}
inline std::string* SubtleDecryptRequest::mutable_ciphertext() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleDecryptRequest.ciphertext)
  return _internal_mutable_ciphertext();
}
inline const std::string& SubtleDecryptRequest::_internal_ciphertext() const {
  return ciphertext_.Get();
}
inline void SubtleDecryptRequest::_internal_set_ciphertext(const std::string& value) {
  
  ciphertext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleDecryptRequest::set_ciphertext(std::string&& value) {
  
  ciphertext_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleDecryptRequest.ciphertext)
}
inline void SubtleDecryptRequest::set_ciphertext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ciphertext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleDecryptRequest.ciphertext)
}
inline void SubtleDecryptRequest::set_ciphertext(const void* value,
    size_t size) {
  
  ciphertext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleDecryptRequest.ciphertext)
}
inline std::string* SubtleDecryptRequest::_internal_mutable_ciphertext() {
  
  return ciphertext_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleDecryptRequest::release_ciphertext() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleDecryptRequest.ciphertext)
  return ciphertext_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleDecryptRequest::set_allocated_ciphertext(std::string* ciphertext) {
  if (ciphertext != nullptr) {
    
  } else {
    
  }
  ciphertext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ciphertext,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleDecryptRequest.ciphertext)
}
inline std::string* SubtleDecryptRequest::unsafe_arena_release_ciphertext() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleDecryptRequest.ciphertext)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ciphertext_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleDecryptRequest::unsafe_arena_set_allocated_ciphertext(
    std::string* ciphertext) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ciphertext != nullptr) {
    
  } else {
    
  }
  ciphertext_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ciphertext, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleDecryptRequest.ciphertext)
}

// string algorithm = 3;
inline void SubtleDecryptRequest::clear_algorithm() {
  algorithm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleDecryptRequest::algorithm() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleDecryptRequest.algorithm)
  return _internal_algorithm();
}
inline void SubtleDecryptRequest::set_algorithm(const std::string& value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleDecryptRequest.algorithm)
}
inline std::string* SubtleDecryptRequest::mutable_algorithm() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleDecryptRequest.algorithm)
  return _internal_mutable_algorithm();
}
inline const std::string& SubtleDecryptRequest::_internal_algorithm() const {
  return algorithm_.Get();
}
inline void SubtleDecryptRequest::_internal_set_algorithm(const std::string& value) {
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleDecryptRequest::set_algorithm(std::string&& value) {
  
  algorithm_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleDecryptRequest.algorithm)
}
inline void SubtleDecryptRequest::set_algorithm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleDecryptRequest.algorithm)
}
inline void SubtleDecryptRequest::set_algorithm(const char* value,
    size_t size) {
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleDecryptRequest.algorithm)
}
inline std::string* SubtleDecryptRequest::_internal_mutable_algorithm() {
  
  return algorithm_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleDecryptRequest::release_algorithm() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleDecryptRequest.algorithm)
  return algorithm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleDecryptRequest::set_allocated_algorithm(std::string* algorithm) {
  if (algorithm != nullptr) {
    
  } else {
    
  }
  algorithm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algorithm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleDecryptRequest.algorithm)
}
inline std::string* SubtleDecryptRequest::unsafe_arena_release_algorithm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleDecryptRequest.algorithm)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return algorithm_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleDecryptRequest::unsafe_arena_set_allocated_algorithm(
    std::string* algorithm) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (algorithm != nullptr) {
    
  } else {
    
  }
  algorithm_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      algorithm, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleDecryptRequest.algorithm)
}

// string key_name = 4[json_name = "keyName"];
inline void SubtleDecryptRequest::clear_key_name() {
  key_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleDecryptRequest::key_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleDecryptRequest.key_name)
  return _internal_key_name();
}
inline void SubtleDecryptRequest::set_key_name(const std::string& value) {
  _internal_set_key_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleDecryptRequest.key_name)
}
inline std::string* SubtleDecryptRequest::mutable_key_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleDecryptRequest.key_name)
  return _internal_mutable_key_name();
}
inline const std::string& SubtleDecryptRequest::_internal_key_name() const {
  return key_name_.Get();
}
inline void SubtleDecryptRequest::_internal_set_key_name(const std::string& value) {
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleDecryptRequest::set_key_name(std::string&& value) {
  
  key_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleDecryptRequest.key_name)
}
inline void SubtleDecryptRequest::set_key_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleDecryptRequest.key_name)
}
inline void SubtleDecryptRequest::set_key_name(const char* value,
    size_t size) {
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleDecryptRequest.key_name)
}
inline std::string* SubtleDecryptRequest::_internal_mutable_key_name() {
  
  return key_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleDecryptRequest::release_key_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleDecryptRequest.key_name)
  return key_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleDecryptRequest::set_allocated_key_name(std::string* key_name) {
  if (key_name != nullptr) {
    
  } else {
    
  }
  key_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleDecryptRequest.key_name)
}
inline std::string* SubtleDecryptRequest::unsafe_arena_release_key_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleDecryptRequest.key_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleDecryptRequest::unsafe_arena_set_allocated_key_name(
    std::string* key_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key_name != nullptr) {
    
  } else {
    
  }
  key_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleDecryptRequest.key_name)
}

// bytes nonce = 5;
inline void SubtleDecryptRequest::clear_nonce() {
  nonce_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleDecryptRequest::nonce() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleDecryptRequest.nonce)
  return _internal_nonce();
}
inline void SubtleDecryptRequest::set_nonce(const std::string& value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleDecryptRequest.nonce)
}
inline std::string* SubtleDecryptRequest::mutable_nonce() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleDecryptRequest.nonce)
  return _internal_mutable_nonce();
}
inline const std::string& SubtleDecryptRequest::_internal_nonce() const {
  return nonce_.Get();
}
inline void SubtleDecryptRequest::_internal_set_nonce(const std::string& value) {
  
  nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleDecryptRequest::set_nonce(std::string&& value) {
  
  nonce_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleDecryptRequest.nonce)
}
inline void SubtleDecryptRequest::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleDecryptRequest.nonce)
}
inline void SubtleDecryptRequest::set_nonce(const void* value,
    size_t size) {
  
  nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleDecryptRequest.nonce)
}
inline std::string* SubtleDecryptRequest::_internal_mutable_nonce() {
  
  return nonce_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleDecryptRequest::release_nonce() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleDecryptRequest.nonce)
  return nonce_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleDecryptRequest::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleDecryptRequest.nonce)
}
inline std::string* SubtleDecryptRequest::unsafe_arena_release_nonce() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleDecryptRequest.nonce)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return nonce_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleDecryptRequest::unsafe_arena_set_allocated_nonce(
    std::string* nonce) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nonce, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleDecryptRequest.nonce)
}

// bytes tag = 6;
inline void SubtleDecryptRequest::clear_tag() {
  tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleDecryptRequest::tag() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleDecryptRequest.tag)
  return _internal_tag();
}
inline void SubtleDecryptRequest::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleDecryptRequest.tag)
}
inline std::string* SubtleDecryptRequest::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleDecryptRequest.tag)
  return _internal_mutable_tag();
}
inline const std::string& SubtleDecryptRequest::_internal_tag() const {
  return tag_.Get();
}
inline void SubtleDecryptRequest::_internal_set_tag(const std::string& value) {
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleDecryptRequest::set_tag(std::string&& value) {
  
  tag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleDecryptRequest.tag)
}
inline void SubtleDecryptRequest::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleDecryptRequest.tag)
}
inline void SubtleDecryptRequest::set_tag(const void* value,
    size_t size) {
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleDecryptRequest.tag)
}
inline std::string* SubtleDecryptRequest::_internal_mutable_tag() {
  
  return tag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleDecryptRequest::release_tag() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleDecryptRequest.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleDecryptRequest::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleDecryptRequest.tag)
}
inline std::string* SubtleDecryptRequest::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleDecryptRequest.tag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleDecryptRequest::unsafe_arena_set_allocated_tag(
    std::string* tag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleDecryptRequest.tag)
}

// bytes associated_data = 7[json_name = "associatedData"];
inline void SubtleDecryptRequest::clear_associated_data() {
  associated_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleDecryptRequest::associated_data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleDecryptRequest.associated_data)
  return _internal_associated_data();
}
inline void SubtleDecryptRequest::set_associated_data(const std::string& value) {
  _internal_set_associated_data(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleDecryptRequest.associated_data)
}
inline std::string* SubtleDecryptRequest::mutable_associated_data() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleDecryptRequest.associated_data)
  return _internal_mutable_associated_data();
}
inline const std::string& SubtleDecryptRequest::_internal_associated_data() const {
  return associated_data_.Get();
}
inline void SubtleDecryptRequest::_internal_set_associated_data(const std::string& value) {
  
  associated_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleDecryptRequest::set_associated_data(std::string&& value) {
  
  associated_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleDecryptRequest.associated_data)
}
inline void SubtleDecryptRequest::set_associated_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  associated_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleDecryptRequest.associated_data)
}
inline void SubtleDecryptRequest::set_associated_data(const void* value,
    size_t size) {
  
  associated_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleDecryptRequest.associated_data)
}
inline std::string* SubtleDecryptRequest::_internal_mutable_associated_data() {
  
  return associated_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleDecryptRequest::release_associated_data() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleDecryptRequest.associated_data)
  return associated_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleDecryptRequest::set_allocated_associated_data(std::string* associated_data) {
  if (associated_data != nullptr) {
    
  } else {
    
  }
  associated_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), associated_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleDecryptRequest.associated_data)
}
inline std::string* SubtleDecryptRequest::unsafe_arena_release_associated_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleDecryptRequest.associated_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return associated_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleDecryptRequest::unsafe_arena_set_allocated_associated_data(
    std::string* associated_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (associated_data != nullptr) {
    
  } else {
    
  }
  associated_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      associated_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleDecryptRequest.associated_data)
}

// -------------------------------------------------------------------

// SubtleDecryptResponse

// bytes plaintext = 1;
inline void SubtleDecryptResponse::clear_plaintext() {
  plaintext_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleDecryptResponse::plaintext() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleDecryptResponse.plaintext)
  return _internal_plaintext();
}
inline void SubtleDecryptResponse::set_plaintext(const std::string& value) {
  _internal_set_plaintext(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleDecryptResponse.plaintext)
}
inline std::string* SubtleDecryptResponse::mutable_plaintext() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleDecryptResponse.plaintext)
  return _internal_mutable_plaintext();
}
inline const std::string& SubtleDecryptResponse::_internal_plaintext() const {
  return plaintext_.Get();
}
inline void SubtleDecryptResponse::_internal_set_plaintext(const std::string& value) {
  
  plaintext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleDecryptResponse::set_plaintext(std::string&& value) {
  
  plaintext_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleDecryptResponse.plaintext)
}
inline void SubtleDecryptResponse::set_plaintext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  plaintext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleDecryptResponse.plaintext)
}
inline void SubtleDecryptResponse::set_plaintext(const void* value,
    size_t size) {
  
  plaintext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleDecryptResponse.plaintext)
}
inline std::string* SubtleDecryptResponse::_internal_mutable_plaintext() {
  
  return plaintext_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleDecryptResponse::release_plaintext() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleDecryptResponse.plaintext)
  return plaintext_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleDecryptResponse::set_allocated_plaintext(std::string* plaintext) {
  if (plaintext != nullptr) {
    
  } else {
    
  }
  plaintext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintext,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleDecryptResponse.plaintext)
}
inline std::string* SubtleDecryptResponse::unsafe_arena_release_plaintext() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleDecryptResponse.plaintext)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return plaintext_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleDecryptResponse::unsafe_arena_set_allocated_plaintext(
    std::string* plaintext) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (plaintext != nullptr) {
    
  } else {
    
  }
  plaintext_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      plaintext, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleDecryptResponse.plaintext)
}

// -------------------------------------------------------------------

// SubtleWrapKeyRequest

// string component_name = 1[json_name = "componentName"];
inline void SubtleWrapKeyRequest::clear_component_name() {
  component_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleWrapKeyRequest::component_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleWrapKeyRequest.component_name)
  return _internal_component_name();
}
inline void SubtleWrapKeyRequest::set_component_name(const std::string& value) {
  _internal_set_component_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleWrapKeyRequest.component_name)
}
inline std::string* SubtleWrapKeyRequest::mutable_component_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleWrapKeyRequest.component_name)
  return _internal_mutable_component_name();
}
inline const std::string& SubtleWrapKeyRequest::_internal_component_name() const {
  return component_name_.Get();
}
inline void SubtleWrapKeyRequest::_internal_set_component_name(const std::string& value) {
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleWrapKeyRequest::set_component_name(std::string&& value) {
  
  component_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleWrapKeyRequest.component_name)
}
inline void SubtleWrapKeyRequest::set_component_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleWrapKeyRequest.component_name)
}
inline void SubtleWrapKeyRequest::set_component_name(const char* value,
    size_t size) {
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleWrapKeyRequest.component_name)
}
inline std::string* SubtleWrapKeyRequest::_internal_mutable_component_name() {
  
  return component_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleWrapKeyRequest::release_component_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleWrapKeyRequest.component_name)
  return component_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleWrapKeyRequest::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    
  } else {
    
  }
  component_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleWrapKeyRequest.component_name)
}
inline std::string* SubtleWrapKeyRequest::unsafe_arena_release_component_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleWrapKeyRequest.component_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return component_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleWrapKeyRequest::unsafe_arena_set_allocated_component_name(
    std::string* component_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (component_name != nullptr) {
    
  } else {
    
  }
  component_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      component_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleWrapKeyRequest.component_name)
}

// bytes plaintext_key = 2[json_name = "plaintextKey"];
inline void SubtleWrapKeyRequest::clear_plaintext_key() {
  plaintext_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleWrapKeyRequest::plaintext_key() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleWrapKeyRequest.plaintext_key)
  return _internal_plaintext_key();
}
inline void SubtleWrapKeyRequest::set_plaintext_key(const std::string& value) {
  _internal_set_plaintext_key(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleWrapKeyRequest.plaintext_key)
}
inline std::string* SubtleWrapKeyRequest::mutable_plaintext_key() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleWrapKeyRequest.plaintext_key)
  return _internal_mutable_plaintext_key();
}
inline const std::string& SubtleWrapKeyRequest::_internal_plaintext_key() const {
  return plaintext_key_.Get();
}
inline void SubtleWrapKeyRequest::_internal_set_plaintext_key(const std::string& value) {
  
  plaintext_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleWrapKeyRequest::set_plaintext_key(std::string&& value) {
  
  plaintext_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleWrapKeyRequest.plaintext_key)
}
inline void SubtleWrapKeyRequest::set_plaintext_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  plaintext_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleWrapKeyRequest.plaintext_key)
}
inline void SubtleWrapKeyRequest::set_plaintext_key(const void* value,
    size_t size) {
  
  plaintext_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleWrapKeyRequest.plaintext_key)
}
inline std::string* SubtleWrapKeyRequest::_internal_mutable_plaintext_key() {
  
  return plaintext_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleWrapKeyRequest::release_plaintext_key() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleWrapKeyRequest.plaintext_key)
  return plaintext_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleWrapKeyRequest::set_allocated_plaintext_key(std::string* plaintext_key) {
  if (plaintext_key != nullptr) {
    
  } else {
    
  }
  plaintext_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintext_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleWrapKeyRequest.plaintext_key)
}
inline std::string* SubtleWrapKeyRequest::unsafe_arena_release_plaintext_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleWrapKeyRequest.plaintext_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return plaintext_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleWrapKeyRequest::unsafe_arena_set_allocated_plaintext_key(
    std::string* plaintext_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (plaintext_key != nullptr) {
    
  } else {
    
  }
  plaintext_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      plaintext_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleWrapKeyRequest.plaintext_key)
}

// string algorithm = 3;
inline void SubtleWrapKeyRequest::clear_algorithm() {
  algorithm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleWrapKeyRequest::algorithm() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleWrapKeyRequest.algorithm)
  return _internal_algorithm();
}
inline void SubtleWrapKeyRequest::set_algorithm(const std::string& value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleWrapKeyRequest.algorithm)
}
inline std::string* SubtleWrapKeyRequest::mutable_algorithm() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleWrapKeyRequest.algorithm)
  return _internal_mutable_algorithm();
}
inline const std::string& SubtleWrapKeyRequest::_internal_algorithm() const {
  return algorithm_.Get();
}
inline void SubtleWrapKeyRequest::_internal_set_algorithm(const std::string& value) {
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleWrapKeyRequest::set_algorithm(std::string&& value) {
  
  algorithm_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleWrapKeyRequest.algorithm)
}
inline void SubtleWrapKeyRequest::set_algorithm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleWrapKeyRequest.algorithm)
}
inline void SubtleWrapKeyRequest::set_algorithm(const char* value,
    size_t size) {
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleWrapKeyRequest.algorithm)
}
inline std::string* SubtleWrapKeyRequest::_internal_mutable_algorithm() {
  
  return algorithm_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleWrapKeyRequest::release_algorithm() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleWrapKeyRequest.algorithm)
  return algorithm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleWrapKeyRequest::set_allocated_algorithm(std::string* algorithm) {
  if (algorithm != nullptr) {
    
  } else {
    
  }
  algorithm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algorithm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleWrapKeyRequest.algorithm)
}
inline std::string* SubtleWrapKeyRequest::unsafe_arena_release_algorithm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleWrapKeyRequest.algorithm)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return algorithm_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleWrapKeyRequest::unsafe_arena_set_allocated_algorithm(
    std::string* algorithm) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (algorithm != nullptr) {
    
  } else {
    
  }
  algorithm_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      algorithm, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleWrapKeyRequest.algorithm)
}

// string key_name = 4[json_name = "keyName"];
inline void SubtleWrapKeyRequest::clear_key_name() {
  key_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleWrapKeyRequest::key_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleWrapKeyRequest.key_name)
  return _internal_key_name();
}
inline void SubtleWrapKeyRequest::set_key_name(const std::string& value) {
  _internal_set_key_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleWrapKeyRequest.key_name)
}
inline std::string* SubtleWrapKeyRequest::mutable_key_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleWrapKeyRequest.key_name)
  return _internal_mutable_key_name();
}
inline const std::string& SubtleWrapKeyRequest::_internal_key_name() const {
  return key_name_.Get();
}
inline void SubtleWrapKeyRequest::_internal_set_key_name(const std::string& value) {
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleWrapKeyRequest::set_key_name(std::string&& value) {
  
  key_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleWrapKeyRequest.key_name)
}
inline void SubtleWrapKeyRequest::set_key_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleWrapKeyRequest.key_name)
}
inline void SubtleWrapKeyRequest::set_key_name(const char* value,
    size_t size) {
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleWrapKeyRequest.key_name)
}
inline std::string* SubtleWrapKeyRequest::_internal_mutable_key_name() {
  
  return key_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleWrapKeyRequest::release_key_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleWrapKeyRequest.key_name)
  return key_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleWrapKeyRequest::set_allocated_key_name(std::string* key_name) {
  if (key_name != nullptr) {
    
  } else {
    
  }
  key_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleWrapKeyRequest.key_name)
}
inline std::string* SubtleWrapKeyRequest::unsafe_arena_release_key_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleWrapKeyRequest.key_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleWrapKeyRequest::unsafe_arena_set_allocated_key_name(
    std::string* key_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key_name != nullptr) {
    
  } else {
    
  }
  key_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleWrapKeyRequest.key_name)
}

// bytes nonce = 5;
inline void SubtleWrapKeyRequest::clear_nonce() {
  nonce_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleWrapKeyRequest::nonce() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleWrapKeyRequest.nonce)
  return _internal_nonce();
}
inline void SubtleWrapKeyRequest::set_nonce(const std::string& value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleWrapKeyRequest.nonce)
}
inline std::string* SubtleWrapKeyRequest::mutable_nonce() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleWrapKeyRequest.nonce)
  return _internal_mutable_nonce();
}
inline const std::string& SubtleWrapKeyRequest::_internal_nonce() const {
  return nonce_.Get();
}
inline void SubtleWrapKeyRequest::_internal_set_nonce(const std::string& value) {
  
  nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleWrapKeyRequest::set_nonce(std::string&& value) {
  
  nonce_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleWrapKeyRequest.nonce)
}
inline void SubtleWrapKeyRequest::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleWrapKeyRequest.nonce)
}
inline void SubtleWrapKeyRequest::set_nonce(const void* value,
    size_t size) {
  
  nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleWrapKeyRequest.nonce)
}
inline std::string* SubtleWrapKeyRequest::_internal_mutable_nonce() {
  
  return nonce_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleWrapKeyRequest::release_nonce() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleWrapKeyRequest.nonce)
  return nonce_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleWrapKeyRequest::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleWrapKeyRequest.nonce)
}
inline std::string* SubtleWrapKeyRequest::unsafe_arena_release_nonce() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleWrapKeyRequest.nonce)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return nonce_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleWrapKeyRequest::unsafe_arena_set_allocated_nonce(
    std::string* nonce) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nonce, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleWrapKeyRequest.nonce)
}

// bytes associated_data = 6[json_name = "associatedData"];
inline void SubtleWrapKeyRequest::clear_associated_data() {
  associated_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleWrapKeyRequest::associated_data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleWrapKeyRequest.associated_data)
  return _internal_associated_data();
}
inline void SubtleWrapKeyRequest::set_associated_data(const std::string& value) {
  _internal_set_associated_data(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleWrapKeyRequest.associated_data)
}
inline std::string* SubtleWrapKeyRequest::mutable_associated_data() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleWrapKeyRequest.associated_data)
  return _internal_mutable_associated_data();
}
inline const std::string& SubtleWrapKeyRequest::_internal_associated_data() const {
  return associated_data_.Get();
}
inline void SubtleWrapKeyRequest::_internal_set_associated_data(const std::string& value) {
  
  associated_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleWrapKeyRequest::set_associated_data(std::string&& value) {
  
  associated_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleWrapKeyRequest.associated_data)
}
inline void SubtleWrapKeyRequest::set_associated_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  associated_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleWrapKeyRequest.associated_data)
}
inline void SubtleWrapKeyRequest::set_associated_data(const void* value,
    size_t size) {
  
  associated_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleWrapKeyRequest.associated_data)
}
inline std::string* SubtleWrapKeyRequest::_internal_mutable_associated_data() {
  
  return associated_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleWrapKeyRequest::release_associated_data() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleWrapKeyRequest.associated_data)
  return associated_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleWrapKeyRequest::set_allocated_associated_data(std::string* associated_data) {
  if (associated_data != nullptr) {
    
  } else {
    
  }
  associated_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), associated_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleWrapKeyRequest.associated_data)
}
inline std::string* SubtleWrapKeyRequest::unsafe_arena_release_associated_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleWrapKeyRequest.associated_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return associated_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleWrapKeyRequest::unsafe_arena_set_allocated_associated_data(
    std::string* associated_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (associated_data != nullptr) {
    
  } else {
    
  }
  associated_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      associated_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleWrapKeyRequest.associated_data)
}

// -------------------------------------------------------------------

// SubtleWrapKeyResponse

// bytes wrapped_key = 1[json_name = "wrappedKey"];
inline void SubtleWrapKeyResponse::clear_wrapped_key() {
  wrapped_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleWrapKeyResponse::wrapped_key() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleWrapKeyResponse.wrapped_key)
  return _internal_wrapped_key();
}
inline void SubtleWrapKeyResponse::set_wrapped_key(const std::string& value) {
  _internal_set_wrapped_key(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleWrapKeyResponse.wrapped_key)
}
inline std::string* SubtleWrapKeyResponse::mutable_wrapped_key() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleWrapKeyResponse.wrapped_key)
  return _internal_mutable_wrapped_key();
}
inline const std::string& SubtleWrapKeyResponse::_internal_wrapped_key() const {
  return wrapped_key_.Get();
}
inline void SubtleWrapKeyResponse::_internal_set_wrapped_key(const std::string& value) {
  
  wrapped_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleWrapKeyResponse::set_wrapped_key(std::string&& value) {
  
  wrapped_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleWrapKeyResponse.wrapped_key)
}
inline void SubtleWrapKeyResponse::set_wrapped_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wrapped_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleWrapKeyResponse.wrapped_key)
}
inline void SubtleWrapKeyResponse::set_wrapped_key(const void* value,
    size_t size) {
  
  wrapped_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleWrapKeyResponse.wrapped_key)
}
inline std::string* SubtleWrapKeyResponse::_internal_mutable_wrapped_key() {
  
  return wrapped_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleWrapKeyResponse::release_wrapped_key() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleWrapKeyResponse.wrapped_key)
  return wrapped_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleWrapKeyResponse::set_allocated_wrapped_key(std::string* wrapped_key) {
  if (wrapped_key != nullptr) {
    
  } else {
    
  }
  wrapped_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wrapped_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleWrapKeyResponse.wrapped_key)
}
inline std::string* SubtleWrapKeyResponse::unsafe_arena_release_wrapped_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleWrapKeyResponse.wrapped_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return wrapped_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleWrapKeyResponse::unsafe_arena_set_allocated_wrapped_key(
    std::string* wrapped_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (wrapped_key != nullptr) {
    
  } else {
    
  }
  wrapped_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      wrapped_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleWrapKeyResponse.wrapped_key)
}

// bytes tag = 2;
inline void SubtleWrapKeyResponse::clear_tag() {
  tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleWrapKeyResponse::tag() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleWrapKeyResponse.tag)
  return _internal_tag();
}
inline void SubtleWrapKeyResponse::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleWrapKeyResponse.tag)
}
inline std::string* SubtleWrapKeyResponse::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleWrapKeyResponse.tag)
  return _internal_mutable_tag();
}
inline const std::string& SubtleWrapKeyResponse::_internal_tag() const {
  return tag_.Get();
}
inline void SubtleWrapKeyResponse::_internal_set_tag(const std::string& value) {
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleWrapKeyResponse::set_tag(std::string&& value) {
  
  tag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleWrapKeyResponse.tag)
}
inline void SubtleWrapKeyResponse::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleWrapKeyResponse.tag)
}
inline void SubtleWrapKeyResponse::set_tag(const void* value,
    size_t size) {
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleWrapKeyResponse.tag)
}
inline std::string* SubtleWrapKeyResponse::_internal_mutable_tag() {
  
  return tag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleWrapKeyResponse::release_tag() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleWrapKeyResponse.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleWrapKeyResponse::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleWrapKeyResponse.tag)
}
inline std::string* SubtleWrapKeyResponse::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleWrapKeyResponse.tag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleWrapKeyResponse::unsafe_arena_set_allocated_tag(
    std::string* tag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleWrapKeyResponse.tag)
}

// -------------------------------------------------------------------

// SubtleUnwrapKeyRequest

// string component_name = 1[json_name = "componentName"];
inline void SubtleUnwrapKeyRequest::clear_component_name() {
  component_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleUnwrapKeyRequest::component_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.component_name)
  return _internal_component_name();
}
inline void SubtleUnwrapKeyRequest::set_component_name(const std::string& value) {
  _internal_set_component_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.component_name)
}
inline std::string* SubtleUnwrapKeyRequest::mutable_component_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.component_name)
  return _internal_mutable_component_name();
}
inline const std::string& SubtleUnwrapKeyRequest::_internal_component_name() const {
  return component_name_.Get();
}
inline void SubtleUnwrapKeyRequest::_internal_set_component_name(const std::string& value) {
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleUnwrapKeyRequest::set_component_name(std::string&& value) {
  
  component_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.component_name)
}
inline void SubtleUnwrapKeyRequest::set_component_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.component_name)
}
inline void SubtleUnwrapKeyRequest::set_component_name(const char* value,
    size_t size) {
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.component_name)
}
inline std::string* SubtleUnwrapKeyRequest::_internal_mutable_component_name() {
  
  return component_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleUnwrapKeyRequest::release_component_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.component_name)
  return component_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleUnwrapKeyRequest::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    
  } else {
    
  }
  component_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.component_name)
}
inline std::string* SubtleUnwrapKeyRequest::unsafe_arena_release_component_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.component_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return component_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleUnwrapKeyRequest::unsafe_arena_set_allocated_component_name(
    std::string* component_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (component_name != nullptr) {
    
  } else {
    
  }
  component_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      component_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.component_name)
}

// bytes wrapped_key = 2[json_name = "wrappedKey"];
inline void SubtleUnwrapKeyRequest::clear_wrapped_key() {
  wrapped_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleUnwrapKeyRequest::wrapped_key() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.wrapped_key)
  return _internal_wrapped_key();
}
inline void SubtleUnwrapKeyRequest::set_wrapped_key(const std::string& value) {
  _internal_set_wrapped_key(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.wrapped_key)
}
inline std::string* SubtleUnwrapKeyRequest::mutable_wrapped_key() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.wrapped_key)
  return _internal_mutable_wrapped_key();
}
inline const std::string& SubtleUnwrapKeyRequest::_internal_wrapped_key() const {
  return wrapped_key_.Get();
}
inline void SubtleUnwrapKeyRequest::_internal_set_wrapped_key(const std::string& value) {
  
  wrapped_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleUnwrapKeyRequest::set_wrapped_key(std::string&& value) {
  
  wrapped_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.wrapped_key)
}
inline void SubtleUnwrapKeyRequest::set_wrapped_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wrapped_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.wrapped_key)
}
inline void SubtleUnwrapKeyRequest::set_wrapped_key(const void* value,
    size_t size) {
  
  wrapped_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.wrapped_key)
}
inline std::string* SubtleUnwrapKeyRequest::_internal_mutable_wrapped_key() {
  
  return wrapped_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleUnwrapKeyRequest::release_wrapped_key() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.wrapped_key)
  return wrapped_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleUnwrapKeyRequest::set_allocated_wrapped_key(std::string* wrapped_key) {
  if (wrapped_key != nullptr) {
    
  } else {
    
  }
  wrapped_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wrapped_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.wrapped_key)
}
inline std::string* SubtleUnwrapKeyRequest::unsafe_arena_release_wrapped_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.wrapped_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return wrapped_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleUnwrapKeyRequest::unsafe_arena_set_allocated_wrapped_key(
    std::string* wrapped_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (wrapped_key != nullptr) {
    
  } else {
    
  }
  wrapped_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      wrapped_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.wrapped_key)
}

// string algorithm = 3;
inline void SubtleUnwrapKeyRequest::clear_algorithm() {
  algorithm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleUnwrapKeyRequest::algorithm() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.algorithm)
  return _internal_algorithm();
}
inline void SubtleUnwrapKeyRequest::set_algorithm(const std::string& value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.algorithm)
}
inline std::string* SubtleUnwrapKeyRequest::mutable_algorithm() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.algorithm)
  return _internal_mutable_algorithm();
}
inline const std::string& SubtleUnwrapKeyRequest::_internal_algorithm() const {
  return algorithm_.Get();
}
inline void SubtleUnwrapKeyRequest::_internal_set_algorithm(const std::string& value) {
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleUnwrapKeyRequest::set_algorithm(std::string&& value) {
  
  algorithm_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.algorithm)
}
inline void SubtleUnwrapKeyRequest::set_algorithm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.algorithm)
}
inline void SubtleUnwrapKeyRequest::set_algorithm(const char* value,
    size_t size) {
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.algorithm)
}
inline std::string* SubtleUnwrapKeyRequest::_internal_mutable_algorithm() {
  
  return algorithm_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleUnwrapKeyRequest::release_algorithm() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.algorithm)
  return algorithm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleUnwrapKeyRequest::set_allocated_algorithm(std::string* algorithm) {
  if (algorithm != nullptr) {
    
  } else {
    
  }
  algorithm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algorithm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.algorithm)
}
inline std::string* SubtleUnwrapKeyRequest::unsafe_arena_release_algorithm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.algorithm)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return algorithm_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleUnwrapKeyRequest::unsafe_arena_set_allocated_algorithm(
    std::string* algorithm) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (algorithm != nullptr) {
    
  } else {
    
  }
  algorithm_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      algorithm, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.algorithm)
}

// string key_name = 4[json_name = "keyName"];
inline void SubtleUnwrapKeyRequest::clear_key_name() {
  key_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleUnwrapKeyRequest::key_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.key_name)
  return _internal_key_name();
}
inline void SubtleUnwrapKeyRequest::set_key_name(const std::string& value) {
  _internal_set_key_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.key_name)
}
inline std::string* SubtleUnwrapKeyRequest::mutable_key_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.key_name)
  return _internal_mutable_key_name();
}
inline const std::string& SubtleUnwrapKeyRequest::_internal_key_name() const {
  return key_name_.Get();
}
inline void SubtleUnwrapKeyRequest::_internal_set_key_name(const std::string& value) {
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleUnwrapKeyRequest::set_key_name(std::string&& value) {
  
  key_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.key_name)
}
inline void SubtleUnwrapKeyRequest::set_key_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.key_name)
}
inline void SubtleUnwrapKeyRequest::set_key_name(const char* value,
    size_t size) {
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.key_name)
}
inline std::string* SubtleUnwrapKeyRequest::_internal_mutable_key_name() {
  
  return key_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleUnwrapKeyRequest::release_key_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.key_name)
  return key_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleUnwrapKeyRequest::set_allocated_key_name(std::string* key_name) {
  if (key_name != nullptr) {
    
  } else {
    
  }
  key_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.key_name)
}
inline std::string* SubtleUnwrapKeyRequest::unsafe_arena_release_key_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.key_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleUnwrapKeyRequest::unsafe_arena_set_allocated_key_name(
    std::string* key_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key_name != nullptr) {
    
  } else {
    
  }
  key_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.key_name)
}

// bytes nonce = 5;
inline void SubtleUnwrapKeyRequest::clear_nonce() {
  nonce_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleUnwrapKeyRequest::nonce() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.nonce)
  return _internal_nonce();
}
inline void SubtleUnwrapKeyRequest::set_nonce(const std::string& value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.nonce)
}
inline std::string* SubtleUnwrapKeyRequest::mutable_nonce() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.nonce)
  return _internal_mutable_nonce();
}
inline const std::string& SubtleUnwrapKeyRequest::_internal_nonce() const {
  return nonce_.Get();
}
inline void SubtleUnwrapKeyRequest::_internal_set_nonce(const std::string& value) {
  
  nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleUnwrapKeyRequest::set_nonce(std::string&& value) {
  
  nonce_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.nonce)
}
inline void SubtleUnwrapKeyRequest::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.nonce)
}
inline void SubtleUnwrapKeyRequest::set_nonce(const void* value,
    size_t size) {
  
  nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.nonce)
}
inline std::string* SubtleUnwrapKeyRequest::_internal_mutable_nonce() {
  
  return nonce_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleUnwrapKeyRequest::release_nonce() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.nonce)
  return nonce_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleUnwrapKeyRequest::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.nonce)
}
inline std::string* SubtleUnwrapKeyRequest::unsafe_arena_release_nonce() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.nonce)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return nonce_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleUnwrapKeyRequest::unsafe_arena_set_allocated_nonce(
    std::string* nonce) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nonce, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.nonce)
}

// bytes tag = 6;
inline void SubtleUnwrapKeyRequest::clear_tag() {
  tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleUnwrapKeyRequest::tag() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.tag)
  return _internal_tag();
}
inline void SubtleUnwrapKeyRequest::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.tag)
}
inline std::string* SubtleUnwrapKeyRequest::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.tag)
  return _internal_mutable_tag();
}
inline const std::string& SubtleUnwrapKeyRequest::_internal_tag() const {
  return tag_.Get();
}
inline void SubtleUnwrapKeyRequest::_internal_set_tag(const std::string& value) {
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleUnwrapKeyRequest::set_tag(std::string&& value) {
  
  tag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.tag)
}
inline void SubtleUnwrapKeyRequest::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.tag)
}
inline void SubtleUnwrapKeyRequest::set_tag(const void* value,
    size_t size) {
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.tag)
}
inline std::string* SubtleUnwrapKeyRequest::_internal_mutable_tag() {
  
  return tag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleUnwrapKeyRequest::release_tag() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleUnwrapKeyRequest::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.tag)
}
inline std::string* SubtleUnwrapKeyRequest::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.tag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleUnwrapKeyRequest::unsafe_arena_set_allocated_tag(
    std::string* tag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.tag)
}

// bytes associated_data = 7[json_name = "associatedData"];
inline void SubtleUnwrapKeyRequest::clear_associated_data() {
  associated_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleUnwrapKeyRequest::associated_data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.associated_data)
  return _internal_associated_data();
}
inline void SubtleUnwrapKeyRequest::set_associated_data(const std::string& value) {
  _internal_set_associated_data(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.associated_data)
}
inline std::string* SubtleUnwrapKeyRequest::mutable_associated_data() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.associated_data)
  return _internal_mutable_associated_data();
}
inline const std::string& SubtleUnwrapKeyRequest::_internal_associated_data() const {
  return associated_data_.Get();
}
inline void SubtleUnwrapKeyRequest::_internal_set_associated_data(const std::string& value) {
  
  associated_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleUnwrapKeyRequest::set_associated_data(std::string&& value) {
  
  associated_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.associated_data)
}
inline void SubtleUnwrapKeyRequest::set_associated_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  associated_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.associated_data)
}
inline void SubtleUnwrapKeyRequest::set_associated_data(const void* value,
    size_t size) {
  
  associated_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.associated_data)
}
inline std::string* SubtleUnwrapKeyRequest::_internal_mutable_associated_data() {
  
  return associated_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleUnwrapKeyRequest::release_associated_data() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.associated_data)
  return associated_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleUnwrapKeyRequest::set_allocated_associated_data(std::string* associated_data) {
  if (associated_data != nullptr) {
    
  } else {
    
  }
  associated_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), associated_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.associated_data)
}
inline std::string* SubtleUnwrapKeyRequest::unsafe_arena_release_associated_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.associated_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return associated_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleUnwrapKeyRequest::unsafe_arena_set_allocated_associated_data(
    std::string* associated_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (associated_data != nullptr) {
    
  } else {
    
  }
  associated_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      associated_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleUnwrapKeyRequest.associated_data)
}

// -------------------------------------------------------------------

// SubtleUnwrapKeyResponse

// bytes plaintext_key = 1[json_name = "plaintextKey"];
inline void SubtleUnwrapKeyResponse::clear_plaintext_key() {
  plaintext_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleUnwrapKeyResponse::plaintext_key() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleUnwrapKeyResponse.plaintext_key)
  return _internal_plaintext_key();
}
inline void SubtleUnwrapKeyResponse::set_plaintext_key(const std::string& value) {
  _internal_set_plaintext_key(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleUnwrapKeyResponse.plaintext_key)
}
inline std::string* SubtleUnwrapKeyResponse::mutable_plaintext_key() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleUnwrapKeyResponse.plaintext_key)
  return _internal_mutable_plaintext_key();
}
inline const std::string& SubtleUnwrapKeyResponse::_internal_plaintext_key() const {
  return plaintext_key_.Get();
}
inline void SubtleUnwrapKeyResponse::_internal_set_plaintext_key(const std::string& value) {
  
  plaintext_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleUnwrapKeyResponse::set_plaintext_key(std::string&& value) {
  
  plaintext_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleUnwrapKeyResponse.plaintext_key)
}
inline void SubtleUnwrapKeyResponse::set_plaintext_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  plaintext_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleUnwrapKeyResponse.plaintext_key)
}
inline void SubtleUnwrapKeyResponse::set_plaintext_key(const void* value,
    size_t size) {
  
  plaintext_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleUnwrapKeyResponse.plaintext_key)
}
inline std::string* SubtleUnwrapKeyResponse::_internal_mutable_plaintext_key() {
  
  return plaintext_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleUnwrapKeyResponse::release_plaintext_key() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleUnwrapKeyResponse.plaintext_key)
  return plaintext_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleUnwrapKeyResponse::set_allocated_plaintext_key(std::string* plaintext_key) {
  if (plaintext_key != nullptr) {
    
  } else {
    
  }
  plaintext_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintext_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleUnwrapKeyResponse.plaintext_key)
}
inline std::string* SubtleUnwrapKeyResponse::unsafe_arena_release_plaintext_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleUnwrapKeyResponse.plaintext_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return plaintext_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleUnwrapKeyResponse::unsafe_arena_set_allocated_plaintext_key(
    std::string* plaintext_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (plaintext_key != nullptr) {
    
  } else {
    
  }
  plaintext_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      plaintext_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleUnwrapKeyResponse.plaintext_key)
}

// -------------------------------------------------------------------

// SubtleSignRequest

// string component_name = 1[json_name = "componentName"];
inline void SubtleSignRequest::clear_component_name() {
  component_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleSignRequest::component_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleSignRequest.component_name)
  return _internal_component_name();
}
inline void SubtleSignRequest::set_component_name(const std::string& value) {
  _internal_set_component_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleSignRequest.component_name)
}
inline std::string* SubtleSignRequest::mutable_component_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleSignRequest.component_name)
  return _internal_mutable_component_name();
}
inline const std::string& SubtleSignRequest::_internal_component_name() const {
  return component_name_.Get();
}
inline void SubtleSignRequest::_internal_set_component_name(const std::string& value) {
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleSignRequest::set_component_name(std::string&& value) {
  
  component_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleSignRequest.component_name)
}
inline void SubtleSignRequest::set_component_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleSignRequest.component_name)
}
inline void SubtleSignRequest::set_component_name(const char* value,
    size_t size) {
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleSignRequest.component_name)
}
inline std::string* SubtleSignRequest::_internal_mutable_component_name() {
  
  return component_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleSignRequest::release_component_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleSignRequest.component_name)
  return component_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleSignRequest::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    
  } else {
    
  }
  component_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleSignRequest.component_name)
}
inline std::string* SubtleSignRequest::unsafe_arena_release_component_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleSignRequest.component_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return component_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleSignRequest::unsafe_arena_set_allocated_component_name(
    std::string* component_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (component_name != nullptr) {
    
  } else {
    
  }
  component_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      component_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleSignRequest.component_name)
}

// bytes digest = 2;
inline void SubtleSignRequest::clear_digest() {
  digest_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleSignRequest::digest() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleSignRequest.digest)
  return _internal_digest();
}
inline void SubtleSignRequest::set_digest(const std::string& value) {
  _internal_set_digest(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleSignRequest.digest)
}
inline std::string* SubtleSignRequest::mutable_digest() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleSignRequest.digest)
  return _internal_mutable_digest();
}
inline const std::string& SubtleSignRequest::_internal_digest() const {
  return digest_.Get();
}
inline void SubtleSignRequest::_internal_set_digest(const std::string& value) {
  
  digest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleSignRequest::set_digest(std::string&& value) {
  
  digest_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleSignRequest.digest)
}
inline void SubtleSignRequest::set_digest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  digest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleSignRequest.digest)
}
inline void SubtleSignRequest::set_digest(const void* value,
    size_t size) {
  
  digest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleSignRequest.digest)
}
inline std::string* SubtleSignRequest::_internal_mutable_digest() {
  
  return digest_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleSignRequest::release_digest() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleSignRequest.digest)
  return digest_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleSignRequest::set_allocated_digest(std::string* digest) {
  if (digest != nullptr) {
    
  } else {
    
  }
  digest_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), digest,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleSignRequest.digest)
}
inline std::string* SubtleSignRequest::unsafe_arena_release_digest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleSignRequest.digest)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return digest_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleSignRequest::unsafe_arena_set_allocated_digest(
    std::string* digest) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (digest != nullptr) {
    
  } else {
    
  }
  digest_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      digest, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleSignRequest.digest)
}

// string algorithm = 3;
inline void SubtleSignRequest::clear_algorithm() {
  algorithm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleSignRequest::algorithm() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleSignRequest.algorithm)
  return _internal_algorithm();
}
inline void SubtleSignRequest::set_algorithm(const std::string& value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleSignRequest.algorithm)
}
inline std::string* SubtleSignRequest::mutable_algorithm() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleSignRequest.algorithm)
  return _internal_mutable_algorithm();
}
inline const std::string& SubtleSignRequest::_internal_algorithm() const {
  return algorithm_.Get();
}
inline void SubtleSignRequest::_internal_set_algorithm(const std::string& value) {
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleSignRequest::set_algorithm(std::string&& value) {
  
  algorithm_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleSignRequest.algorithm)
}
inline void SubtleSignRequest::set_algorithm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleSignRequest.algorithm)
}
inline void SubtleSignRequest::set_algorithm(const char* value,
    size_t size) {
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleSignRequest.algorithm)
}
inline std::string* SubtleSignRequest::_internal_mutable_algorithm() {
  
  return algorithm_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleSignRequest::release_algorithm() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleSignRequest.algorithm)
  return algorithm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleSignRequest::set_allocated_algorithm(std::string* algorithm) {
  if (algorithm != nullptr) {
    
  } else {
    
  }
  algorithm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algorithm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleSignRequest.algorithm)
}
inline std::string* SubtleSignRequest::unsafe_arena_release_algorithm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleSignRequest.algorithm)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return algorithm_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleSignRequest::unsafe_arena_set_allocated_algorithm(
    std::string* algorithm) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (algorithm != nullptr) {
    
  } else {
    
  }
  algorithm_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      algorithm, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleSignRequest.algorithm)
}

// string key_name = 4[json_name = "keyName"];
inline void SubtleSignRequest::clear_key_name() {
  key_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleSignRequest::key_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleSignRequest.key_name)
  return _internal_key_name();
}
inline void SubtleSignRequest::set_key_name(const std::string& value) {
  _internal_set_key_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleSignRequest.key_name)
}
inline std::string* SubtleSignRequest::mutable_key_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleSignRequest.key_name)
  return _internal_mutable_key_name();
}
inline const std::string& SubtleSignRequest::_internal_key_name() const {
  return key_name_.Get();
}
inline void SubtleSignRequest::_internal_set_key_name(const std::string& value) {
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleSignRequest::set_key_name(std::string&& value) {
  
  key_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleSignRequest.key_name)
}
inline void SubtleSignRequest::set_key_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleSignRequest.key_name)
}
inline void SubtleSignRequest::set_key_name(const char* value,
    size_t size) {
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleSignRequest.key_name)
}
inline std::string* SubtleSignRequest::_internal_mutable_key_name() {
  
  return key_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleSignRequest::release_key_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleSignRequest.key_name)
  return key_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleSignRequest::set_allocated_key_name(std::string* key_name) {
  if (key_name != nullptr) {
    
  } else {
    
  }
  key_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleSignRequest.key_name)
}
inline std::string* SubtleSignRequest::unsafe_arena_release_key_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleSignRequest.key_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleSignRequest::unsafe_arena_set_allocated_key_name(
    std::string* key_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key_name != nullptr) {
    
  } else {
    
  }
  key_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleSignRequest.key_name)
}

// -------------------------------------------------------------------

// SubtleSignResponse

// bytes signature = 1;
inline void SubtleSignResponse::clear_signature() {
  signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleSignResponse::signature() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleSignResponse.signature)
  return _internal_signature();
}
inline void SubtleSignResponse::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleSignResponse.signature)
}
inline std::string* SubtleSignResponse::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleSignResponse.signature)
  return _internal_mutable_signature();
}
inline const std::string& SubtleSignResponse::_internal_signature() const {
  return signature_.Get();
}
inline void SubtleSignResponse::_internal_set_signature(const std::string& value) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleSignResponse::set_signature(std::string&& value) {
  
  signature_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleSignResponse.signature)
}
inline void SubtleSignResponse::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleSignResponse.signature)
}
inline void SubtleSignResponse::set_signature(const void* value,
    size_t size) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleSignResponse.signature)
}
inline std::string* SubtleSignResponse::_internal_mutable_signature() {
  
  return signature_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleSignResponse::release_signature() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleSignResponse.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleSignResponse::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleSignResponse.signature)
}
inline std::string* SubtleSignResponse::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleSignResponse.signature)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return signature_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleSignResponse::unsafe_arena_set_allocated_signature(
    std::string* signature) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      signature, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleSignResponse.signature)
}

// -------------------------------------------------------------------

// SubtleVerifyRequest

// string component_name = 1[json_name = "componentName"];
inline void SubtleVerifyRequest::clear_component_name() {
  component_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleVerifyRequest::component_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleVerifyRequest.component_name)
  return _internal_component_name();
}
inline void SubtleVerifyRequest::set_component_name(const std::string& value) {
  _internal_set_component_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleVerifyRequest.component_name)
}
inline std::string* SubtleVerifyRequest::mutable_component_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleVerifyRequest.component_name)
  return _internal_mutable_component_name();
}
inline const std::string& SubtleVerifyRequest::_internal_component_name() const {
  return component_name_.Get();
}
inline void SubtleVerifyRequest::_internal_set_component_name(const std::string& value) {
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleVerifyRequest::set_component_name(std::string&& value) {
  
  component_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleVerifyRequest.component_name)
}
inline void SubtleVerifyRequest::set_component_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleVerifyRequest.component_name)
}
inline void SubtleVerifyRequest::set_component_name(const char* value,
    size_t size) {
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleVerifyRequest.component_name)
}
inline std::string* SubtleVerifyRequest::_internal_mutable_component_name() {
  
  return component_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleVerifyRequest::release_component_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleVerifyRequest.component_name)
  return component_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleVerifyRequest::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    
  } else {
    
  }
  component_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleVerifyRequest.component_name)
}
inline std::string* SubtleVerifyRequest::unsafe_arena_release_component_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleVerifyRequest.component_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return component_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleVerifyRequest::unsafe_arena_set_allocated_component_name(
    std::string* component_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (component_name != nullptr) {
    
  } else {
    
  }
  component_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      component_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleVerifyRequest.component_name)
}

// bytes digest = 2;
inline void SubtleVerifyRequest::clear_digest() {
  digest_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleVerifyRequest::digest() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleVerifyRequest.digest)
  return _internal_digest();
}
inline void SubtleVerifyRequest::set_digest(const std::string& value) {
  _internal_set_digest(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleVerifyRequest.digest)
}
inline std::string* SubtleVerifyRequest::mutable_digest() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleVerifyRequest.digest)
  return _internal_mutable_digest();
}
inline const std::string& SubtleVerifyRequest::_internal_digest() const {
  return digest_.Get();
}
inline void SubtleVerifyRequest::_internal_set_digest(const std::string& value) {
  
  digest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleVerifyRequest::set_digest(std::string&& value) {
  
  digest_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleVerifyRequest.digest)
}
inline void SubtleVerifyRequest::set_digest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  digest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleVerifyRequest.digest)
}
inline void SubtleVerifyRequest::set_digest(const void* value,
    size_t size) {
  
  digest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleVerifyRequest.digest)
}
inline std::string* SubtleVerifyRequest::_internal_mutable_digest() {
  
  return digest_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleVerifyRequest::release_digest() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleVerifyRequest.digest)
  return digest_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleVerifyRequest::set_allocated_digest(std::string* digest) {
  if (digest != nullptr) {
    
  } else {
    
  }
  digest_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), digest,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleVerifyRequest.digest)
}
inline std::string* SubtleVerifyRequest::unsafe_arena_release_digest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleVerifyRequest.digest)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return digest_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleVerifyRequest::unsafe_arena_set_allocated_digest(
    std::string* digest) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (digest != nullptr) {
    
  } else {
    
  }
  digest_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      digest, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleVerifyRequest.digest)
}

// string algorithm = 3;
inline void SubtleVerifyRequest::clear_algorithm() {
  algorithm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleVerifyRequest::algorithm() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleVerifyRequest.algorithm)
  return _internal_algorithm();
}
inline void SubtleVerifyRequest::set_algorithm(const std::string& value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleVerifyRequest.algorithm)
}
inline std::string* SubtleVerifyRequest::mutable_algorithm() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleVerifyRequest.algorithm)
  return _internal_mutable_algorithm();
}
inline const std::string& SubtleVerifyRequest::_internal_algorithm() const {
  return algorithm_.Get();
}
inline void SubtleVerifyRequest::_internal_set_algorithm(const std::string& value) {
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleVerifyRequest::set_algorithm(std::string&& value) {
  
  algorithm_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleVerifyRequest.algorithm)
}
inline void SubtleVerifyRequest::set_algorithm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleVerifyRequest.algorithm)
}
inline void SubtleVerifyRequest::set_algorithm(const char* value,
    size_t size) {
  
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleVerifyRequest.algorithm)
}
inline std::string* SubtleVerifyRequest::_internal_mutable_algorithm() {
  
  return algorithm_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleVerifyRequest::release_algorithm() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleVerifyRequest.algorithm)
  return algorithm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleVerifyRequest::set_allocated_algorithm(std::string* algorithm) {
  if (algorithm != nullptr) {
    
  } else {
    
  }
  algorithm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algorithm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleVerifyRequest.algorithm)
}
inline std::string* SubtleVerifyRequest::unsafe_arena_release_algorithm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleVerifyRequest.algorithm)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return algorithm_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleVerifyRequest::unsafe_arena_set_allocated_algorithm(
    std::string* algorithm) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (algorithm != nullptr) {
    
  } else {
    
  }
  algorithm_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      algorithm, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleVerifyRequest.algorithm)
}

// string key_name = 4[json_name = "keyName"];
inline void SubtleVerifyRequest::clear_key_name() {
  key_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleVerifyRequest::key_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleVerifyRequest.key_name)
  return _internal_key_name();
}
inline void SubtleVerifyRequest::set_key_name(const std::string& value) {
  _internal_set_key_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleVerifyRequest.key_name)
}
inline std::string* SubtleVerifyRequest::mutable_key_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleVerifyRequest.key_name)
  return _internal_mutable_key_name();
}
inline const std::string& SubtleVerifyRequest::_internal_key_name() const {
  return key_name_.Get();
}
inline void SubtleVerifyRequest::_internal_set_key_name(const std::string& value) {
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleVerifyRequest::set_key_name(std::string&& value) {
  
  key_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleVerifyRequest.key_name)
}
inline void SubtleVerifyRequest::set_key_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleVerifyRequest.key_name)
}
inline void SubtleVerifyRequest::set_key_name(const char* value,
    size_t size) {
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleVerifyRequest.key_name)
}
inline std::string* SubtleVerifyRequest::_internal_mutable_key_name() {
  
  return key_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleVerifyRequest::release_key_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleVerifyRequest.key_name)
  return key_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleVerifyRequest::set_allocated_key_name(std::string* key_name) {
  if (key_name != nullptr) {
    
  } else {
    
  }
  key_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleVerifyRequest.key_name)
}
inline std::string* SubtleVerifyRequest::unsafe_arena_release_key_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleVerifyRequest.key_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleVerifyRequest::unsafe_arena_set_allocated_key_name(
    std::string* key_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key_name != nullptr) {
    
  } else {
    
  }
  key_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleVerifyRequest.key_name)
}

// bytes signature = 5;
inline void SubtleVerifyRequest::clear_signature() {
  signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubtleVerifyRequest::signature() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleVerifyRequest.signature)
  return _internal_signature();
}
inline void SubtleVerifyRequest::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleVerifyRequest.signature)
}
inline std::string* SubtleVerifyRequest::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.SubtleVerifyRequest.signature)
  return _internal_mutable_signature();
}
inline const std::string& SubtleVerifyRequest::_internal_signature() const {
  return signature_.Get();
}
inline void SubtleVerifyRequest::_internal_set_signature(const std::string& value) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubtleVerifyRequest::set_signature(std::string&& value) {
  
  signature_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.SubtleVerifyRequest.signature)
}
inline void SubtleVerifyRequest::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.SubtleVerifyRequest.signature)
}
inline void SubtleVerifyRequest::set_signature(const void* value,
    size_t size) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.SubtleVerifyRequest.signature)
}
inline std::string* SubtleVerifyRequest::_internal_mutable_signature() {
  
  return signature_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubtleVerifyRequest::release_signature() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.SubtleVerifyRequest.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubtleVerifyRequest::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.SubtleVerifyRequest.signature)
}
inline std::string* SubtleVerifyRequest::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.SubtleVerifyRequest.signature)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return signature_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SubtleVerifyRequest::unsafe_arena_set_allocated_signature(
    std::string* signature) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      signature, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.SubtleVerifyRequest.signature)
}

// -------------------------------------------------------------------

// SubtleVerifyResponse

// bool valid = 1;
inline void SubtleVerifyResponse::clear_valid() {
  valid_ = false;
}
inline bool SubtleVerifyResponse::_internal_valid() const {
  return valid_;
}
inline bool SubtleVerifyResponse::valid() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.SubtleVerifyResponse.valid)
  return _internal_valid();
}
inline void SubtleVerifyResponse::_internal_set_valid(bool value) {
  
  valid_ = value;
}
inline void SubtleVerifyResponse::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.SubtleVerifyResponse.valid)
}

// -------------------------------------------------------------------

// EncryptRequest

// .dapr.proto.runtime.v1.EncryptRequestOptions options = 1;
inline bool EncryptRequest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool EncryptRequest::has_options() const {
  return _internal_has_options();
}
inline void EncryptRequest::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::dapr::proto::runtime::v1::EncryptRequestOptions& EncryptRequest::_internal_options() const {
  const ::dapr::proto::runtime::v1::EncryptRequestOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dapr::proto::runtime::v1::EncryptRequestOptions*>(
      &::dapr::proto::runtime::v1::_EncryptRequestOptions_default_instance_);
}
inline const ::dapr::proto::runtime::v1::EncryptRequestOptions& EncryptRequest::options() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.EncryptRequest.options)
  return _internal_options();
}
inline void EncryptRequest::unsafe_arena_set_allocated_options(
    ::dapr::proto::runtime::v1::EncryptRequestOptions* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.EncryptRequest.options)
}
inline ::dapr::proto::runtime::v1::EncryptRequestOptions* EncryptRequest::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dapr::proto::runtime::v1::EncryptRequestOptions* EncryptRequest::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.EncryptRequest.options)
  
  ::dapr::proto::runtime::v1::EncryptRequestOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::dapr::proto::runtime::v1::EncryptRequestOptions* EncryptRequest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::runtime::v1::EncryptRequestOptions>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::dapr::proto::runtime::v1::EncryptRequestOptions* EncryptRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.EncryptRequest.options)
  return _internal_mutable_options();
}
inline void EncryptRequest::set_allocated_options(::dapr::proto::runtime::v1::EncryptRequestOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.EncryptRequest.options)
}

// .dapr.proto.common.v1.StreamPayload payload = 2;
inline bool EncryptRequest::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool EncryptRequest::has_payload() const {
  return _internal_has_payload();
}
inline const ::dapr::proto::common::v1::StreamPayload& EncryptRequest::_internal_payload() const {
  const ::dapr::proto::common::v1::StreamPayload* p = payload_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dapr::proto::common::v1::StreamPayload*>(
      &::dapr::proto::common::v1::_StreamPayload_default_instance_);
}
inline const ::dapr::proto::common::v1::StreamPayload& EncryptRequest::payload() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.EncryptRequest.payload)
  return _internal_payload();
}
inline void EncryptRequest::unsafe_arena_set_allocated_payload(
    ::dapr::proto::common::v1::StreamPayload* payload) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.EncryptRequest.payload)
}
inline ::dapr::proto::common::v1::StreamPayload* EncryptRequest::release_payload() {
  auto temp = unsafe_arena_release_payload();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dapr::proto::common::v1::StreamPayload* EncryptRequest::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.EncryptRequest.payload)
  
  ::dapr::proto::common::v1::StreamPayload* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline ::dapr::proto::common::v1::StreamPayload* EncryptRequest::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::common::v1::StreamPayload>(GetArena());
    payload_ = p;
  }
  return payload_;
}
inline ::dapr::proto::common::v1::StreamPayload* EncryptRequest::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.EncryptRequest.payload)
  return _internal_mutable_payload();
}
inline void EncryptRequest::set_allocated_payload(::dapr::proto::common::v1::StreamPayload* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload)->GetArena();
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.EncryptRequest.payload)
}

// -------------------------------------------------------------------

// EncryptRequestOptions

// string component_name = 1[json_name = "componentName"];
inline void EncryptRequestOptions::clear_component_name() {
  component_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EncryptRequestOptions::component_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.EncryptRequestOptions.component_name)
  return _internal_component_name();
}
inline void EncryptRequestOptions::set_component_name(const std::string& value) {
  _internal_set_component_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.EncryptRequestOptions.component_name)
}
inline std::string* EncryptRequestOptions::mutable_component_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.EncryptRequestOptions.component_name)
  return _internal_mutable_component_name();
}
inline const std::string& EncryptRequestOptions::_internal_component_name() const {
  return component_name_.Get();
}
inline void EncryptRequestOptions::_internal_set_component_name(const std::string& value) {
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EncryptRequestOptions::set_component_name(std::string&& value) {
  
  component_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.EncryptRequestOptions.component_name)
}
inline void EncryptRequestOptions::set_component_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.EncryptRequestOptions.component_name)
}
inline void EncryptRequestOptions::set_component_name(const char* value,
    size_t size) {
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.EncryptRequestOptions.component_name)
}
inline std::string* EncryptRequestOptions::_internal_mutable_component_name() {
  
  return component_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EncryptRequestOptions::release_component_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.EncryptRequestOptions.component_name)
  return component_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EncryptRequestOptions::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    
  } else {
    
  }
  component_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.EncryptRequestOptions.component_name)
}
inline std::string* EncryptRequestOptions::unsafe_arena_release_component_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.EncryptRequestOptions.component_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return component_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EncryptRequestOptions::unsafe_arena_set_allocated_component_name(
    std::string* component_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (component_name != nullptr) {
    
  } else {
    
  }
  component_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      component_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.EncryptRequestOptions.component_name)
}

// string key_name = 2[json_name = "keyName"];
inline void EncryptRequestOptions::clear_key_name() {
  key_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EncryptRequestOptions::key_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.EncryptRequestOptions.key_name)
  return _internal_key_name();
}
inline void EncryptRequestOptions::set_key_name(const std::string& value) {
  _internal_set_key_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.EncryptRequestOptions.key_name)
}
inline std::string* EncryptRequestOptions::mutable_key_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.EncryptRequestOptions.key_name)
  return _internal_mutable_key_name();
}
inline const std::string& EncryptRequestOptions::_internal_key_name() const {
  return key_name_.Get();
}
inline void EncryptRequestOptions::_internal_set_key_name(const std::string& value) {
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EncryptRequestOptions::set_key_name(std::string&& value) {
  
  key_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.EncryptRequestOptions.key_name)
}
inline void EncryptRequestOptions::set_key_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.EncryptRequestOptions.key_name)
}
inline void EncryptRequestOptions::set_key_name(const char* value,
    size_t size) {
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.EncryptRequestOptions.key_name)
}
inline std::string* EncryptRequestOptions::_internal_mutable_key_name() {
  
  return key_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EncryptRequestOptions::release_key_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.EncryptRequestOptions.key_name)
  return key_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EncryptRequestOptions::set_allocated_key_name(std::string* key_name) {
  if (key_name != nullptr) {
    
  } else {
    
  }
  key_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.EncryptRequestOptions.key_name)
}
inline std::string* EncryptRequestOptions::unsafe_arena_release_key_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.EncryptRequestOptions.key_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EncryptRequestOptions::unsafe_arena_set_allocated_key_name(
    std::string* key_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key_name != nullptr) {
    
  } else {
    
  }
  key_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.EncryptRequestOptions.key_name)
}

// string key_wrap_algorithm = 3;
inline void EncryptRequestOptions::clear_key_wrap_algorithm() {
  key_wrap_algorithm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EncryptRequestOptions::key_wrap_algorithm() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.EncryptRequestOptions.key_wrap_algorithm)
  return _internal_key_wrap_algorithm();
}
inline void EncryptRequestOptions::set_key_wrap_algorithm(const std::string& value) {
  _internal_set_key_wrap_algorithm(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.EncryptRequestOptions.key_wrap_algorithm)
}
inline std::string* EncryptRequestOptions::mutable_key_wrap_algorithm() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.EncryptRequestOptions.key_wrap_algorithm)
  return _internal_mutable_key_wrap_algorithm();
}
inline const std::string& EncryptRequestOptions::_internal_key_wrap_algorithm() const {
  return key_wrap_algorithm_.Get();
}
inline void EncryptRequestOptions::_internal_set_key_wrap_algorithm(const std::string& value) {
  
  key_wrap_algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EncryptRequestOptions::set_key_wrap_algorithm(std::string&& value) {
  
  key_wrap_algorithm_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.EncryptRequestOptions.key_wrap_algorithm)
}
inline void EncryptRequestOptions::set_key_wrap_algorithm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_wrap_algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.EncryptRequestOptions.key_wrap_algorithm)
}
inline void EncryptRequestOptions::set_key_wrap_algorithm(const char* value,
    size_t size) {
  
  key_wrap_algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.EncryptRequestOptions.key_wrap_algorithm)
}
inline std::string* EncryptRequestOptions::_internal_mutable_key_wrap_algorithm() {
  
  return key_wrap_algorithm_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EncryptRequestOptions::release_key_wrap_algorithm() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.EncryptRequestOptions.key_wrap_algorithm)
  return key_wrap_algorithm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EncryptRequestOptions::set_allocated_key_wrap_algorithm(std::string* key_wrap_algorithm) {
  if (key_wrap_algorithm != nullptr) {
    
  } else {
    
  }
  key_wrap_algorithm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_wrap_algorithm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.EncryptRequestOptions.key_wrap_algorithm)
}
inline std::string* EncryptRequestOptions::unsafe_arena_release_key_wrap_algorithm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.EncryptRequestOptions.key_wrap_algorithm)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_wrap_algorithm_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EncryptRequestOptions::unsafe_arena_set_allocated_key_wrap_algorithm(
    std::string* key_wrap_algorithm) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key_wrap_algorithm != nullptr) {
    
  } else {
    
  }
  key_wrap_algorithm_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key_wrap_algorithm, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.EncryptRequestOptions.key_wrap_algorithm)
}

// string data_encryption_cipher = 10;
inline void EncryptRequestOptions::clear_data_encryption_cipher() {
  data_encryption_cipher_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EncryptRequestOptions::data_encryption_cipher() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.EncryptRequestOptions.data_encryption_cipher)
  return _internal_data_encryption_cipher();
}
inline void EncryptRequestOptions::set_data_encryption_cipher(const std::string& value) {
  _internal_set_data_encryption_cipher(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.EncryptRequestOptions.data_encryption_cipher)
}
inline std::string* EncryptRequestOptions::mutable_data_encryption_cipher() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.EncryptRequestOptions.data_encryption_cipher)
  return _internal_mutable_data_encryption_cipher();
}
inline const std::string& EncryptRequestOptions::_internal_data_encryption_cipher() const {
  return data_encryption_cipher_.Get();
}
inline void EncryptRequestOptions::_internal_set_data_encryption_cipher(const std::string& value) {
  
  data_encryption_cipher_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EncryptRequestOptions::set_data_encryption_cipher(std::string&& value) {
  
  data_encryption_cipher_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.EncryptRequestOptions.data_encryption_cipher)
}
inline void EncryptRequestOptions::set_data_encryption_cipher(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_encryption_cipher_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.EncryptRequestOptions.data_encryption_cipher)
}
inline void EncryptRequestOptions::set_data_encryption_cipher(const char* value,
    size_t size) {
  
  data_encryption_cipher_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.EncryptRequestOptions.data_encryption_cipher)
}
inline std::string* EncryptRequestOptions::_internal_mutable_data_encryption_cipher() {
  
  return data_encryption_cipher_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EncryptRequestOptions::release_data_encryption_cipher() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.EncryptRequestOptions.data_encryption_cipher)
  return data_encryption_cipher_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EncryptRequestOptions::set_allocated_data_encryption_cipher(std::string* data_encryption_cipher) {
  if (data_encryption_cipher != nullptr) {
    
  } else {
    
  }
  data_encryption_cipher_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_encryption_cipher,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.EncryptRequestOptions.data_encryption_cipher)
}
inline std::string* EncryptRequestOptions::unsafe_arena_release_data_encryption_cipher() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.EncryptRequestOptions.data_encryption_cipher)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_encryption_cipher_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EncryptRequestOptions::unsafe_arena_set_allocated_data_encryption_cipher(
    std::string* data_encryption_cipher) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data_encryption_cipher != nullptr) {
    
  } else {
    
  }
  data_encryption_cipher_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data_encryption_cipher, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.EncryptRequestOptions.data_encryption_cipher)
}

// bool omit_decryption_key_name = 11[json_name = "omitDecryptionKeyName"];
inline void EncryptRequestOptions::clear_omit_decryption_key_name() {
  omit_decryption_key_name_ = false;
}
inline bool EncryptRequestOptions::_internal_omit_decryption_key_name() const {
  return omit_decryption_key_name_;
}
inline bool EncryptRequestOptions::omit_decryption_key_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.EncryptRequestOptions.omit_decryption_key_name)
  return _internal_omit_decryption_key_name();
}
inline void EncryptRequestOptions::_internal_set_omit_decryption_key_name(bool value) {
  
  omit_decryption_key_name_ = value;
}
inline void EncryptRequestOptions::set_omit_decryption_key_name(bool value) {
  _internal_set_omit_decryption_key_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.EncryptRequestOptions.omit_decryption_key_name)
}

// string decryption_key_name = 12[json_name = "decryptionKeyName"];
inline void EncryptRequestOptions::clear_decryption_key_name() {
  decryption_key_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EncryptRequestOptions::decryption_key_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.EncryptRequestOptions.decryption_key_name)
  return _internal_decryption_key_name();
}
inline void EncryptRequestOptions::set_decryption_key_name(const std::string& value) {
  _internal_set_decryption_key_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.EncryptRequestOptions.decryption_key_name)
}
inline std::string* EncryptRequestOptions::mutable_decryption_key_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.EncryptRequestOptions.decryption_key_name)
  return _internal_mutable_decryption_key_name();
}
inline const std::string& EncryptRequestOptions::_internal_decryption_key_name() const {
  return decryption_key_name_.Get();
}
inline void EncryptRequestOptions::_internal_set_decryption_key_name(const std::string& value) {
  
  decryption_key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EncryptRequestOptions::set_decryption_key_name(std::string&& value) {
  
  decryption_key_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.EncryptRequestOptions.decryption_key_name)
}
inline void EncryptRequestOptions::set_decryption_key_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  decryption_key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.EncryptRequestOptions.decryption_key_name)
}
inline void EncryptRequestOptions::set_decryption_key_name(const char* value,
    size_t size) {
  
  decryption_key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.EncryptRequestOptions.decryption_key_name)
}
inline std::string* EncryptRequestOptions::_internal_mutable_decryption_key_name() {
  
  return decryption_key_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EncryptRequestOptions::release_decryption_key_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.EncryptRequestOptions.decryption_key_name)
  return decryption_key_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EncryptRequestOptions::set_allocated_decryption_key_name(std::string* decryption_key_name) {
  if (decryption_key_name != nullptr) {
    
  } else {
    
  }
  decryption_key_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), decryption_key_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.EncryptRequestOptions.decryption_key_name)
}
inline std::string* EncryptRequestOptions::unsafe_arena_release_decryption_key_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.EncryptRequestOptions.decryption_key_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return decryption_key_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EncryptRequestOptions::unsafe_arena_set_allocated_decryption_key_name(
    std::string* decryption_key_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (decryption_key_name != nullptr) {
    
  } else {
    
  }
  decryption_key_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      decryption_key_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.EncryptRequestOptions.decryption_key_name)
}

// -------------------------------------------------------------------

// EncryptResponse

// .dapr.proto.common.v1.StreamPayload payload = 1;
inline bool EncryptResponse::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool EncryptResponse::has_payload() const {
  return _internal_has_payload();
}
inline const ::dapr::proto::common::v1::StreamPayload& EncryptResponse::_internal_payload() const {
  const ::dapr::proto::common::v1::StreamPayload* p = payload_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dapr::proto::common::v1::StreamPayload*>(
      &::dapr::proto::common::v1::_StreamPayload_default_instance_);
}
inline const ::dapr::proto::common::v1::StreamPayload& EncryptResponse::payload() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.EncryptResponse.payload)
  return _internal_payload();
}
inline void EncryptResponse::unsafe_arena_set_allocated_payload(
    ::dapr::proto::common::v1::StreamPayload* payload) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.EncryptResponse.payload)
}
inline ::dapr::proto::common::v1::StreamPayload* EncryptResponse::release_payload() {
  auto temp = unsafe_arena_release_payload();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dapr::proto::common::v1::StreamPayload* EncryptResponse::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.EncryptResponse.payload)
  
  ::dapr::proto::common::v1::StreamPayload* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline ::dapr::proto::common::v1::StreamPayload* EncryptResponse::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::common::v1::StreamPayload>(GetArena());
    payload_ = p;
  }
  return payload_;
}
inline ::dapr::proto::common::v1::StreamPayload* EncryptResponse::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.EncryptResponse.payload)
  return _internal_mutable_payload();
}
inline void EncryptResponse::set_allocated_payload(::dapr::proto::common::v1::StreamPayload* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload)->GetArena();
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.EncryptResponse.payload)
}

// -------------------------------------------------------------------

// DecryptRequest

// .dapr.proto.runtime.v1.DecryptRequestOptions options = 1;
inline bool DecryptRequest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool DecryptRequest::has_options() const {
  return _internal_has_options();
}
inline void DecryptRequest::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::dapr::proto::runtime::v1::DecryptRequestOptions& DecryptRequest::_internal_options() const {
  const ::dapr::proto::runtime::v1::DecryptRequestOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dapr::proto::runtime::v1::DecryptRequestOptions*>(
      &::dapr::proto::runtime::v1::_DecryptRequestOptions_default_instance_);
}
inline const ::dapr::proto::runtime::v1::DecryptRequestOptions& DecryptRequest::options() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.DecryptRequest.options)
  return _internal_options();
}
inline void DecryptRequest::unsafe_arena_set_allocated_options(
    ::dapr::proto::runtime::v1::DecryptRequestOptions* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.DecryptRequest.options)
}
inline ::dapr::proto::runtime::v1::DecryptRequestOptions* DecryptRequest::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dapr::proto::runtime::v1::DecryptRequestOptions* DecryptRequest::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.DecryptRequest.options)
  
  ::dapr::proto::runtime::v1::DecryptRequestOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::dapr::proto::runtime::v1::DecryptRequestOptions* DecryptRequest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::runtime::v1::DecryptRequestOptions>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::dapr::proto::runtime::v1::DecryptRequestOptions* DecryptRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.DecryptRequest.options)
  return _internal_mutable_options();
}
inline void DecryptRequest::set_allocated_options(::dapr::proto::runtime::v1::DecryptRequestOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.DecryptRequest.options)
}

// .dapr.proto.common.v1.StreamPayload payload = 2;
inline bool DecryptRequest::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool DecryptRequest::has_payload() const {
  return _internal_has_payload();
}
inline const ::dapr::proto::common::v1::StreamPayload& DecryptRequest::_internal_payload() const {
  const ::dapr::proto::common::v1::StreamPayload* p = payload_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dapr::proto::common::v1::StreamPayload*>(
      &::dapr::proto::common::v1::_StreamPayload_default_instance_);
}
inline const ::dapr::proto::common::v1::StreamPayload& DecryptRequest::payload() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.DecryptRequest.payload)
  return _internal_payload();
}
inline void DecryptRequest::unsafe_arena_set_allocated_payload(
    ::dapr::proto::common::v1::StreamPayload* payload) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.DecryptRequest.payload)
}
inline ::dapr::proto::common::v1::StreamPayload* DecryptRequest::release_payload() {
  auto temp = unsafe_arena_release_payload();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dapr::proto::common::v1::StreamPayload* DecryptRequest::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.DecryptRequest.payload)
  
  ::dapr::proto::common::v1::StreamPayload* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline ::dapr::proto::common::v1::StreamPayload* DecryptRequest::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::common::v1::StreamPayload>(GetArena());
    payload_ = p;
  }
  return payload_;
}
inline ::dapr::proto::common::v1::StreamPayload* DecryptRequest::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.DecryptRequest.payload)
  return _internal_mutable_payload();
}
inline void DecryptRequest::set_allocated_payload(::dapr::proto::common::v1::StreamPayload* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload)->GetArena();
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.DecryptRequest.payload)
}

// -------------------------------------------------------------------

// DecryptRequestOptions

// string component_name = 1[json_name = "componentName"];
inline void DecryptRequestOptions::clear_component_name() {
  component_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DecryptRequestOptions::component_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.DecryptRequestOptions.component_name)
  return _internal_component_name();
}
inline void DecryptRequestOptions::set_component_name(const std::string& value) {
  _internal_set_component_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.DecryptRequestOptions.component_name)
}
inline std::string* DecryptRequestOptions::mutable_component_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.DecryptRequestOptions.component_name)
  return _internal_mutable_component_name();
}
inline const std::string& DecryptRequestOptions::_internal_component_name() const {
  return component_name_.Get();
}
inline void DecryptRequestOptions::_internal_set_component_name(const std::string& value) {
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DecryptRequestOptions::set_component_name(std::string&& value) {
  
  component_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.DecryptRequestOptions.component_name)
}
inline void DecryptRequestOptions::set_component_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.DecryptRequestOptions.component_name)
}
inline void DecryptRequestOptions::set_component_name(const char* value,
    size_t size) {
  
  component_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.DecryptRequestOptions.component_name)
}
inline std::string* DecryptRequestOptions::_internal_mutable_component_name() {
  
  return component_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DecryptRequestOptions::release_component_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.DecryptRequestOptions.component_name)
  return component_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DecryptRequestOptions::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    
  } else {
    
  }
  component_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.DecryptRequestOptions.component_name)
}
inline std::string* DecryptRequestOptions::unsafe_arena_release_component_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.DecryptRequestOptions.component_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return component_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DecryptRequestOptions::unsafe_arena_set_allocated_component_name(
    std::string* component_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (component_name != nullptr) {
    
  } else {
    
  }
  component_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      component_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.DecryptRequestOptions.component_name)
}

// string key_name = 12[json_name = "keyName"];
inline void DecryptRequestOptions::clear_key_name() {
  key_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DecryptRequestOptions::key_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.DecryptRequestOptions.key_name)
  return _internal_key_name();
}
inline void DecryptRequestOptions::set_key_name(const std::string& value) {
  _internal_set_key_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.DecryptRequestOptions.key_name)
}
inline std::string* DecryptRequestOptions::mutable_key_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.DecryptRequestOptions.key_name)
  return _internal_mutable_key_name();
}
inline const std::string& DecryptRequestOptions::_internal_key_name() const {
  return key_name_.Get();
}
inline void DecryptRequestOptions::_internal_set_key_name(const std::string& value) {
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DecryptRequestOptions::set_key_name(std::string&& value) {
  
  key_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.DecryptRequestOptions.key_name)
}
inline void DecryptRequestOptions::set_key_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.DecryptRequestOptions.key_name)
}
inline void DecryptRequestOptions::set_key_name(const char* value,
    size_t size) {
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.DecryptRequestOptions.key_name)
}
inline std::string* DecryptRequestOptions::_internal_mutable_key_name() {
  
  return key_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DecryptRequestOptions::release_key_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.DecryptRequestOptions.key_name)
  return key_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DecryptRequestOptions::set_allocated_key_name(std::string* key_name) {
  if (key_name != nullptr) {
    
  } else {
    
  }
  key_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.DecryptRequestOptions.key_name)
}
inline std::string* DecryptRequestOptions::unsafe_arena_release_key_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.DecryptRequestOptions.key_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DecryptRequestOptions::unsafe_arena_set_allocated_key_name(
    std::string* key_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key_name != nullptr) {
    
  } else {
    
  }
  key_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.DecryptRequestOptions.key_name)
}

// -------------------------------------------------------------------

// DecryptResponse

// .dapr.proto.common.v1.StreamPayload payload = 1;
inline bool DecryptResponse::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool DecryptResponse::has_payload() const {
  return _internal_has_payload();
}
inline const ::dapr::proto::common::v1::StreamPayload& DecryptResponse::_internal_payload() const {
  const ::dapr::proto::common::v1::StreamPayload* p = payload_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dapr::proto::common::v1::StreamPayload*>(
      &::dapr::proto::common::v1::_StreamPayload_default_instance_);
}
inline const ::dapr::proto::common::v1::StreamPayload& DecryptResponse::payload() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.DecryptResponse.payload)
  return _internal_payload();
}
inline void DecryptResponse::unsafe_arena_set_allocated_payload(
    ::dapr::proto::common::v1::StreamPayload* payload) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.DecryptResponse.payload)
}
inline ::dapr::proto::common::v1::StreamPayload* DecryptResponse::release_payload() {
  auto temp = unsafe_arena_release_payload();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dapr::proto::common::v1::StreamPayload* DecryptResponse::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.DecryptResponse.payload)
  
  ::dapr::proto::common::v1::StreamPayload* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline ::dapr::proto::common::v1::StreamPayload* DecryptResponse::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::common::v1::StreamPayload>(GetArena());
    payload_ = p;
  }
  return payload_;
}
inline ::dapr::proto::common::v1::StreamPayload* DecryptResponse::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.DecryptResponse.payload)
  return _internal_mutable_payload();
}
inline void DecryptResponse::set_allocated_payload(::dapr::proto::common::v1::StreamPayload* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload)->GetArena();
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.DecryptResponse.payload)
}

// -------------------------------------------------------------------

// GetWorkflowRequest

// string instance_id = 1[json_name = "instanceID"];
inline void GetWorkflowRequest::clear_instance_id() {
  instance_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetWorkflowRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetWorkflowRequest.instance_id)
  return _internal_instance_id();
}
inline void GetWorkflowRequest::set_instance_id(const std::string& value) {
  _internal_set_instance_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetWorkflowRequest.instance_id)
}
inline std::string* GetWorkflowRequest::mutable_instance_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetWorkflowRequest.instance_id)
  return _internal_mutable_instance_id();
}
inline const std::string& GetWorkflowRequest::_internal_instance_id() const {
  return instance_id_.Get();
}
inline void GetWorkflowRequest::_internal_set_instance_id(const std::string& value) {
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetWorkflowRequest::set_instance_id(std::string&& value) {
  
  instance_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.GetWorkflowRequest.instance_id)
}
inline void GetWorkflowRequest::set_instance_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetWorkflowRequest.instance_id)
}
inline void GetWorkflowRequest::set_instance_id(const char* value,
    size_t size) {
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetWorkflowRequest.instance_id)
}
inline std::string* GetWorkflowRequest::_internal_mutable_instance_id() {
  
  return instance_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetWorkflowRequest::release_instance_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetWorkflowRequest.instance_id)
  return instance_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetWorkflowRequest::set_allocated_instance_id(std::string* instance_id) {
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetWorkflowRequest.instance_id)
}
inline std::string* GetWorkflowRequest::unsafe_arena_release_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.GetWorkflowRequest.instance_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instance_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetWorkflowRequest::unsafe_arena_set_allocated_instance_id(
    std::string* instance_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instance_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetWorkflowRequest.instance_id)
}

// string workflow_component = 2[json_name = "workflowComponent"];
inline void GetWorkflowRequest::clear_workflow_component() {
  workflow_component_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetWorkflowRequest::workflow_component() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetWorkflowRequest.workflow_component)
  return _internal_workflow_component();
}
inline void GetWorkflowRequest::set_workflow_component(const std::string& value) {
  _internal_set_workflow_component(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetWorkflowRequest.workflow_component)
}
inline std::string* GetWorkflowRequest::mutable_workflow_component() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetWorkflowRequest.workflow_component)
  return _internal_mutable_workflow_component();
}
inline const std::string& GetWorkflowRequest::_internal_workflow_component() const {
  return workflow_component_.Get();
}
inline void GetWorkflowRequest::_internal_set_workflow_component(const std::string& value) {
  
  workflow_component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetWorkflowRequest::set_workflow_component(std::string&& value) {
  
  workflow_component_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.GetWorkflowRequest.workflow_component)
}
inline void GetWorkflowRequest::set_workflow_component(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workflow_component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetWorkflowRequest.workflow_component)
}
inline void GetWorkflowRequest::set_workflow_component(const char* value,
    size_t size) {
  
  workflow_component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetWorkflowRequest.workflow_component)
}
inline std::string* GetWorkflowRequest::_internal_mutable_workflow_component() {
  
  return workflow_component_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetWorkflowRequest::release_workflow_component() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetWorkflowRequest.workflow_component)
  return workflow_component_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetWorkflowRequest::set_allocated_workflow_component(std::string* workflow_component) {
  if (workflow_component != nullptr) {
    
  } else {
    
  }
  workflow_component_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_component,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetWorkflowRequest.workflow_component)
}
inline std::string* GetWorkflowRequest::unsafe_arena_release_workflow_component() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.GetWorkflowRequest.workflow_component)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return workflow_component_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetWorkflowRequest::unsafe_arena_set_allocated_workflow_component(
    std::string* workflow_component) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (workflow_component != nullptr) {
    
  } else {
    
  }
  workflow_component_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      workflow_component, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetWorkflowRequest.workflow_component)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetWorkflowResponse

// string instance_id = 1[json_name = "instanceID"];
inline void GetWorkflowResponse::clear_instance_id() {
  instance_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetWorkflowResponse::instance_id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetWorkflowResponse.instance_id)
  return _internal_instance_id();
}
inline void GetWorkflowResponse::set_instance_id(const std::string& value) {
  _internal_set_instance_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetWorkflowResponse.instance_id)
}
inline std::string* GetWorkflowResponse::mutable_instance_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetWorkflowResponse.instance_id)
  return _internal_mutable_instance_id();
}
inline const std::string& GetWorkflowResponse::_internal_instance_id() const {
  return instance_id_.Get();
}
inline void GetWorkflowResponse::_internal_set_instance_id(const std::string& value) {
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetWorkflowResponse::set_instance_id(std::string&& value) {
  
  instance_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.GetWorkflowResponse.instance_id)
}
inline void GetWorkflowResponse::set_instance_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetWorkflowResponse.instance_id)
}
inline void GetWorkflowResponse::set_instance_id(const char* value,
    size_t size) {
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetWorkflowResponse.instance_id)
}
inline std::string* GetWorkflowResponse::_internal_mutable_instance_id() {
  
  return instance_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetWorkflowResponse::release_instance_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetWorkflowResponse.instance_id)
  return instance_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetWorkflowResponse::set_allocated_instance_id(std::string* instance_id) {
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetWorkflowResponse.instance_id)
}
inline std::string* GetWorkflowResponse::unsafe_arena_release_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.GetWorkflowResponse.instance_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instance_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetWorkflowResponse::unsafe_arena_set_allocated_instance_id(
    std::string* instance_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instance_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetWorkflowResponse.instance_id)
}

// string workflow_name = 2[json_name = "workflowName"];
inline void GetWorkflowResponse::clear_workflow_name() {
  workflow_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetWorkflowResponse::workflow_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetWorkflowResponse.workflow_name)
  return _internal_workflow_name();
}
inline void GetWorkflowResponse::set_workflow_name(const std::string& value) {
  _internal_set_workflow_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetWorkflowResponse.workflow_name)
}
inline std::string* GetWorkflowResponse::mutable_workflow_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetWorkflowResponse.workflow_name)
  return _internal_mutable_workflow_name();
}
inline const std::string& GetWorkflowResponse::_internal_workflow_name() const {
  return workflow_name_.Get();
}
inline void GetWorkflowResponse::_internal_set_workflow_name(const std::string& value) {
  
  workflow_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetWorkflowResponse::set_workflow_name(std::string&& value) {
  
  workflow_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.GetWorkflowResponse.workflow_name)
}
inline void GetWorkflowResponse::set_workflow_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workflow_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetWorkflowResponse.workflow_name)
}
inline void GetWorkflowResponse::set_workflow_name(const char* value,
    size_t size) {
  
  workflow_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetWorkflowResponse.workflow_name)
}
inline std::string* GetWorkflowResponse::_internal_mutable_workflow_name() {
  
  return workflow_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetWorkflowResponse::release_workflow_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetWorkflowResponse.workflow_name)
  return workflow_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetWorkflowResponse::set_allocated_workflow_name(std::string* workflow_name) {
  if (workflow_name != nullptr) {
    
  } else {
    
  }
  workflow_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetWorkflowResponse.workflow_name)
}
inline std::string* GetWorkflowResponse::unsafe_arena_release_workflow_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.GetWorkflowResponse.workflow_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return workflow_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetWorkflowResponse::unsafe_arena_set_allocated_workflow_name(
    std::string* workflow_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (workflow_name != nullptr) {
    
  } else {
    
  }
  workflow_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      workflow_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetWorkflowResponse.workflow_name)
}

// .google.protobuf.Timestamp created_at = 3[json_name = "createdAt"];
inline bool GetWorkflowResponse::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool GetWorkflowResponse::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetWorkflowResponse::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetWorkflowResponse::created_at() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetWorkflowResponse.created_at)
  return _internal_created_at();
}
inline void GetWorkflowResponse::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetWorkflowResponse.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetWorkflowResponse::release_created_at() {
  auto temp = unsafe_arena_release_created_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetWorkflowResponse::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetWorkflowResponse.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetWorkflowResponse::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetWorkflowResponse::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetWorkflowResponse.created_at)
  return _internal_mutable_created_at();
}
inline void GetWorkflowResponse::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetWorkflowResponse.created_at)
}

// .google.protobuf.Timestamp last_updated_at = 4[json_name = "lastUpdatedAt"];
inline bool GetWorkflowResponse::_internal_has_last_updated_at() const {
  return this != internal_default_instance() && last_updated_at_ != nullptr;
}
inline bool GetWorkflowResponse::has_last_updated_at() const {
  return _internal_has_last_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetWorkflowResponse::_internal_last_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = last_updated_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetWorkflowResponse::last_updated_at() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetWorkflowResponse.last_updated_at)
  return _internal_last_updated_at();
}
inline void GetWorkflowResponse::unsafe_arena_set_allocated_last_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* last_updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_at_);
  }
  last_updated_at_ = last_updated_at;
  if (last_updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetWorkflowResponse.last_updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetWorkflowResponse::release_last_updated_at() {
  auto temp = unsafe_arena_release_last_updated_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetWorkflowResponse::unsafe_arena_release_last_updated_at() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetWorkflowResponse.last_updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_updated_at_;
  last_updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetWorkflowResponse::_internal_mutable_last_updated_at() {
  
  if (last_updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    last_updated_at_ = p;
  }
  return last_updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetWorkflowResponse::mutable_last_updated_at() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetWorkflowResponse.last_updated_at)
  return _internal_mutable_last_updated_at();
}
inline void GetWorkflowResponse::set_allocated_last_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* last_updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_at_);
  }
  if (last_updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      last_updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_updated_at, submessage_arena);
    }
    
  } else {
    
  }
  last_updated_at_ = last_updated_at;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetWorkflowResponse.last_updated_at)
}

// string runtime_status = 5[json_name = "runtimeStatus"];
inline void GetWorkflowResponse::clear_runtime_status() {
  runtime_status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetWorkflowResponse::runtime_status() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetWorkflowResponse.runtime_status)
  return _internal_runtime_status();
}
inline void GetWorkflowResponse::set_runtime_status(const std::string& value) {
  _internal_set_runtime_status(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetWorkflowResponse.runtime_status)
}
inline std::string* GetWorkflowResponse::mutable_runtime_status() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetWorkflowResponse.runtime_status)
  return _internal_mutable_runtime_status();
}
inline const std::string& GetWorkflowResponse::_internal_runtime_status() const {
  return runtime_status_.Get();
}
inline void GetWorkflowResponse::_internal_set_runtime_status(const std::string& value) {
  
  runtime_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetWorkflowResponse::set_runtime_status(std::string&& value) {
  
  runtime_status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.GetWorkflowResponse.runtime_status)
}
inline void GetWorkflowResponse::set_runtime_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runtime_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetWorkflowResponse.runtime_status)
}
inline void GetWorkflowResponse::set_runtime_status(const char* value,
    size_t size) {
  
  runtime_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetWorkflowResponse.runtime_status)
}
inline std::string* GetWorkflowResponse::_internal_mutable_runtime_status() {
  
  return runtime_status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetWorkflowResponse::release_runtime_status() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetWorkflowResponse.runtime_status)
  return runtime_status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetWorkflowResponse::set_allocated_runtime_status(std::string* runtime_status) {
  if (runtime_status != nullptr) {
    
  } else {
    
  }
  runtime_status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runtime_status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetWorkflowResponse.runtime_status)
}
inline std::string* GetWorkflowResponse::unsafe_arena_release_runtime_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.GetWorkflowResponse.runtime_status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return runtime_status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetWorkflowResponse::unsafe_arena_set_allocated_runtime_status(
    std::string* runtime_status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (runtime_status != nullptr) {
    
  } else {
    
  }
  runtime_status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      runtime_status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetWorkflowResponse.runtime_status)
}

// map<string, string> properties = 6;
inline int GetWorkflowResponse::_internal_properties_size() const {
  return properties_.size();
}
inline int GetWorkflowResponse::properties_size() const {
  return _internal_properties_size();
}
inline void GetWorkflowResponse::clear_properties() {
  properties_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetWorkflowResponse::_internal_properties() const {
  return properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetWorkflowResponse::properties() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.GetWorkflowResponse.properties)
  return _internal_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetWorkflowResponse::_internal_mutable_properties() {
  return properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetWorkflowResponse::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.GetWorkflowResponse.properties)
  return _internal_mutable_properties();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StartWorkflowRequest

// string instance_id = 1[json_name = "instanceID"];
inline void StartWorkflowRequest::clear_instance_id() {
  instance_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartWorkflowRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.StartWorkflowRequest.instance_id)
  return _internal_instance_id();
}
inline void StartWorkflowRequest::set_instance_id(const std::string& value) {
  _internal_set_instance_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.StartWorkflowRequest.instance_id)
}
inline std::string* StartWorkflowRequest::mutable_instance_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.StartWorkflowRequest.instance_id)
  return _internal_mutable_instance_id();
}
inline const std::string& StartWorkflowRequest::_internal_instance_id() const {
  return instance_id_.Get();
}
inline void StartWorkflowRequest::_internal_set_instance_id(const std::string& value) {
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartWorkflowRequest::set_instance_id(std::string&& value) {
  
  instance_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.StartWorkflowRequest.instance_id)
}
inline void StartWorkflowRequest::set_instance_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.StartWorkflowRequest.instance_id)
}
inline void StartWorkflowRequest::set_instance_id(const char* value,
    size_t size) {
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.StartWorkflowRequest.instance_id)
}
inline std::string* StartWorkflowRequest::_internal_mutable_instance_id() {
  
  return instance_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartWorkflowRequest::release_instance_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.StartWorkflowRequest.instance_id)
  return instance_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartWorkflowRequest::set_allocated_instance_id(std::string* instance_id) {
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.StartWorkflowRequest.instance_id)
}
inline std::string* StartWorkflowRequest::unsafe_arena_release_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.StartWorkflowRequest.instance_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instance_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartWorkflowRequest::unsafe_arena_set_allocated_instance_id(
    std::string* instance_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instance_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.StartWorkflowRequest.instance_id)
}

// string workflow_component = 2[json_name = "workflowComponent"];
inline void StartWorkflowRequest::clear_workflow_component() {
  workflow_component_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartWorkflowRequest::workflow_component() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.StartWorkflowRequest.workflow_component)
  return _internal_workflow_component();
}
inline void StartWorkflowRequest::set_workflow_component(const std::string& value) {
  _internal_set_workflow_component(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.StartWorkflowRequest.workflow_component)
}
inline std::string* StartWorkflowRequest::mutable_workflow_component() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.StartWorkflowRequest.workflow_component)
  return _internal_mutable_workflow_component();
}
inline const std::string& StartWorkflowRequest::_internal_workflow_component() const {
  return workflow_component_.Get();
}
inline void StartWorkflowRequest::_internal_set_workflow_component(const std::string& value) {
  
  workflow_component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartWorkflowRequest::set_workflow_component(std::string&& value) {
  
  workflow_component_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.StartWorkflowRequest.workflow_component)
}
inline void StartWorkflowRequest::set_workflow_component(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workflow_component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.StartWorkflowRequest.workflow_component)
}
inline void StartWorkflowRequest::set_workflow_component(const char* value,
    size_t size) {
  
  workflow_component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.StartWorkflowRequest.workflow_component)
}
inline std::string* StartWorkflowRequest::_internal_mutable_workflow_component() {
  
  return workflow_component_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartWorkflowRequest::release_workflow_component() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.StartWorkflowRequest.workflow_component)
  return workflow_component_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartWorkflowRequest::set_allocated_workflow_component(std::string* workflow_component) {
  if (workflow_component != nullptr) {
    
  } else {
    
  }
  workflow_component_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_component,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.StartWorkflowRequest.workflow_component)
}
inline std::string* StartWorkflowRequest::unsafe_arena_release_workflow_component() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.StartWorkflowRequest.workflow_component)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return workflow_component_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartWorkflowRequest::unsafe_arena_set_allocated_workflow_component(
    std::string* workflow_component) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (workflow_component != nullptr) {
    
  } else {
    
  }
  workflow_component_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      workflow_component, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.StartWorkflowRequest.workflow_component)
}

// string workflow_name = 3[json_name = "workflowName"];
inline void StartWorkflowRequest::clear_workflow_name() {
  workflow_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartWorkflowRequest::workflow_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.StartWorkflowRequest.workflow_name)
  return _internal_workflow_name();
}
inline void StartWorkflowRequest::set_workflow_name(const std::string& value) {
  _internal_set_workflow_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.StartWorkflowRequest.workflow_name)
}
inline std::string* StartWorkflowRequest::mutable_workflow_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.StartWorkflowRequest.workflow_name)
  return _internal_mutable_workflow_name();
}
inline const std::string& StartWorkflowRequest::_internal_workflow_name() const {
  return workflow_name_.Get();
}
inline void StartWorkflowRequest::_internal_set_workflow_name(const std::string& value) {
  
  workflow_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartWorkflowRequest::set_workflow_name(std::string&& value) {
  
  workflow_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.StartWorkflowRequest.workflow_name)
}
inline void StartWorkflowRequest::set_workflow_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workflow_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.StartWorkflowRequest.workflow_name)
}
inline void StartWorkflowRequest::set_workflow_name(const char* value,
    size_t size) {
  
  workflow_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.StartWorkflowRequest.workflow_name)
}
inline std::string* StartWorkflowRequest::_internal_mutable_workflow_name() {
  
  return workflow_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartWorkflowRequest::release_workflow_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.StartWorkflowRequest.workflow_name)
  return workflow_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartWorkflowRequest::set_allocated_workflow_name(std::string* workflow_name) {
  if (workflow_name != nullptr) {
    
  } else {
    
  }
  workflow_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.StartWorkflowRequest.workflow_name)
}
inline std::string* StartWorkflowRequest::unsafe_arena_release_workflow_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.StartWorkflowRequest.workflow_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return workflow_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartWorkflowRequest::unsafe_arena_set_allocated_workflow_name(
    std::string* workflow_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (workflow_name != nullptr) {
    
  } else {
    
  }
  workflow_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      workflow_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.StartWorkflowRequest.workflow_name)
}

// map<string, string> options = 4;
inline int StartWorkflowRequest::_internal_options_size() const {
  return options_.size();
}
inline int StartWorkflowRequest::options_size() const {
  return _internal_options_size();
}
inline void StartWorkflowRequest::clear_options() {
  options_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StartWorkflowRequest::_internal_options() const {
  return options_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StartWorkflowRequest::options() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.StartWorkflowRequest.options)
  return _internal_options();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StartWorkflowRequest::_internal_mutable_options() {
  return options_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StartWorkflowRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.StartWorkflowRequest.options)
  return _internal_mutable_options();
}

// bytes input = 5;
inline void StartWorkflowRequest::clear_input() {
  input_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartWorkflowRequest::input() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.StartWorkflowRequest.input)
  return _internal_input();
}
inline void StartWorkflowRequest::set_input(const std::string& value) {
  _internal_set_input(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.StartWorkflowRequest.input)
}
inline std::string* StartWorkflowRequest::mutable_input() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.StartWorkflowRequest.input)
  return _internal_mutable_input();
}
inline const std::string& StartWorkflowRequest::_internal_input() const {
  return input_.Get();
}
inline void StartWorkflowRequest::_internal_set_input(const std::string& value) {
  
  input_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartWorkflowRequest::set_input(std::string&& value) {
  
  input_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.StartWorkflowRequest.input)
}
inline void StartWorkflowRequest::set_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.StartWorkflowRequest.input)
}
inline void StartWorkflowRequest::set_input(const void* value,
    size_t size) {
  
  input_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.StartWorkflowRequest.input)
}
inline std::string* StartWorkflowRequest::_internal_mutable_input() {
  
  return input_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartWorkflowRequest::release_input() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.StartWorkflowRequest.input)
  return input_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartWorkflowRequest::set_allocated_input(std::string* input) {
  if (input != nullptr) {
    
  } else {
    
  }
  input_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.StartWorkflowRequest.input)
}
inline std::string* StartWorkflowRequest::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.StartWorkflowRequest.input)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return input_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartWorkflowRequest::unsafe_arena_set_allocated_input(
    std::string* input) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (input != nullptr) {
    
  } else {
    
  }
  input_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      input, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.StartWorkflowRequest.input)
}

// -------------------------------------------------------------------

// StartWorkflowResponse

// string instance_id = 1[json_name = "instanceID"];
inline void StartWorkflowResponse::clear_instance_id() {
  instance_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartWorkflowResponse::instance_id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.StartWorkflowResponse.instance_id)
  return _internal_instance_id();
}
inline void StartWorkflowResponse::set_instance_id(const std::string& value) {
  _internal_set_instance_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.StartWorkflowResponse.instance_id)
}
inline std::string* StartWorkflowResponse::mutable_instance_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.StartWorkflowResponse.instance_id)
  return _internal_mutable_instance_id();
}
inline const std::string& StartWorkflowResponse::_internal_instance_id() const {
  return instance_id_.Get();
}
inline void StartWorkflowResponse::_internal_set_instance_id(const std::string& value) {
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartWorkflowResponse::set_instance_id(std::string&& value) {
  
  instance_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.StartWorkflowResponse.instance_id)
}
inline void StartWorkflowResponse::set_instance_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.StartWorkflowResponse.instance_id)
}
inline void StartWorkflowResponse::set_instance_id(const char* value,
    size_t size) {
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.StartWorkflowResponse.instance_id)
}
inline std::string* StartWorkflowResponse::_internal_mutable_instance_id() {
  
  return instance_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartWorkflowResponse::release_instance_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.StartWorkflowResponse.instance_id)
  return instance_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartWorkflowResponse::set_allocated_instance_id(std::string* instance_id) {
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.StartWorkflowResponse.instance_id)
}
inline std::string* StartWorkflowResponse::unsafe_arena_release_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.StartWorkflowResponse.instance_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instance_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartWorkflowResponse::unsafe_arena_set_allocated_instance_id(
    std::string* instance_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instance_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.StartWorkflowResponse.instance_id)
}

// -------------------------------------------------------------------

// TerminateWorkflowRequest

// string instance_id = 1[json_name = "instanceID"];
inline void TerminateWorkflowRequest::clear_instance_id() {
  instance_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TerminateWorkflowRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TerminateWorkflowRequest.instance_id)
  return _internal_instance_id();
}
inline void TerminateWorkflowRequest::set_instance_id(const std::string& value) {
  _internal_set_instance_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TerminateWorkflowRequest.instance_id)
}
inline std::string* TerminateWorkflowRequest::mutable_instance_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TerminateWorkflowRequest.instance_id)
  return _internal_mutable_instance_id();
}
inline const std::string& TerminateWorkflowRequest::_internal_instance_id() const {
  return instance_id_.Get();
}
inline void TerminateWorkflowRequest::_internal_set_instance_id(const std::string& value) {
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TerminateWorkflowRequest::set_instance_id(std::string&& value) {
  
  instance_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.TerminateWorkflowRequest.instance_id)
}
inline void TerminateWorkflowRequest::set_instance_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.TerminateWorkflowRequest.instance_id)
}
inline void TerminateWorkflowRequest::set_instance_id(const char* value,
    size_t size) {
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.TerminateWorkflowRequest.instance_id)
}
inline std::string* TerminateWorkflowRequest::_internal_mutable_instance_id() {
  
  return instance_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TerminateWorkflowRequest::release_instance_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TerminateWorkflowRequest.instance_id)
  return instance_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TerminateWorkflowRequest::set_allocated_instance_id(std::string* instance_id) {
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TerminateWorkflowRequest.instance_id)
}
inline std::string* TerminateWorkflowRequest::unsafe_arena_release_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.TerminateWorkflowRequest.instance_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instance_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TerminateWorkflowRequest::unsafe_arena_set_allocated_instance_id(
    std::string* instance_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instance_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.TerminateWorkflowRequest.instance_id)
}

// string workflow_component = 2[json_name = "workflowComponent"];
inline void TerminateWorkflowRequest::clear_workflow_component() {
  workflow_component_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TerminateWorkflowRequest::workflow_component() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TerminateWorkflowRequest.workflow_component)
  return _internal_workflow_component();
}
inline void TerminateWorkflowRequest::set_workflow_component(const std::string& value) {
  _internal_set_workflow_component(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TerminateWorkflowRequest.workflow_component)
}
inline std::string* TerminateWorkflowRequest::mutable_workflow_component() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TerminateWorkflowRequest.workflow_component)
  return _internal_mutable_workflow_component();
}
inline const std::string& TerminateWorkflowRequest::_internal_workflow_component() const {
  return workflow_component_.Get();
}
inline void TerminateWorkflowRequest::_internal_set_workflow_component(const std::string& value) {
  
  workflow_component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TerminateWorkflowRequest::set_workflow_component(std::string&& value) {
  
  workflow_component_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.TerminateWorkflowRequest.workflow_component)
}
inline void TerminateWorkflowRequest::set_workflow_component(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workflow_component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.TerminateWorkflowRequest.workflow_component)
}
inline void TerminateWorkflowRequest::set_workflow_component(const char* value,
    size_t size) {
  
  workflow_component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.TerminateWorkflowRequest.workflow_component)
}
inline std::string* TerminateWorkflowRequest::_internal_mutable_workflow_component() {
  
  return workflow_component_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TerminateWorkflowRequest::release_workflow_component() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TerminateWorkflowRequest.workflow_component)
  return workflow_component_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TerminateWorkflowRequest::set_allocated_workflow_component(std::string* workflow_component) {
  if (workflow_component != nullptr) {
    
  } else {
    
  }
  workflow_component_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_component,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TerminateWorkflowRequest.workflow_component)
}
inline std::string* TerminateWorkflowRequest::unsafe_arena_release_workflow_component() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.TerminateWorkflowRequest.workflow_component)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return workflow_component_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TerminateWorkflowRequest::unsafe_arena_set_allocated_workflow_component(
    std::string* workflow_component) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (workflow_component != nullptr) {
    
  } else {
    
  }
  workflow_component_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      workflow_component, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.TerminateWorkflowRequest.workflow_component)
}

// -------------------------------------------------------------------

// PauseWorkflowRequest

// string instance_id = 1[json_name = "instanceID"];
inline void PauseWorkflowRequest::clear_instance_id() {
  instance_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PauseWorkflowRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.PauseWorkflowRequest.instance_id)
  return _internal_instance_id();
}
inline void PauseWorkflowRequest::set_instance_id(const std::string& value) {
  _internal_set_instance_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.PauseWorkflowRequest.instance_id)
}
inline std::string* PauseWorkflowRequest::mutable_instance_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.PauseWorkflowRequest.instance_id)
  return _internal_mutable_instance_id();
}
inline const std::string& PauseWorkflowRequest::_internal_instance_id() const {
  return instance_id_.Get();
}
inline void PauseWorkflowRequest::_internal_set_instance_id(const std::string& value) {
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PauseWorkflowRequest::set_instance_id(std::string&& value) {
  
  instance_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.PauseWorkflowRequest.instance_id)
}
inline void PauseWorkflowRequest::set_instance_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.PauseWorkflowRequest.instance_id)
}
inline void PauseWorkflowRequest::set_instance_id(const char* value,
    size_t size) {
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.PauseWorkflowRequest.instance_id)
}
inline std::string* PauseWorkflowRequest::_internal_mutable_instance_id() {
  
  return instance_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PauseWorkflowRequest::release_instance_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.PauseWorkflowRequest.instance_id)
  return instance_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PauseWorkflowRequest::set_allocated_instance_id(std::string* instance_id) {
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.PauseWorkflowRequest.instance_id)
}
inline std::string* PauseWorkflowRequest::unsafe_arena_release_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.PauseWorkflowRequest.instance_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instance_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PauseWorkflowRequest::unsafe_arena_set_allocated_instance_id(
    std::string* instance_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instance_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.PauseWorkflowRequest.instance_id)
}

// string workflow_component = 2[json_name = "workflowComponent"];
inline void PauseWorkflowRequest::clear_workflow_component() {
  workflow_component_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PauseWorkflowRequest::workflow_component() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.PauseWorkflowRequest.workflow_component)
  return _internal_workflow_component();
}
inline void PauseWorkflowRequest::set_workflow_component(const std::string& value) {
  _internal_set_workflow_component(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.PauseWorkflowRequest.workflow_component)
}
inline std::string* PauseWorkflowRequest::mutable_workflow_component() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.PauseWorkflowRequest.workflow_component)
  return _internal_mutable_workflow_component();
}
inline const std::string& PauseWorkflowRequest::_internal_workflow_component() const {
  return workflow_component_.Get();
}
inline void PauseWorkflowRequest::_internal_set_workflow_component(const std::string& value) {
  
  workflow_component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PauseWorkflowRequest::set_workflow_component(std::string&& value) {
  
  workflow_component_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.PauseWorkflowRequest.workflow_component)
}
inline void PauseWorkflowRequest::set_workflow_component(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workflow_component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.PauseWorkflowRequest.workflow_component)
}
inline void PauseWorkflowRequest::set_workflow_component(const char* value,
    size_t size) {
  
  workflow_component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.PauseWorkflowRequest.workflow_component)
}
inline std::string* PauseWorkflowRequest::_internal_mutable_workflow_component() {
  
  return workflow_component_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PauseWorkflowRequest::release_workflow_component() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.PauseWorkflowRequest.workflow_component)
  return workflow_component_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PauseWorkflowRequest::set_allocated_workflow_component(std::string* workflow_component) {
  if (workflow_component != nullptr) {
    
  } else {
    
  }
  workflow_component_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_component,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.PauseWorkflowRequest.workflow_component)
}
inline std::string* PauseWorkflowRequest::unsafe_arena_release_workflow_component() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.PauseWorkflowRequest.workflow_component)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return workflow_component_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PauseWorkflowRequest::unsafe_arena_set_allocated_workflow_component(
    std::string* workflow_component) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (workflow_component != nullptr) {
    
  } else {
    
  }
  workflow_component_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      workflow_component, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.PauseWorkflowRequest.workflow_component)
}

// -------------------------------------------------------------------

// ResumeWorkflowRequest

// string instance_id = 1[json_name = "instanceID"];
inline void ResumeWorkflowRequest::clear_instance_id() {
  instance_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResumeWorkflowRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.ResumeWorkflowRequest.instance_id)
  return _internal_instance_id();
}
inline void ResumeWorkflowRequest::set_instance_id(const std::string& value) {
  _internal_set_instance_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.ResumeWorkflowRequest.instance_id)
}
inline std::string* ResumeWorkflowRequest::mutable_instance_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.ResumeWorkflowRequest.instance_id)
  return _internal_mutable_instance_id();
}
inline const std::string& ResumeWorkflowRequest::_internal_instance_id() const {
  return instance_id_.Get();
}
inline void ResumeWorkflowRequest::_internal_set_instance_id(const std::string& value) {
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResumeWorkflowRequest::set_instance_id(std::string&& value) {
  
  instance_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.ResumeWorkflowRequest.instance_id)
}
inline void ResumeWorkflowRequest::set_instance_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.ResumeWorkflowRequest.instance_id)
}
inline void ResumeWorkflowRequest::set_instance_id(const char* value,
    size_t size) {
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.ResumeWorkflowRequest.instance_id)
}
inline std::string* ResumeWorkflowRequest::_internal_mutable_instance_id() {
  
  return instance_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResumeWorkflowRequest::release_instance_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.ResumeWorkflowRequest.instance_id)
  return instance_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResumeWorkflowRequest::set_allocated_instance_id(std::string* instance_id) {
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.ResumeWorkflowRequest.instance_id)
}
inline std::string* ResumeWorkflowRequest::unsafe_arena_release_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.ResumeWorkflowRequest.instance_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instance_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResumeWorkflowRequest::unsafe_arena_set_allocated_instance_id(
    std::string* instance_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instance_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.ResumeWorkflowRequest.instance_id)
}

// string workflow_component = 2[json_name = "workflowComponent"];
inline void ResumeWorkflowRequest::clear_workflow_component() {
  workflow_component_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResumeWorkflowRequest::workflow_component() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.ResumeWorkflowRequest.workflow_component)
  return _internal_workflow_component();
}
inline void ResumeWorkflowRequest::set_workflow_component(const std::string& value) {
  _internal_set_workflow_component(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.ResumeWorkflowRequest.workflow_component)
}
inline std::string* ResumeWorkflowRequest::mutable_workflow_component() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.ResumeWorkflowRequest.workflow_component)
  return _internal_mutable_workflow_component();
}
inline const std::string& ResumeWorkflowRequest::_internal_workflow_component() const {
  return workflow_component_.Get();
}
inline void ResumeWorkflowRequest::_internal_set_workflow_component(const std::string& value) {
  
  workflow_component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResumeWorkflowRequest::set_workflow_component(std::string&& value) {
  
  workflow_component_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.ResumeWorkflowRequest.workflow_component)
}
inline void ResumeWorkflowRequest::set_workflow_component(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workflow_component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.ResumeWorkflowRequest.workflow_component)
}
inline void ResumeWorkflowRequest::set_workflow_component(const char* value,
    size_t size) {
  
  workflow_component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.ResumeWorkflowRequest.workflow_component)
}
inline std::string* ResumeWorkflowRequest::_internal_mutable_workflow_component() {
  
  return workflow_component_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResumeWorkflowRequest::release_workflow_component() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.ResumeWorkflowRequest.workflow_component)
  return workflow_component_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResumeWorkflowRequest::set_allocated_workflow_component(std::string* workflow_component) {
  if (workflow_component != nullptr) {
    
  } else {
    
  }
  workflow_component_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_component,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.ResumeWorkflowRequest.workflow_component)
}
inline std::string* ResumeWorkflowRequest::unsafe_arena_release_workflow_component() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.ResumeWorkflowRequest.workflow_component)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return workflow_component_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResumeWorkflowRequest::unsafe_arena_set_allocated_workflow_component(
    std::string* workflow_component) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (workflow_component != nullptr) {
    
  } else {
    
  }
  workflow_component_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      workflow_component, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.ResumeWorkflowRequest.workflow_component)
}

// -------------------------------------------------------------------

// RaiseEventWorkflowRequest

// string instance_id = 1[json_name = "instanceID"];
inline void RaiseEventWorkflowRequest::clear_instance_id() {
  instance_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RaiseEventWorkflowRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.instance_id)
  return _internal_instance_id();
}
inline void RaiseEventWorkflowRequest::set_instance_id(const std::string& value) {
  _internal_set_instance_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.instance_id)
}
inline std::string* RaiseEventWorkflowRequest::mutable_instance_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.instance_id)
  return _internal_mutable_instance_id();
}
inline const std::string& RaiseEventWorkflowRequest::_internal_instance_id() const {
  return instance_id_.Get();
}
inline void RaiseEventWorkflowRequest::_internal_set_instance_id(const std::string& value) {
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RaiseEventWorkflowRequest::set_instance_id(std::string&& value) {
  
  instance_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.instance_id)
}
inline void RaiseEventWorkflowRequest::set_instance_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.instance_id)
}
inline void RaiseEventWorkflowRequest::set_instance_id(const char* value,
    size_t size) {
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.instance_id)
}
inline std::string* RaiseEventWorkflowRequest::_internal_mutable_instance_id() {
  
  return instance_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RaiseEventWorkflowRequest::release_instance_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.instance_id)
  return instance_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RaiseEventWorkflowRequest::set_allocated_instance_id(std::string* instance_id) {
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.instance_id)
}
inline std::string* RaiseEventWorkflowRequest::unsafe_arena_release_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.instance_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instance_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RaiseEventWorkflowRequest::unsafe_arena_set_allocated_instance_id(
    std::string* instance_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instance_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.instance_id)
}

// string workflow_component = 2[json_name = "workflowComponent"];
inline void RaiseEventWorkflowRequest::clear_workflow_component() {
  workflow_component_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RaiseEventWorkflowRequest::workflow_component() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.workflow_component)
  return _internal_workflow_component();
}
inline void RaiseEventWorkflowRequest::set_workflow_component(const std::string& value) {
  _internal_set_workflow_component(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.workflow_component)
}
inline std::string* RaiseEventWorkflowRequest::mutable_workflow_component() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.workflow_component)
  return _internal_mutable_workflow_component();
}
inline const std::string& RaiseEventWorkflowRequest::_internal_workflow_component() const {
  return workflow_component_.Get();
}
inline void RaiseEventWorkflowRequest::_internal_set_workflow_component(const std::string& value) {
  
  workflow_component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RaiseEventWorkflowRequest::set_workflow_component(std::string&& value) {
  
  workflow_component_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.workflow_component)
}
inline void RaiseEventWorkflowRequest::set_workflow_component(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workflow_component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.workflow_component)
}
inline void RaiseEventWorkflowRequest::set_workflow_component(const char* value,
    size_t size) {
  
  workflow_component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.workflow_component)
}
inline std::string* RaiseEventWorkflowRequest::_internal_mutable_workflow_component() {
  
  return workflow_component_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RaiseEventWorkflowRequest::release_workflow_component() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.workflow_component)
  return workflow_component_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RaiseEventWorkflowRequest::set_allocated_workflow_component(std::string* workflow_component) {
  if (workflow_component != nullptr) {
    
  } else {
    
  }
  workflow_component_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_component,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.workflow_component)
}
inline std::string* RaiseEventWorkflowRequest::unsafe_arena_release_workflow_component() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.workflow_component)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return workflow_component_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RaiseEventWorkflowRequest::unsafe_arena_set_allocated_workflow_component(
    std::string* workflow_component) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (workflow_component != nullptr) {
    
  } else {
    
  }
  workflow_component_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      workflow_component, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.workflow_component)
}

// string event_name = 3[json_name = "eventName"];
inline void RaiseEventWorkflowRequest::clear_event_name() {
  event_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RaiseEventWorkflowRequest::event_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.event_name)
  return _internal_event_name();
}
inline void RaiseEventWorkflowRequest::set_event_name(const std::string& value) {
  _internal_set_event_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.event_name)
}
inline std::string* RaiseEventWorkflowRequest::mutable_event_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.event_name)
  return _internal_mutable_event_name();
}
inline const std::string& RaiseEventWorkflowRequest::_internal_event_name() const {
  return event_name_.Get();
}
inline void RaiseEventWorkflowRequest::_internal_set_event_name(const std::string& value) {
  
  event_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RaiseEventWorkflowRequest::set_event_name(std::string&& value) {
  
  event_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.event_name)
}
inline void RaiseEventWorkflowRequest::set_event_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.event_name)
}
inline void RaiseEventWorkflowRequest::set_event_name(const char* value,
    size_t size) {
  
  event_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.event_name)
}
inline std::string* RaiseEventWorkflowRequest::_internal_mutable_event_name() {
  
  return event_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RaiseEventWorkflowRequest::release_event_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.event_name)
  return event_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RaiseEventWorkflowRequest::set_allocated_event_name(std::string* event_name) {
  if (event_name != nullptr) {
    
  } else {
    
  }
  event_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.event_name)
}
inline std::string* RaiseEventWorkflowRequest::unsafe_arena_release_event_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.event_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return event_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RaiseEventWorkflowRequest::unsafe_arena_set_allocated_event_name(
    std::string* event_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (event_name != nullptr) {
    
  } else {
    
  }
  event_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      event_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.event_name)
}

// bytes event_data = 4;
inline void RaiseEventWorkflowRequest::clear_event_data() {
  event_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RaiseEventWorkflowRequest::event_data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.event_data)
  return _internal_event_data();
}
inline void RaiseEventWorkflowRequest::set_event_data(const std::string& value) {
  _internal_set_event_data(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.event_data)
}
inline std::string* RaiseEventWorkflowRequest::mutable_event_data() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.event_data)
  return _internal_mutable_event_data();
}
inline const std::string& RaiseEventWorkflowRequest::_internal_event_data() const {
  return event_data_.Get();
}
inline void RaiseEventWorkflowRequest::_internal_set_event_data(const std::string& value) {
  
  event_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RaiseEventWorkflowRequest::set_event_data(std::string&& value) {
  
  event_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.event_data)
}
inline void RaiseEventWorkflowRequest::set_event_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.event_data)
}
inline void RaiseEventWorkflowRequest::set_event_data(const void* value,
    size_t size) {
  
  event_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.event_data)
}
inline std::string* RaiseEventWorkflowRequest::_internal_mutable_event_data() {
  
  return event_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RaiseEventWorkflowRequest::release_event_data() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.event_data)
  return event_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RaiseEventWorkflowRequest::set_allocated_event_data(std::string* event_data) {
  if (event_data != nullptr) {
    
  } else {
    
  }
  event_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.event_data)
}
inline std::string* RaiseEventWorkflowRequest::unsafe_arena_release_event_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.event_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return event_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RaiseEventWorkflowRequest::unsafe_arena_set_allocated_event_data(
    std::string* event_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (event_data != nullptr) {
    
  } else {
    
  }
  event_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      event_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.RaiseEventWorkflowRequest.event_data)
}

// -------------------------------------------------------------------

// PurgeWorkflowRequest

// string instance_id = 1[json_name = "instanceID"];
inline void PurgeWorkflowRequest::clear_instance_id() {
  instance_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PurgeWorkflowRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.PurgeWorkflowRequest.instance_id)
  return _internal_instance_id();
}
inline void PurgeWorkflowRequest::set_instance_id(const std::string& value) {
  _internal_set_instance_id(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.PurgeWorkflowRequest.instance_id)
}
inline std::string* PurgeWorkflowRequest::mutable_instance_id() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.PurgeWorkflowRequest.instance_id)
  return _internal_mutable_instance_id();
}
inline const std::string& PurgeWorkflowRequest::_internal_instance_id() const {
  return instance_id_.Get();
}
inline void PurgeWorkflowRequest::_internal_set_instance_id(const std::string& value) {
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PurgeWorkflowRequest::set_instance_id(std::string&& value) {
  
  instance_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.PurgeWorkflowRequest.instance_id)
}
inline void PurgeWorkflowRequest::set_instance_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.PurgeWorkflowRequest.instance_id)
}
inline void PurgeWorkflowRequest::set_instance_id(const char* value,
    size_t size) {
  
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.PurgeWorkflowRequest.instance_id)
}
inline std::string* PurgeWorkflowRequest::_internal_mutable_instance_id() {
  
  return instance_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PurgeWorkflowRequest::release_instance_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.PurgeWorkflowRequest.instance_id)
  return instance_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PurgeWorkflowRequest::set_allocated_instance_id(std::string* instance_id) {
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.PurgeWorkflowRequest.instance_id)
}
inline std::string* PurgeWorkflowRequest::unsafe_arena_release_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.PurgeWorkflowRequest.instance_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instance_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PurgeWorkflowRequest::unsafe_arena_set_allocated_instance_id(
    std::string* instance_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instance_id != nullptr) {
    
  } else {
    
  }
  instance_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instance_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.PurgeWorkflowRequest.instance_id)
}

// string workflow_component = 2[json_name = "workflowComponent"];
inline void PurgeWorkflowRequest::clear_workflow_component() {
  workflow_component_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PurgeWorkflowRequest::workflow_component() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.PurgeWorkflowRequest.workflow_component)
  return _internal_workflow_component();
}
inline void PurgeWorkflowRequest::set_workflow_component(const std::string& value) {
  _internal_set_workflow_component(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.PurgeWorkflowRequest.workflow_component)
}
inline std::string* PurgeWorkflowRequest::mutable_workflow_component() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.PurgeWorkflowRequest.workflow_component)
  return _internal_mutable_workflow_component();
}
inline const std::string& PurgeWorkflowRequest::_internal_workflow_component() const {
  return workflow_component_.Get();
}
inline void PurgeWorkflowRequest::_internal_set_workflow_component(const std::string& value) {
  
  workflow_component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PurgeWorkflowRequest::set_workflow_component(std::string&& value) {
  
  workflow_component_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.PurgeWorkflowRequest.workflow_component)
}
inline void PurgeWorkflowRequest::set_workflow_component(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workflow_component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.PurgeWorkflowRequest.workflow_component)
}
inline void PurgeWorkflowRequest::set_workflow_component(const char* value,
    size_t size) {
  
  workflow_component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.PurgeWorkflowRequest.workflow_component)
}
inline std::string* PurgeWorkflowRequest::_internal_mutable_workflow_component() {
  
  return workflow_component_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PurgeWorkflowRequest::release_workflow_component() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.PurgeWorkflowRequest.workflow_component)
  return workflow_component_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PurgeWorkflowRequest::set_allocated_workflow_component(std::string* workflow_component) {
  if (workflow_component != nullptr) {
    
  } else {
    
  }
  workflow_component_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_component,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.PurgeWorkflowRequest.workflow_component)
}
inline std::string* PurgeWorkflowRequest::unsafe_arena_release_workflow_component() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.PurgeWorkflowRequest.workflow_component)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return workflow_component_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PurgeWorkflowRequest::unsafe_arena_set_allocated_workflow_component(
    std::string* workflow_component) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (workflow_component != nullptr) {
    
  } else {
    
  }
  workflow_component_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      workflow_component, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.PurgeWorkflowRequest.workflow_component)
}

// -------------------------------------------------------------------

// ShutdownRequest

// -------------------------------------------------------------------

// Job

// string name = 1[json_name = "name"];
inline void Job::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Job::name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.Job.name)
  return _internal_name();
}
inline void Job::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.Job.name)
}
inline std::string* Job::mutable_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.Job.name)
  return _internal_mutable_name();
}
inline const std::string& Job::_internal_name() const {
  return name_.Get();
}
inline void Job::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Job::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.Job.name)
}
inline void Job::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.Job.name)
}
inline void Job::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.Job.name)
}
inline std::string* Job::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Job::release_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.Job.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Job::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.Job.name)
}
inline std::string* Job::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.Job.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Job::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.Job.name)
}

// string schedule = 2[json_name = "schedule"];
inline bool Job::_internal_has_schedule() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Job::has_schedule() const {
  return _internal_has_schedule();
}
inline void Job::clear_schedule() {
  schedule_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Job::schedule() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.Job.schedule)
  return _internal_schedule();
}
inline void Job::set_schedule(const std::string& value) {
  _internal_set_schedule(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.Job.schedule)
}
inline std::string* Job::mutable_schedule() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.Job.schedule)
  return _internal_mutable_schedule();
}
inline const std::string& Job::_internal_schedule() const {
  return schedule_.Get();
}
inline void Job::_internal_set_schedule(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Job::set_schedule(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  schedule_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.Job.schedule)
}
inline void Job::set_schedule(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.Job.schedule)
}
inline void Job::set_schedule(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.Job.schedule)
}
inline std::string* Job::_internal_mutable_schedule() {
  _has_bits_[0] |= 0x00000001u;
  return schedule_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Job::release_schedule() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.Job.schedule)
  if (!_internal_has_schedule()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return schedule_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Job::set_allocated_schedule(std::string* schedule) {
  if (schedule != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  schedule_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schedule,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.Job.schedule)
}
inline std::string* Job::unsafe_arena_release_schedule() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.Job.schedule)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return schedule_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Job::unsafe_arena_set_allocated_schedule(
    std::string* schedule) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (schedule != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  schedule_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      schedule, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.Job.schedule)
}

// uint32 repeats = 3[json_name = "repeats"];
inline bool Job::_internal_has_repeats() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Job::has_repeats() const {
  return _internal_has_repeats();
}
inline void Job::clear_repeats() {
  repeats_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Job::_internal_repeats() const {
  return repeats_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Job::repeats() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.Job.repeats)
  return _internal_repeats();
}
inline void Job::_internal_set_repeats(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  repeats_ = value;
}
inline void Job::set_repeats(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_repeats(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.Job.repeats)
}

// string due_time = 4[json_name = "dueTime"];
inline bool Job::_internal_has_due_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Job::has_due_time() const {
  return _internal_has_due_time();
}
inline void Job::clear_due_time() {
  due_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Job::due_time() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.Job.due_time)
  return _internal_due_time();
}
inline void Job::set_due_time(const std::string& value) {
  _internal_set_due_time(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.Job.due_time)
}
inline std::string* Job::mutable_due_time() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.Job.due_time)
  return _internal_mutable_due_time();
}
inline const std::string& Job::_internal_due_time() const {
  return due_time_.Get();
}
inline void Job::_internal_set_due_time(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  due_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Job::set_due_time(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  due_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.Job.due_time)
}
inline void Job::set_due_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  due_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.Job.due_time)
}
inline void Job::set_due_time(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  due_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.Job.due_time)
}
inline std::string* Job::_internal_mutable_due_time() {
  _has_bits_[0] |= 0x00000002u;
  return due_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Job::release_due_time() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.Job.due_time)
  if (!_internal_has_due_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return due_time_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Job::set_allocated_due_time(std::string* due_time) {
  if (due_time != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  due_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), due_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.Job.due_time)
}
inline std::string* Job::unsafe_arena_release_due_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.Job.due_time)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return due_time_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Job::unsafe_arena_set_allocated_due_time(
    std::string* due_time) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (due_time != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  due_time_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      due_time, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.Job.due_time)
}

// string ttl = 5[json_name = "ttl"];
inline bool Job::_internal_has_ttl() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Job::has_ttl() const {
  return _internal_has_ttl();
}
inline void Job::clear_ttl() {
  ttl_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Job::ttl() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.Job.ttl)
  return _internal_ttl();
}
inline void Job::set_ttl(const std::string& value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.Job.ttl)
}
inline std::string* Job::mutable_ttl() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.Job.ttl)
  return _internal_mutable_ttl();
}
inline const std::string& Job::_internal_ttl() const {
  return ttl_.Get();
}
inline void Job::_internal_set_ttl(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ttl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Job::set_ttl(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  ttl_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.Job.ttl)
}
inline void Job::set_ttl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  ttl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.Job.ttl)
}
inline void Job::set_ttl(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  ttl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.Job.ttl)
}
inline std::string* Job::_internal_mutable_ttl() {
  _has_bits_[0] |= 0x00000004u;
  return ttl_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Job::release_ttl() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.Job.ttl)
  if (!_internal_has_ttl()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ttl_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Job::set_allocated_ttl(std::string* ttl) {
  if (ttl != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ttl_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ttl,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.Job.ttl)
}
inline std::string* Job::unsafe_arena_release_ttl() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.Job.ttl)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return ttl_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Job::unsafe_arena_set_allocated_ttl(
    std::string* ttl) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ttl != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ttl_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ttl, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.Job.ttl)
}

// .google.protobuf.Any data = 6[json_name = "data"];
inline bool Job::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Job::has_data() const {
  return _internal_has_data();
}
inline const PROTOBUF_NAMESPACE_ID::Any& Job::_internal_data() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& Job::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.Job.data)
  return _internal_data();
}
inline void Job::unsafe_arena_set_allocated_data(
    PROTOBUF_NAMESPACE_ID::Any* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.Job.data)
}
inline PROTOBUF_NAMESPACE_ID::Any* Job::release_data() {
  auto temp = unsafe_arena_release_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Job::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.Job.data)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Job::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    data_ = p;
  }
  return data_;
}
inline PROTOBUF_NAMESPACE_ID::Any* Job::mutable_data() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.Job.data)
  return _internal_mutable_data();
}
inline void Job::set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.Job.data)
}

// -------------------------------------------------------------------

// ScheduleJobRequest

// .dapr.proto.runtime.v1.Job job = 1;
inline bool ScheduleJobRequest::_internal_has_job() const {
  return this != internal_default_instance() && job_ != nullptr;
}
inline bool ScheduleJobRequest::has_job() const {
  return _internal_has_job();
}
inline void ScheduleJobRequest::clear_job() {
  if (GetArena() == nullptr && job_ != nullptr) {
    delete job_;
  }
  job_ = nullptr;
}
inline const ::dapr::proto::runtime::v1::Job& ScheduleJobRequest::_internal_job() const {
  const ::dapr::proto::runtime::v1::Job* p = job_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dapr::proto::runtime::v1::Job*>(
      &::dapr::proto::runtime::v1::_Job_default_instance_);
}
inline const ::dapr::proto::runtime::v1::Job& ScheduleJobRequest::job() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.ScheduleJobRequest.job)
  return _internal_job();
}
inline void ScheduleJobRequest::unsafe_arena_set_allocated_job(
    ::dapr::proto::runtime::v1::Job* job) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(job_);
  }
  job_ = job;
  if (job) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.ScheduleJobRequest.job)
}
inline ::dapr::proto::runtime::v1::Job* ScheduleJobRequest::release_job() {
  auto temp = unsafe_arena_release_job();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dapr::proto::runtime::v1::Job* ScheduleJobRequest::unsafe_arena_release_job() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.ScheduleJobRequest.job)
  
  ::dapr::proto::runtime::v1::Job* temp = job_;
  job_ = nullptr;
  return temp;
}
inline ::dapr::proto::runtime::v1::Job* ScheduleJobRequest::_internal_mutable_job() {
  
  if (job_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::runtime::v1::Job>(GetArena());
    job_ = p;
  }
  return job_;
}
inline ::dapr::proto::runtime::v1::Job* ScheduleJobRequest::mutable_job() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.ScheduleJobRequest.job)
  return _internal_mutable_job();
}
inline void ScheduleJobRequest::set_allocated_job(::dapr::proto::runtime::v1::Job* job) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete job_;
  }
  if (job) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(job);
    if (message_arena != submessage_arena) {
      job = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, job, submessage_arena);
    }
    
  } else {
    
  }
  job_ = job;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.ScheduleJobRequest.job)
}

// -------------------------------------------------------------------

// ScheduleJobResponse

// -------------------------------------------------------------------

// GetJobRequest

// string name = 1;
inline void GetJobRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetJobRequest::name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetJobRequest.name)
  return _internal_name();
}
inline void GetJobRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.GetJobRequest.name)
}
inline std::string* GetJobRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetJobRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetJobRequest::_internal_name() const {
  return name_.Get();
}
inline void GetJobRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetJobRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.GetJobRequest.name)
}
inline void GetJobRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.GetJobRequest.name)
}
inline void GetJobRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.GetJobRequest.name)
}
inline std::string* GetJobRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetJobRequest::release_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetJobRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetJobRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetJobRequest.name)
}
inline std::string* GetJobRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.GetJobRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetJobRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetJobRequest.name)
}

// -------------------------------------------------------------------

// GetJobResponse

// .dapr.proto.runtime.v1.Job job = 1;
inline bool GetJobResponse::_internal_has_job() const {
  return this != internal_default_instance() && job_ != nullptr;
}
inline bool GetJobResponse::has_job() const {
  return _internal_has_job();
}
inline void GetJobResponse::clear_job() {
  if (GetArena() == nullptr && job_ != nullptr) {
    delete job_;
  }
  job_ = nullptr;
}
inline const ::dapr::proto::runtime::v1::Job& GetJobResponse::_internal_job() const {
  const ::dapr::proto::runtime::v1::Job* p = job_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dapr::proto::runtime::v1::Job*>(
      &::dapr::proto::runtime::v1::_Job_default_instance_);
}
inline const ::dapr::proto::runtime::v1::Job& GetJobResponse::job() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.GetJobResponse.job)
  return _internal_job();
}
inline void GetJobResponse::unsafe_arena_set_allocated_job(
    ::dapr::proto::runtime::v1::Job* job) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(job_);
  }
  job_ = job;
  if (job) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.GetJobResponse.job)
}
inline ::dapr::proto::runtime::v1::Job* GetJobResponse::release_job() {
  auto temp = unsafe_arena_release_job();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dapr::proto::runtime::v1::Job* GetJobResponse::unsafe_arena_release_job() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.GetJobResponse.job)
  
  ::dapr::proto::runtime::v1::Job* temp = job_;
  job_ = nullptr;
  return temp;
}
inline ::dapr::proto::runtime::v1::Job* GetJobResponse::_internal_mutable_job() {
  
  if (job_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::runtime::v1::Job>(GetArena());
    job_ = p;
  }
  return job_;
}
inline ::dapr::proto::runtime::v1::Job* GetJobResponse::mutable_job() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.GetJobResponse.job)
  return _internal_mutable_job();
}
inline void GetJobResponse::set_allocated_job(::dapr::proto::runtime::v1::Job* job) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete job_;
  }
  if (job) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(job);
    if (message_arena != submessage_arena) {
      job = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, job, submessage_arena);
    }
    
  } else {
    
  }
  job_ = job;
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.GetJobResponse.job)
}

// -------------------------------------------------------------------

// DeleteJobRequest

// string name = 1;
inline void DeleteJobRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteJobRequest::name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.DeleteJobRequest.name)
  return _internal_name();
}
inline void DeleteJobRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.DeleteJobRequest.name)
}
inline std::string* DeleteJobRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.DeleteJobRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteJobRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteJobRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteJobRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.DeleteJobRequest.name)
}
inline void DeleteJobRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.DeleteJobRequest.name)
}
inline void DeleteJobRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.DeleteJobRequest.name)
}
inline std::string* DeleteJobRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteJobRequest::release_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.DeleteJobRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteJobRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.DeleteJobRequest.name)
}
inline std::string* DeleteJobRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.DeleteJobRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteJobRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.DeleteJobRequest.name)
}

// -------------------------------------------------------------------

// DeleteJobResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace runtime
}  // namespace proto
}  // namespace dapr

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::dapr::proto::runtime::v1::ActorRuntime_ActorRuntimeStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dapr::proto::runtime::v1::ActorRuntime_ActorRuntimeStatus>() {
  return ::dapr::proto::runtime::v1::ActorRuntime_ActorRuntimeStatus_descriptor();
}
template <> struct is_proto_enum< ::dapr::proto::runtime::v1::UnlockResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dapr::proto::runtime::v1::UnlockResponse_Status>() {
  return ::dapr::proto::runtime::v1::UnlockResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::dapr::proto::runtime::v1::SubtleGetKeyRequest_KeyFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dapr::proto::runtime::v1::SubtleGetKeyRequest_KeyFormat>() {
  return ::dapr::proto::runtime::v1::SubtleGetKeyRequest_KeyFormat_descriptor();
}
template <> struct is_proto_enum< ::dapr::proto::runtime::v1::PubsubSubscriptionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dapr::proto::runtime::v1::PubsubSubscriptionType>() {
  return ::dapr::proto::runtime::v1::PubsubSubscriptionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dapr_2fproto_2fruntime_2fv1_2fdapr_2eproto
