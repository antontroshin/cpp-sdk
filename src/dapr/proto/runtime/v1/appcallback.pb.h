// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dapr/proto/runtime/v1/appcallback.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
#include "dapr/proto/common/v1/common.pb.h"
#include "google/protobuf/struct.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto;
namespace dapr {
namespace proto {
namespace runtime {
namespace v1 {
class BindingEventRequest;
struct BindingEventRequestDefaultTypeInternal;
extern BindingEventRequestDefaultTypeInternal _BindingEventRequest_default_instance_;
class BindingEventRequest_MetadataEntry_DoNotUse;
struct BindingEventRequest_MetadataEntry_DoNotUseDefaultTypeInternal;
extern BindingEventRequest_MetadataEntry_DoNotUseDefaultTypeInternal _BindingEventRequest_MetadataEntry_DoNotUse_default_instance_;
class BindingEventResponse;
struct BindingEventResponseDefaultTypeInternal;
extern BindingEventResponseDefaultTypeInternal _BindingEventResponse_default_instance_;
class BulkSubscribeConfig;
struct BulkSubscribeConfigDefaultTypeInternal;
extern BulkSubscribeConfigDefaultTypeInternal _BulkSubscribeConfig_default_instance_;
class HealthCheckResponse;
struct HealthCheckResponseDefaultTypeInternal;
extern HealthCheckResponseDefaultTypeInternal _HealthCheckResponse_default_instance_;
class ListInputBindingsResponse;
struct ListInputBindingsResponseDefaultTypeInternal;
extern ListInputBindingsResponseDefaultTypeInternal _ListInputBindingsResponse_default_instance_;
class ListTopicSubscriptionsResponse;
struct ListTopicSubscriptionsResponseDefaultTypeInternal;
extern ListTopicSubscriptionsResponseDefaultTypeInternal _ListTopicSubscriptionsResponse_default_instance_;
class TopicEventBulkRequest;
struct TopicEventBulkRequestDefaultTypeInternal;
extern TopicEventBulkRequestDefaultTypeInternal _TopicEventBulkRequest_default_instance_;
class TopicEventBulkRequestEntry;
struct TopicEventBulkRequestEntryDefaultTypeInternal;
extern TopicEventBulkRequestEntryDefaultTypeInternal _TopicEventBulkRequestEntry_default_instance_;
class TopicEventBulkRequestEntry_MetadataEntry_DoNotUse;
struct TopicEventBulkRequestEntry_MetadataEntry_DoNotUseDefaultTypeInternal;
extern TopicEventBulkRequestEntry_MetadataEntry_DoNotUseDefaultTypeInternal _TopicEventBulkRequestEntry_MetadataEntry_DoNotUse_default_instance_;
class TopicEventBulkRequest_MetadataEntry_DoNotUse;
struct TopicEventBulkRequest_MetadataEntry_DoNotUseDefaultTypeInternal;
extern TopicEventBulkRequest_MetadataEntry_DoNotUseDefaultTypeInternal _TopicEventBulkRequest_MetadataEntry_DoNotUse_default_instance_;
class TopicEventBulkResponse;
struct TopicEventBulkResponseDefaultTypeInternal;
extern TopicEventBulkResponseDefaultTypeInternal _TopicEventBulkResponse_default_instance_;
class TopicEventBulkResponseEntry;
struct TopicEventBulkResponseEntryDefaultTypeInternal;
extern TopicEventBulkResponseEntryDefaultTypeInternal _TopicEventBulkResponseEntry_default_instance_;
class TopicEventCERequest;
struct TopicEventCERequestDefaultTypeInternal;
extern TopicEventCERequestDefaultTypeInternal _TopicEventCERequest_default_instance_;
class TopicEventRequest;
struct TopicEventRequestDefaultTypeInternal;
extern TopicEventRequestDefaultTypeInternal _TopicEventRequest_default_instance_;
class TopicEventResponse;
struct TopicEventResponseDefaultTypeInternal;
extern TopicEventResponseDefaultTypeInternal _TopicEventResponse_default_instance_;
class TopicRoutes;
struct TopicRoutesDefaultTypeInternal;
extern TopicRoutesDefaultTypeInternal _TopicRoutes_default_instance_;
class TopicRule;
struct TopicRuleDefaultTypeInternal;
extern TopicRuleDefaultTypeInternal _TopicRule_default_instance_;
class TopicSubscription;
struct TopicSubscriptionDefaultTypeInternal;
extern TopicSubscriptionDefaultTypeInternal _TopicSubscription_default_instance_;
class TopicSubscription_MetadataEntry_DoNotUse;
struct TopicSubscription_MetadataEntry_DoNotUseDefaultTypeInternal;
extern TopicSubscription_MetadataEntry_DoNotUseDefaultTypeInternal _TopicSubscription_MetadataEntry_DoNotUse_default_instance_;
}  // namespace v1
}  // namespace runtime
}  // namespace proto
}  // namespace dapr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace dapr {
namespace proto {
namespace runtime {
namespace v1 {
enum TopicEventResponse_TopicEventResponseStatus : int {
  TopicEventResponse_TopicEventResponseStatus_SUCCESS = 0,
  TopicEventResponse_TopicEventResponseStatus_RETRY = 1,
  TopicEventResponse_TopicEventResponseStatus_DROP = 2,
  TopicEventResponse_TopicEventResponseStatus_TopicEventResponse_TopicEventResponseStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TopicEventResponse_TopicEventResponseStatus_TopicEventResponse_TopicEventResponseStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TopicEventResponse_TopicEventResponseStatus_IsValid(int value);
constexpr TopicEventResponse_TopicEventResponseStatus TopicEventResponse_TopicEventResponseStatus_TopicEventResponseStatus_MIN = static_cast<TopicEventResponse_TopicEventResponseStatus>(0);
constexpr TopicEventResponse_TopicEventResponseStatus TopicEventResponse_TopicEventResponseStatus_TopicEventResponseStatus_MAX = static_cast<TopicEventResponse_TopicEventResponseStatus>(2);
constexpr int TopicEventResponse_TopicEventResponseStatus_TopicEventResponseStatus_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
TopicEventResponse_TopicEventResponseStatus_descriptor();
template <typename T>
const std::string& TopicEventResponse_TopicEventResponseStatus_Name(T value) {
  static_assert(std::is_same<T, TopicEventResponse_TopicEventResponseStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TopicEventResponseStatus_Name().");
  return TopicEventResponse_TopicEventResponseStatus_Name(static_cast<TopicEventResponse_TopicEventResponseStatus>(value));
}
template <>
inline const std::string& TopicEventResponse_TopicEventResponseStatus_Name(TopicEventResponse_TopicEventResponseStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TopicEventResponse_TopicEventResponseStatus_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TopicEventResponse_TopicEventResponseStatus_Parse(absl::string_view name, TopicEventResponse_TopicEventResponseStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TopicEventResponse_TopicEventResponseStatus>(
      TopicEventResponse_TopicEventResponseStatus_descriptor(), name, value);
}
enum BindingEventResponse_BindingEventConcurrency : int {
  BindingEventResponse_BindingEventConcurrency_SEQUENTIAL = 0,
  BindingEventResponse_BindingEventConcurrency_PARALLEL = 1,
  BindingEventResponse_BindingEventConcurrency_BindingEventResponse_BindingEventConcurrency_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  BindingEventResponse_BindingEventConcurrency_BindingEventResponse_BindingEventConcurrency_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool BindingEventResponse_BindingEventConcurrency_IsValid(int value);
constexpr BindingEventResponse_BindingEventConcurrency BindingEventResponse_BindingEventConcurrency_BindingEventConcurrency_MIN = static_cast<BindingEventResponse_BindingEventConcurrency>(0);
constexpr BindingEventResponse_BindingEventConcurrency BindingEventResponse_BindingEventConcurrency_BindingEventConcurrency_MAX = static_cast<BindingEventResponse_BindingEventConcurrency>(1);
constexpr int BindingEventResponse_BindingEventConcurrency_BindingEventConcurrency_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
BindingEventResponse_BindingEventConcurrency_descriptor();
template <typename T>
const std::string& BindingEventResponse_BindingEventConcurrency_Name(T value) {
  static_assert(std::is_same<T, BindingEventResponse_BindingEventConcurrency>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BindingEventConcurrency_Name().");
  return BindingEventResponse_BindingEventConcurrency_Name(static_cast<BindingEventResponse_BindingEventConcurrency>(value));
}
template <>
inline const std::string& BindingEventResponse_BindingEventConcurrency_Name(BindingEventResponse_BindingEventConcurrency value) {
  return ::google::protobuf::internal::NameOfDenseEnum<BindingEventResponse_BindingEventConcurrency_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool BindingEventResponse_BindingEventConcurrency_Parse(absl::string_view name, BindingEventResponse_BindingEventConcurrency* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BindingEventResponse_BindingEventConcurrency>(
      BindingEventResponse_BindingEventConcurrency_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TopicEventRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.TopicEventRequest) */ {
 public:
  inline TopicEventRequest() : TopicEventRequest(nullptr) {}
  ~TopicEventRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TopicEventRequest(::google::protobuf::internal::ConstantInitialized);

  TopicEventRequest(const TopicEventRequest& from);
  TopicEventRequest(TopicEventRequest&& from) noexcept
    : TopicEventRequest() {
    *this = ::std::move(from);
  }

  inline TopicEventRequest& operator=(const TopicEventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicEventRequest& operator=(TopicEventRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicEventRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicEventRequest* internal_default_instance() {
    return reinterpret_cast<const TopicEventRequest*>(
               &_TopicEventRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TopicEventRequest& a, TopicEventRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicEventRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicEventRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicEventRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicEventRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TopicEventRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TopicEventRequest& from) {
    TopicEventRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicEventRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.runtime.v1.TopicEventRequest";
  }
  protected:
  explicit TopicEventRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSourceFieldNumber = 2,
    kTypeFieldNumber = 3,
    kSpecVersionFieldNumber = 4,
    kDataContentTypeFieldNumber = 5,
    kTopicFieldNumber = 6,
    kDataFieldNumber = 7,
    kPubsubNameFieldNumber = 8,
    kPathFieldNumber = 9,
    kExtensionsFieldNumber = 10,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string source = 2;
  void clear_source() ;
  const std::string& source() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source(Arg_&& arg, Args_... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* ptr);

  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(
      const std::string& value);
  std::string* _internal_mutable_source();

  public:
  // string type = 3;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* ptr);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // string spec_version = 4;
  void clear_spec_version() ;
  const std::string& spec_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_spec_version(Arg_&& arg, Args_... args);
  std::string* mutable_spec_version();
  PROTOBUF_NODISCARD std::string* release_spec_version();
  void set_allocated_spec_version(std::string* ptr);

  private:
  const std::string& _internal_spec_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spec_version(
      const std::string& value);
  std::string* _internal_mutable_spec_version();

  public:
  // string data_content_type = 5;
  void clear_data_content_type() ;
  const std::string& data_content_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_content_type(Arg_&& arg, Args_... args);
  std::string* mutable_data_content_type();
  PROTOBUF_NODISCARD std::string* release_data_content_type();
  void set_allocated_data_content_type(std::string* ptr);

  private:
  const std::string& _internal_data_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_content_type(
      const std::string& value);
  std::string* _internal_mutable_data_content_type();

  public:
  // string topic = 6;
  void clear_topic() ;
  const std::string& topic() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topic(Arg_&& arg, Args_... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* ptr);

  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(
      const std::string& value);
  std::string* _internal_mutable_topic();

  public:
  // bytes data = 7;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // string pubsub_name = 8;
  void clear_pubsub_name() ;
  const std::string& pubsub_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pubsub_name(Arg_&& arg, Args_... args);
  std::string* mutable_pubsub_name();
  PROTOBUF_NODISCARD std::string* release_pubsub_name();
  void set_allocated_pubsub_name(std::string* ptr);

  private:
  const std::string& _internal_pubsub_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pubsub_name(
      const std::string& value);
  std::string* _internal_mutable_pubsub_name();

  public:
  // string path = 9;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // .google.protobuf.Struct extensions = 10;
  bool has_extensions() const;
  void clear_extensions() ;
  const ::google::protobuf::Struct& extensions() const;
  PROTOBUF_NODISCARD ::google::protobuf::Struct* release_extensions();
  ::google::protobuf::Struct* mutable_extensions();
  void set_allocated_extensions(::google::protobuf::Struct* value);
  void unsafe_arena_set_allocated_extensions(::google::protobuf::Struct* value);
  ::google::protobuf::Struct* unsafe_arena_release_extensions();

  private:
  const ::google::protobuf::Struct& _internal_extensions() const;
  ::google::protobuf::Struct* _internal_mutable_extensions();

  public:
  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.TopicEventRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 10, 1, 117, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr source_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::ArenaStringPtr spec_version_;
    ::google::protobuf::internal::ArenaStringPtr data_content_type_;
    ::google::protobuf::internal::ArenaStringPtr topic_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::ArenaStringPtr pubsub_name_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::Struct* extensions_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto;
};// -------------------------------------------------------------------

class TopicEventResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.TopicEventResponse) */ {
 public:
  inline TopicEventResponse() : TopicEventResponse(nullptr) {}
  ~TopicEventResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TopicEventResponse(::google::protobuf::internal::ConstantInitialized);

  TopicEventResponse(const TopicEventResponse& from);
  TopicEventResponse(TopicEventResponse&& from) noexcept
    : TopicEventResponse() {
    *this = ::std::move(from);
  }

  inline TopicEventResponse& operator=(const TopicEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicEventResponse& operator=(TopicEventResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicEventResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicEventResponse* internal_default_instance() {
    return reinterpret_cast<const TopicEventResponse*>(
               &_TopicEventResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TopicEventResponse& a, TopicEventResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicEventResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicEventResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicEventResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicEventResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TopicEventResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TopicEventResponse& from) {
    TopicEventResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicEventResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.runtime.v1.TopicEventResponse";
  }
  protected:
  explicit TopicEventResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using TopicEventResponseStatus = TopicEventResponse_TopicEventResponseStatus;
  static constexpr TopicEventResponseStatus SUCCESS = TopicEventResponse_TopicEventResponseStatus_SUCCESS;
  static constexpr TopicEventResponseStatus RETRY = TopicEventResponse_TopicEventResponseStatus_RETRY;
  static constexpr TopicEventResponseStatus DROP = TopicEventResponse_TopicEventResponseStatus_DROP;
  static inline bool TopicEventResponseStatus_IsValid(int value) {
    return TopicEventResponse_TopicEventResponseStatus_IsValid(value);
  }
  static constexpr TopicEventResponseStatus TopicEventResponseStatus_MIN = TopicEventResponse_TopicEventResponseStatus_TopicEventResponseStatus_MIN;
  static constexpr TopicEventResponseStatus TopicEventResponseStatus_MAX = TopicEventResponse_TopicEventResponseStatus_TopicEventResponseStatus_MAX;
  static constexpr int TopicEventResponseStatus_ARRAYSIZE = TopicEventResponse_TopicEventResponseStatus_TopicEventResponseStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* TopicEventResponseStatus_descriptor() {
    return TopicEventResponse_TopicEventResponseStatus_descriptor();
  }
  template <typename T>
  static inline const std::string& TopicEventResponseStatus_Name(T value) {
    return TopicEventResponse_TopicEventResponseStatus_Name(value);
  }
  static inline bool TopicEventResponseStatus_Parse(absl::string_view name, TopicEventResponseStatus* value) {
    return TopicEventResponse_TopicEventResponseStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .dapr.proto.runtime.v1.TopicEventResponse.TopicEventResponseStatus status = 1;
  void clear_status() ;
  ::dapr::proto::runtime::v1::TopicEventResponse_TopicEventResponseStatus status() const;
  void set_status(::dapr::proto::runtime::v1::TopicEventResponse_TopicEventResponseStatus value);

  private:
  ::dapr::proto::runtime::v1::TopicEventResponse_TopicEventResponseStatus _internal_status() const;
  void _internal_set_status(::dapr::proto::runtime::v1::TopicEventResponse_TopicEventResponseStatus value);

  public:
  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.TopicEventResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto;
};// -------------------------------------------------------------------

class TopicEventCERequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.TopicEventCERequest) */ {
 public:
  inline TopicEventCERequest() : TopicEventCERequest(nullptr) {}
  ~TopicEventCERequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TopicEventCERequest(::google::protobuf::internal::ConstantInitialized);

  TopicEventCERequest(const TopicEventCERequest& from);
  TopicEventCERequest(TopicEventCERequest&& from) noexcept
    : TopicEventCERequest() {
    *this = ::std::move(from);
  }

  inline TopicEventCERequest& operator=(const TopicEventCERequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicEventCERequest& operator=(TopicEventCERequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicEventCERequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicEventCERequest* internal_default_instance() {
    return reinterpret_cast<const TopicEventCERequest*>(
               &_TopicEventCERequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TopicEventCERequest& a, TopicEventCERequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicEventCERequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicEventCERequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicEventCERequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicEventCERequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TopicEventCERequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TopicEventCERequest& from) {
    TopicEventCERequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicEventCERequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.runtime.v1.TopicEventCERequest";
  }
  protected:
  explicit TopicEventCERequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSourceFieldNumber = 2,
    kTypeFieldNumber = 3,
    kSpecVersionFieldNumber = 4,
    kDataContentTypeFieldNumber = 5,
    kDataFieldNumber = 6,
    kExtensionsFieldNumber = 7,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string source = 2;
  void clear_source() ;
  const std::string& source() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source(Arg_&& arg, Args_... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* ptr);

  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(
      const std::string& value);
  std::string* _internal_mutable_source();

  public:
  // string type = 3;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* ptr);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // string spec_version = 4;
  void clear_spec_version() ;
  const std::string& spec_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_spec_version(Arg_&& arg, Args_... args);
  std::string* mutable_spec_version();
  PROTOBUF_NODISCARD std::string* release_spec_version();
  void set_allocated_spec_version(std::string* ptr);

  private:
  const std::string& _internal_spec_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spec_version(
      const std::string& value);
  std::string* _internal_mutable_spec_version();

  public:
  // string data_content_type = 5;
  void clear_data_content_type() ;
  const std::string& data_content_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_content_type(Arg_&& arg, Args_... args);
  std::string* mutable_data_content_type();
  PROTOBUF_NODISCARD std::string* release_data_content_type();
  void set_allocated_data_content_type(std::string* ptr);

  private:
  const std::string& _internal_data_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_content_type(
      const std::string& value);
  std::string* _internal_mutable_data_content_type();

  public:
  // bytes data = 6;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // .google.protobuf.Struct extensions = 7;
  bool has_extensions() const;
  void clear_extensions() ;
  const ::google::protobuf::Struct& extensions() const;
  PROTOBUF_NODISCARD ::google::protobuf::Struct* release_extensions();
  ::google::protobuf::Struct* mutable_extensions();
  void set_allocated_extensions(::google::protobuf::Struct* value);
  void unsafe_arena_set_allocated_extensions(::google::protobuf::Struct* value);
  ::google::protobuf::Struct* unsafe_arena_release_extensions();

  private:
  const ::google::protobuf::Struct& _internal_extensions() const;
  ::google::protobuf::Struct* _internal_mutable_extensions();

  public:
  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.TopicEventCERequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7, 1, 91, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr source_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::ArenaStringPtr spec_version_;
    ::google::protobuf::internal::ArenaStringPtr data_content_type_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::Struct* extensions_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto;
};// -------------------------------------------------------------------

class TopicEventBulkRequestEntry_MetadataEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<TopicEventBulkRequestEntry_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::google::protobuf::internal::MapEntry<TopicEventBulkRequestEntry_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> SuperType;
  TopicEventBulkRequestEntry_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TopicEventBulkRequestEntry_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit TopicEventBulkRequestEntry_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TopicEventBulkRequestEntry_MetadataEntry_DoNotUse& other);
  static const TopicEventBulkRequestEntry_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TopicEventBulkRequestEntry_MetadataEntry_DoNotUse*>(&_TopicEventBulkRequestEntry_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.TopicEventBulkRequestEntry.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.TopicEventBulkRequestEntry.MetadataEntry.value");
 }
  using ::google::protobuf::Message::MergeFrom;
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto;
};
// -------------------------------------------------------------------

class TopicEventBulkRequestEntry final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.TopicEventBulkRequestEntry) */ {
 public:
  inline TopicEventBulkRequestEntry() : TopicEventBulkRequestEntry(nullptr) {}
  ~TopicEventBulkRequestEntry() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TopicEventBulkRequestEntry(::google::protobuf::internal::ConstantInitialized);

  TopicEventBulkRequestEntry(const TopicEventBulkRequestEntry& from);
  TopicEventBulkRequestEntry(TopicEventBulkRequestEntry&& from) noexcept
    : TopicEventBulkRequestEntry() {
    *this = ::std::move(from);
  }

  inline TopicEventBulkRequestEntry& operator=(const TopicEventBulkRequestEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicEventBulkRequestEntry& operator=(TopicEventBulkRequestEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicEventBulkRequestEntry& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kBytes = 2,
    kCloudEvent = 3,
    EVENT_NOT_SET = 0,
  };

  static inline const TopicEventBulkRequestEntry* internal_default_instance() {
    return reinterpret_cast<const TopicEventBulkRequestEntry*>(
               &_TopicEventBulkRequestEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TopicEventBulkRequestEntry& a, TopicEventBulkRequestEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicEventBulkRequestEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicEventBulkRequestEntry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicEventBulkRequestEntry* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicEventBulkRequestEntry>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TopicEventBulkRequestEntry& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TopicEventBulkRequestEntry& from) {
    TopicEventBulkRequestEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicEventBulkRequestEntry* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.runtime.v1.TopicEventBulkRequestEntry";
  }
  protected:
  explicit TopicEventBulkRequestEntry(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 5,
    kEntryIdFieldNumber = 1,
    kContentTypeFieldNumber = 4,
    kBytesFieldNumber = 2,
    kCloudEventFieldNumber = 3,
  };
  // map<string, string> metadata = 5;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string entry_id = 1;
  void clear_entry_id() ;
  const std::string& entry_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_entry_id(Arg_&& arg, Args_... args);
  std::string* mutable_entry_id();
  PROTOBUF_NODISCARD std::string* release_entry_id();
  void set_allocated_entry_id(std::string* ptr);

  private:
  const std::string& _internal_entry_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entry_id(
      const std::string& value);
  std::string* _internal_mutable_entry_id();

  public:
  // string content_type = 4;
  void clear_content_type() ;
  const std::string& content_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content_type(Arg_&& arg, Args_... args);
  std::string* mutable_content_type();
  PROTOBUF_NODISCARD std::string* release_content_type();
  void set_allocated_content_type(std::string* ptr);

  private:
  const std::string& _internal_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_type(
      const std::string& value);
  std::string* _internal_mutable_content_type();

  public:
  // bytes bytes = 2;
  bool has_bytes() const;
  void clear_bytes() ;
  const std::string& bytes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_bytes();
  PROTOBUF_NODISCARD std::string* release_bytes();
  void set_allocated_bytes(std::string* ptr);

  private:
  const std::string& _internal_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes(
      const std::string& value);
  std::string* _internal_mutable_bytes();

  public:
  // .dapr.proto.runtime.v1.TopicEventCERequest cloud_event = 3;
  bool has_cloud_event() const;
  private:
  bool _internal_has_cloud_event() const;

  public:
  void clear_cloud_event() ;
  const ::dapr::proto::runtime::v1::TopicEventCERequest& cloud_event() const;
  PROTOBUF_NODISCARD ::dapr::proto::runtime::v1::TopicEventCERequest* release_cloud_event();
  ::dapr::proto::runtime::v1::TopicEventCERequest* mutable_cloud_event();
  void set_allocated_cloud_event(::dapr::proto::runtime::v1::TopicEventCERequest* value);
  void unsafe_arena_set_allocated_cloud_event(::dapr::proto::runtime::v1::TopicEventCERequest* value);
  ::dapr::proto::runtime::v1::TopicEventCERequest* unsafe_arena_release_cloud_event();

  private:
  const ::dapr::proto::runtime::v1::TopicEventCERequest& _internal_cloud_event() const;
  ::dapr::proto::runtime::v1::TopicEventCERequest* _internal_mutable_cloud_event();

  public:
  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.TopicEventBulkRequestEntry)
 private:
  class _Internal;
  void set_has_bytes();
  void set_has_cloud_event();

  inline bool has_event() const;
  inline void clear_has_event();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 5, 2, 85, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::MapField<TopicEventBulkRequestEntry_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr entry_id_;
    ::google::protobuf::internal::ArenaStringPtr content_type_;
    union EventUnion {
      constexpr EventUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr bytes_;
      ::dapr::proto::runtime::v1::TopicEventCERequest* cloud_event_;
    } event_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto;
};// -------------------------------------------------------------------

class TopicEventBulkRequest_MetadataEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<TopicEventBulkRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::google::protobuf::internal::MapEntry<TopicEventBulkRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> SuperType;
  TopicEventBulkRequest_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TopicEventBulkRequest_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit TopicEventBulkRequest_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TopicEventBulkRequest_MetadataEntry_DoNotUse& other);
  static const TopicEventBulkRequest_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TopicEventBulkRequest_MetadataEntry_DoNotUse*>(&_TopicEventBulkRequest_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.TopicEventBulkRequest.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.TopicEventBulkRequest.MetadataEntry.value");
 }
  using ::google::protobuf::Message::MergeFrom;
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto;
};
// -------------------------------------------------------------------

class TopicEventBulkRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.TopicEventBulkRequest) */ {
 public:
  inline TopicEventBulkRequest() : TopicEventBulkRequest(nullptr) {}
  ~TopicEventBulkRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TopicEventBulkRequest(::google::protobuf::internal::ConstantInitialized);

  TopicEventBulkRequest(const TopicEventBulkRequest& from);
  TopicEventBulkRequest(TopicEventBulkRequest&& from) noexcept
    : TopicEventBulkRequest() {
    *this = ::std::move(from);
  }

  inline TopicEventBulkRequest& operator=(const TopicEventBulkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicEventBulkRequest& operator=(TopicEventBulkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicEventBulkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicEventBulkRequest* internal_default_instance() {
    return reinterpret_cast<const TopicEventBulkRequest*>(
               &_TopicEventBulkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TopicEventBulkRequest& a, TopicEventBulkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicEventBulkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicEventBulkRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicEventBulkRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicEventBulkRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TopicEventBulkRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TopicEventBulkRequest& from) {
    TopicEventBulkRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicEventBulkRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.runtime.v1.TopicEventBulkRequest";
  }
  protected:
  explicit TopicEventBulkRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kMetadataFieldNumber = 3,
    kIdFieldNumber = 1,
    kTopicFieldNumber = 4,
    kPubsubNameFieldNumber = 5,
    kTypeFieldNumber = 6,
    kPathFieldNumber = 7,
  };
  // repeated .dapr.proto.runtime.v1.TopicEventBulkRequestEntry entries = 2;
  int entries_size() const;
  private:
  int _internal_entries_size() const;

  public:
  void clear_entries() ;
  ::dapr::proto::runtime::v1::TopicEventBulkRequestEntry* mutable_entries(int index);
  ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicEventBulkRequestEntry >*
      mutable_entries();
  private:
  const ::google::protobuf::RepeatedPtrField<::dapr::proto::runtime::v1::TopicEventBulkRequestEntry>& _internal_entries() const;
  ::google::protobuf::RepeatedPtrField<::dapr::proto::runtime::v1::TopicEventBulkRequestEntry>* _internal_mutable_entries();
  public:
  const ::dapr::proto::runtime::v1::TopicEventBulkRequestEntry& entries(int index) const;
  ::dapr::proto::runtime::v1::TopicEventBulkRequestEntry* add_entries();
  const ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicEventBulkRequestEntry >&
      entries() const;
  // map<string, string> metadata = 3;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string topic = 4;
  void clear_topic() ;
  const std::string& topic() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topic(Arg_&& arg, Args_... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* ptr);

  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(
      const std::string& value);
  std::string* _internal_mutable_topic();

  public:
  // string pubsub_name = 5;
  void clear_pubsub_name() ;
  const std::string& pubsub_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pubsub_name(Arg_&& arg, Args_... args);
  std::string* mutable_pubsub_name();
  PROTOBUF_NODISCARD std::string* release_pubsub_name();
  void set_allocated_pubsub_name(std::string* ptr);

  private:
  const std::string& _internal_pubsub_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pubsub_name(
      const std::string& value);
  std::string* _internal_mutable_pubsub_name();

  public:
  // string type = 6;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* ptr);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // string path = 7;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.TopicEventBulkRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7, 2, 86, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicEventBulkRequestEntry > entries_;
    ::google::protobuf::internal::MapField<TopicEventBulkRequest_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr topic_;
    ::google::protobuf::internal::ArenaStringPtr pubsub_name_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto;
};// -------------------------------------------------------------------

class TopicEventBulkResponseEntry final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.TopicEventBulkResponseEntry) */ {
 public:
  inline TopicEventBulkResponseEntry() : TopicEventBulkResponseEntry(nullptr) {}
  ~TopicEventBulkResponseEntry() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TopicEventBulkResponseEntry(::google::protobuf::internal::ConstantInitialized);

  TopicEventBulkResponseEntry(const TopicEventBulkResponseEntry& from);
  TopicEventBulkResponseEntry(TopicEventBulkResponseEntry&& from) noexcept
    : TopicEventBulkResponseEntry() {
    *this = ::std::move(from);
  }

  inline TopicEventBulkResponseEntry& operator=(const TopicEventBulkResponseEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicEventBulkResponseEntry& operator=(TopicEventBulkResponseEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicEventBulkResponseEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicEventBulkResponseEntry* internal_default_instance() {
    return reinterpret_cast<const TopicEventBulkResponseEntry*>(
               &_TopicEventBulkResponseEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TopicEventBulkResponseEntry& a, TopicEventBulkResponseEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicEventBulkResponseEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicEventBulkResponseEntry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicEventBulkResponseEntry* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicEventBulkResponseEntry>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TopicEventBulkResponseEntry& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TopicEventBulkResponseEntry& from) {
    TopicEventBulkResponseEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicEventBulkResponseEntry* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.runtime.v1.TopicEventBulkResponseEntry";
  }
  protected:
  explicit TopicEventBulkResponseEntry(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string entry_id = 1;
  void clear_entry_id() ;
  const std::string& entry_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_entry_id(Arg_&& arg, Args_... args);
  std::string* mutable_entry_id();
  PROTOBUF_NODISCARD std::string* release_entry_id();
  void set_allocated_entry_id(std::string* ptr);

  private:
  const std::string& _internal_entry_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entry_id(
      const std::string& value);
  std::string* _internal_mutable_entry_id();

  public:
  // .dapr.proto.runtime.v1.TopicEventResponse.TopicEventResponseStatus status = 2;
  void clear_status() ;
  ::dapr::proto::runtime::v1::TopicEventResponse_TopicEventResponseStatus status() const;
  void set_status(::dapr::proto::runtime::v1::TopicEventResponse_TopicEventResponseStatus value);

  private:
  ::dapr::proto::runtime::v1::TopicEventResponse_TopicEventResponseStatus _internal_status() const;
  void _internal_set_status(::dapr::proto::runtime::v1::TopicEventResponse_TopicEventResponseStatus value);

  public:
  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.TopicEventBulkResponseEntry)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 66, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr entry_id_;
    int status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto;
};// -------------------------------------------------------------------

class TopicEventBulkResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.TopicEventBulkResponse) */ {
 public:
  inline TopicEventBulkResponse() : TopicEventBulkResponse(nullptr) {}
  ~TopicEventBulkResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TopicEventBulkResponse(::google::protobuf::internal::ConstantInitialized);

  TopicEventBulkResponse(const TopicEventBulkResponse& from);
  TopicEventBulkResponse(TopicEventBulkResponse&& from) noexcept
    : TopicEventBulkResponse() {
    *this = ::std::move(from);
  }

  inline TopicEventBulkResponse& operator=(const TopicEventBulkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicEventBulkResponse& operator=(TopicEventBulkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicEventBulkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicEventBulkResponse* internal_default_instance() {
    return reinterpret_cast<const TopicEventBulkResponse*>(
               &_TopicEventBulkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TopicEventBulkResponse& a, TopicEventBulkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicEventBulkResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicEventBulkResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicEventBulkResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicEventBulkResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TopicEventBulkResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TopicEventBulkResponse& from) {
    TopicEventBulkResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicEventBulkResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.runtime.v1.TopicEventBulkResponse";
  }
  protected:
  explicit TopicEventBulkResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusesFieldNumber = 1,
  };
  // repeated .dapr.proto.runtime.v1.TopicEventBulkResponseEntry statuses = 1;
  int statuses_size() const;
  private:
  int _internal_statuses_size() const;

  public:
  void clear_statuses() ;
  ::dapr::proto::runtime::v1::TopicEventBulkResponseEntry* mutable_statuses(int index);
  ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicEventBulkResponseEntry >*
      mutable_statuses();
  private:
  const ::google::protobuf::RepeatedPtrField<::dapr::proto::runtime::v1::TopicEventBulkResponseEntry>& _internal_statuses() const;
  ::google::protobuf::RepeatedPtrField<::dapr::proto::runtime::v1::TopicEventBulkResponseEntry>* _internal_mutable_statuses();
  public:
  const ::dapr::proto::runtime::v1::TopicEventBulkResponseEntry& statuses(int index) const;
  ::dapr::proto::runtime::v1::TopicEventBulkResponseEntry* add_statuses();
  const ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicEventBulkResponseEntry >&
      statuses() const;
  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.TopicEventBulkResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicEventBulkResponseEntry > statuses_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto;
};// -------------------------------------------------------------------

class BindingEventRequest_MetadataEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<BindingEventRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::google::protobuf::internal::MapEntry<BindingEventRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> SuperType;
  BindingEventRequest_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BindingEventRequest_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit BindingEventRequest_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const BindingEventRequest_MetadataEntry_DoNotUse& other);
  static const BindingEventRequest_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BindingEventRequest_MetadataEntry_DoNotUse*>(&_BindingEventRequest_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.BindingEventRequest.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.BindingEventRequest.MetadataEntry.value");
 }
  using ::google::protobuf::Message::MergeFrom;
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto;
};
// -------------------------------------------------------------------

class BindingEventRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.BindingEventRequest) */ {
 public:
  inline BindingEventRequest() : BindingEventRequest(nullptr) {}
  ~BindingEventRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BindingEventRequest(::google::protobuf::internal::ConstantInitialized);

  BindingEventRequest(const BindingEventRequest& from);
  BindingEventRequest(BindingEventRequest&& from) noexcept
    : BindingEventRequest() {
    *this = ::std::move(from);
  }

  inline BindingEventRequest& operator=(const BindingEventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BindingEventRequest& operator=(BindingEventRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BindingEventRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BindingEventRequest* internal_default_instance() {
    return reinterpret_cast<const BindingEventRequest*>(
               &_BindingEventRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BindingEventRequest& a, BindingEventRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BindingEventRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BindingEventRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BindingEventRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BindingEventRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BindingEventRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BindingEventRequest& from) {
    BindingEventRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BindingEventRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.runtime.v1.BindingEventRequest";
  }
  protected:
  explicit BindingEventRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kNameFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // map<string, string> metadata = 3;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // bytes data = 2;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.BindingEventRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 3, 1, 62, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::MapField<BindingEventRequest_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto;
};// -------------------------------------------------------------------

class BindingEventResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.BindingEventResponse) */ {
 public:
  inline BindingEventResponse() : BindingEventResponse(nullptr) {}
  ~BindingEventResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BindingEventResponse(::google::protobuf::internal::ConstantInitialized);

  BindingEventResponse(const BindingEventResponse& from);
  BindingEventResponse(BindingEventResponse&& from) noexcept
    : BindingEventResponse() {
    *this = ::std::move(from);
  }

  inline BindingEventResponse& operator=(const BindingEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BindingEventResponse& operator=(BindingEventResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BindingEventResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BindingEventResponse* internal_default_instance() {
    return reinterpret_cast<const BindingEventResponse*>(
               &_BindingEventResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BindingEventResponse& a, BindingEventResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BindingEventResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BindingEventResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BindingEventResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BindingEventResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BindingEventResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BindingEventResponse& from) {
    BindingEventResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BindingEventResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.runtime.v1.BindingEventResponse";
  }
  protected:
  explicit BindingEventResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using BindingEventConcurrency = BindingEventResponse_BindingEventConcurrency;
  static constexpr BindingEventConcurrency SEQUENTIAL = BindingEventResponse_BindingEventConcurrency_SEQUENTIAL;
  static constexpr BindingEventConcurrency PARALLEL = BindingEventResponse_BindingEventConcurrency_PARALLEL;
  static inline bool BindingEventConcurrency_IsValid(int value) {
    return BindingEventResponse_BindingEventConcurrency_IsValid(value);
  }
  static constexpr BindingEventConcurrency BindingEventConcurrency_MIN = BindingEventResponse_BindingEventConcurrency_BindingEventConcurrency_MIN;
  static constexpr BindingEventConcurrency BindingEventConcurrency_MAX = BindingEventResponse_BindingEventConcurrency_BindingEventConcurrency_MAX;
  static constexpr int BindingEventConcurrency_ARRAYSIZE = BindingEventResponse_BindingEventConcurrency_BindingEventConcurrency_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* BindingEventConcurrency_descriptor() {
    return BindingEventResponse_BindingEventConcurrency_descriptor();
  }
  template <typename T>
  static inline const std::string& BindingEventConcurrency_Name(T value) {
    return BindingEventResponse_BindingEventConcurrency_Name(value);
  }
  static inline bool BindingEventConcurrency_Parse(absl::string_view name, BindingEventConcurrency* value) {
    return BindingEventResponse_BindingEventConcurrency_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 2,
    kToFieldNumber = 3,
    kStoreNameFieldNumber = 1,
    kDataFieldNumber = 4,
    kConcurrencyFieldNumber = 5,
  };
  // repeated .dapr.proto.common.v1.StateItem states = 2;
  int states_size() const;
  private:
  int _internal_states_size() const;

  public:
  void clear_states() ;
  ::dapr::proto::common::v1::StateItem* mutable_states(int index);
  ::google::protobuf::RepeatedPtrField< ::dapr::proto::common::v1::StateItem >*
      mutable_states();
  private:
  const ::google::protobuf::RepeatedPtrField<::dapr::proto::common::v1::StateItem>& _internal_states() const;
  ::google::protobuf::RepeatedPtrField<::dapr::proto::common::v1::StateItem>* _internal_mutable_states();
  public:
  const ::dapr::proto::common::v1::StateItem& states(int index) const;
  ::dapr::proto::common::v1::StateItem* add_states();
  const ::google::protobuf::RepeatedPtrField< ::dapr::proto::common::v1::StateItem >&
      states() const;
  // repeated string to = 3;
  int to_size() const;
  private:
  int _internal_to_size() const;

  public:
  void clear_to() ;
  const std::string& to(int index) const;
  std::string* mutable_to(int index);
  void set_to(int index, const std::string& value);
  void set_to(int index, std::string&& value);
  void set_to(int index, const char* value);
  void set_to(int index, const char* value, std::size_t size);
  void set_to(int index, absl::string_view value);
  std::string* add_to();
  void add_to(const std::string& value);
  void add_to(std::string&& value);
  void add_to(const char* value);
  void add_to(const char* value, std::size_t size);
  void add_to(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& to() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_to();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_to() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_to();

  public:
  // string store_name = 1;
  void clear_store_name() ;
  const std::string& store_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_store_name(Arg_&& arg, Args_... args);
  std::string* mutable_store_name();
  PROTOBUF_NODISCARD std::string* release_store_name();
  void set_allocated_store_name(std::string* ptr);

  private:
  const std::string& _internal_store_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_store_name(
      const std::string& value);
  std::string* _internal_mutable_store_name();

  public:
  // bytes data = 4;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // .dapr.proto.runtime.v1.BindingEventResponse.BindingEventConcurrency concurrency = 5;
  void clear_concurrency() ;
  ::dapr::proto::runtime::v1::BindingEventResponse_BindingEventConcurrency concurrency() const;
  void set_concurrency(::dapr::proto::runtime::v1::BindingEventResponse_BindingEventConcurrency value);

  private:
  ::dapr::proto::runtime::v1::BindingEventResponse_BindingEventConcurrency _internal_concurrency() const;
  void _internal_set_concurrency(::dapr::proto::runtime::v1::BindingEventResponse_BindingEventConcurrency value);

  public:
  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.BindingEventResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 1, 63, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::dapr::proto::common::v1::StateItem > states_;
    ::google::protobuf::RepeatedPtrField<std::string> to_;
    ::google::protobuf::internal::ArenaStringPtr store_name_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    int concurrency_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto;
};// -------------------------------------------------------------------

class ListTopicSubscriptionsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.ListTopicSubscriptionsResponse) */ {
 public:
  inline ListTopicSubscriptionsResponse() : ListTopicSubscriptionsResponse(nullptr) {}
  ~ListTopicSubscriptionsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListTopicSubscriptionsResponse(::google::protobuf::internal::ConstantInitialized);

  ListTopicSubscriptionsResponse(const ListTopicSubscriptionsResponse& from);
  ListTopicSubscriptionsResponse(ListTopicSubscriptionsResponse&& from) noexcept
    : ListTopicSubscriptionsResponse() {
    *this = ::std::move(from);
  }

  inline ListTopicSubscriptionsResponse& operator=(const ListTopicSubscriptionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTopicSubscriptionsResponse& operator=(ListTopicSubscriptionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTopicSubscriptionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTopicSubscriptionsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTopicSubscriptionsResponse*>(
               &_ListTopicSubscriptionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ListTopicSubscriptionsResponse& a, ListTopicSubscriptionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTopicSubscriptionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTopicSubscriptionsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListTopicSubscriptionsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListTopicSubscriptionsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListTopicSubscriptionsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ListTopicSubscriptionsResponse& from) {
    ListTopicSubscriptionsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTopicSubscriptionsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.runtime.v1.ListTopicSubscriptionsResponse";
  }
  protected:
  explicit ListTopicSubscriptionsResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionsFieldNumber = 1,
  };
  // repeated .dapr.proto.runtime.v1.TopicSubscription subscriptions = 1;
  int subscriptions_size() const;
  private:
  int _internal_subscriptions_size() const;

  public:
  void clear_subscriptions() ;
  ::dapr::proto::runtime::v1::TopicSubscription* mutable_subscriptions(int index);
  ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicSubscription >*
      mutable_subscriptions();
  private:
  const ::google::protobuf::RepeatedPtrField<::dapr::proto::runtime::v1::TopicSubscription>& _internal_subscriptions() const;
  ::google::protobuf::RepeatedPtrField<::dapr::proto::runtime::v1::TopicSubscription>* _internal_mutable_subscriptions();
  public:
  const ::dapr::proto::runtime::v1::TopicSubscription& subscriptions(int index) const;
  ::dapr::proto::runtime::v1::TopicSubscription* add_subscriptions();
  const ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicSubscription >&
      subscriptions() const;
  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.ListTopicSubscriptionsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicSubscription > subscriptions_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto;
};// -------------------------------------------------------------------

class TopicSubscription_MetadataEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<TopicSubscription_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::google::protobuf::internal::MapEntry<TopicSubscription_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> SuperType;
  TopicSubscription_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TopicSubscription_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit TopicSubscription_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TopicSubscription_MetadataEntry_DoNotUse& other);
  static const TopicSubscription_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TopicSubscription_MetadataEntry_DoNotUse*>(&_TopicSubscription_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.TopicSubscription.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "dapr.proto.runtime.v1.TopicSubscription.MetadataEntry.value");
 }
  using ::google::protobuf::Message::MergeFrom;
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto;
};
// -------------------------------------------------------------------

class TopicSubscription final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.TopicSubscription) */ {
 public:
  inline TopicSubscription() : TopicSubscription(nullptr) {}
  ~TopicSubscription() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TopicSubscription(::google::protobuf::internal::ConstantInitialized);

  TopicSubscription(const TopicSubscription& from);
  TopicSubscription(TopicSubscription&& from) noexcept
    : TopicSubscription() {
    *this = ::std::move(from);
  }

  inline TopicSubscription& operator=(const TopicSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicSubscription& operator=(TopicSubscription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicSubscription& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicSubscription* internal_default_instance() {
    return reinterpret_cast<const TopicSubscription*>(
               &_TopicSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TopicSubscription& a, TopicSubscription& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicSubscription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicSubscription* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicSubscription* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicSubscription>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TopicSubscription& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TopicSubscription& from) {
    TopicSubscription::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicSubscription* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.runtime.v1.TopicSubscription";
  }
  protected:
  explicit TopicSubscription(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kPubsubNameFieldNumber = 1,
    kTopicFieldNumber = 2,
    kDeadLetterTopicFieldNumber = 6,
    kRoutesFieldNumber = 5,
    kBulkSubscribeFieldNumber = 7,
  };
  // map<string, string> metadata = 3;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string pubsub_name = 1;
  void clear_pubsub_name() ;
  const std::string& pubsub_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pubsub_name(Arg_&& arg, Args_... args);
  std::string* mutable_pubsub_name();
  PROTOBUF_NODISCARD std::string* release_pubsub_name();
  void set_allocated_pubsub_name(std::string* ptr);

  private:
  const std::string& _internal_pubsub_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pubsub_name(
      const std::string& value);
  std::string* _internal_mutable_pubsub_name();

  public:
  // string topic = 2;
  void clear_topic() ;
  const std::string& topic() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topic(Arg_&& arg, Args_... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* ptr);

  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(
      const std::string& value);
  std::string* _internal_mutable_topic();

  public:
  // string dead_letter_topic = 6;
  void clear_dead_letter_topic() ;
  const std::string& dead_letter_topic() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dead_letter_topic(Arg_&& arg, Args_... args);
  std::string* mutable_dead_letter_topic();
  PROTOBUF_NODISCARD std::string* release_dead_letter_topic();
  void set_allocated_dead_letter_topic(std::string* ptr);

  private:
  const std::string& _internal_dead_letter_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dead_letter_topic(
      const std::string& value);
  std::string* _internal_mutable_dead_letter_topic();

  public:
  // .dapr.proto.runtime.v1.TopicRoutes routes = 5;
  bool has_routes() const;
  void clear_routes() ;
  const ::dapr::proto::runtime::v1::TopicRoutes& routes() const;
  PROTOBUF_NODISCARD ::dapr::proto::runtime::v1::TopicRoutes* release_routes();
  ::dapr::proto::runtime::v1::TopicRoutes* mutable_routes();
  void set_allocated_routes(::dapr::proto::runtime::v1::TopicRoutes* value);
  void unsafe_arena_set_allocated_routes(::dapr::proto::runtime::v1::TopicRoutes* value);
  ::dapr::proto::runtime::v1::TopicRoutes* unsafe_arena_release_routes();

  private:
  const ::dapr::proto::runtime::v1::TopicRoutes& _internal_routes() const;
  ::dapr::proto::runtime::v1::TopicRoutes* _internal_mutable_routes();

  public:
  // .dapr.proto.runtime.v1.BulkSubscribeConfig bulk_subscribe = 7;
  bool has_bulk_subscribe() const;
  void clear_bulk_subscribe() ;
  const ::dapr::proto::runtime::v1::BulkSubscribeConfig& bulk_subscribe() const;
  PROTOBUF_NODISCARD ::dapr::proto::runtime::v1::BulkSubscribeConfig* release_bulk_subscribe();
  ::dapr::proto::runtime::v1::BulkSubscribeConfig* mutable_bulk_subscribe();
  void set_allocated_bulk_subscribe(::dapr::proto::runtime::v1::BulkSubscribeConfig* value);
  void unsafe_arena_set_allocated_bulk_subscribe(::dapr::proto::runtime::v1::BulkSubscribeConfig* value);
  ::dapr::proto::runtime::v1::BulkSubscribeConfig* unsafe_arena_release_bulk_subscribe();

  private:
  const ::dapr::proto::runtime::v1::BulkSubscribeConfig& _internal_bulk_subscribe() const;
  ::dapr::proto::runtime::v1::BulkSubscribeConfig* _internal_mutable_bulk_subscribe();

  public:
  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.TopicSubscription)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 3, 89, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<TopicSubscription_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr pubsub_name_;
    ::google::protobuf::internal::ArenaStringPtr topic_;
    ::google::protobuf::internal::ArenaStringPtr dead_letter_topic_;
    ::dapr::proto::runtime::v1::TopicRoutes* routes_;
    ::dapr::proto::runtime::v1::BulkSubscribeConfig* bulk_subscribe_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto;
};// -------------------------------------------------------------------

class TopicRoutes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.TopicRoutes) */ {
 public:
  inline TopicRoutes() : TopicRoutes(nullptr) {}
  ~TopicRoutes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TopicRoutes(::google::protobuf::internal::ConstantInitialized);

  TopicRoutes(const TopicRoutes& from);
  TopicRoutes(TopicRoutes&& from) noexcept
    : TopicRoutes() {
    *this = ::std::move(from);
  }

  inline TopicRoutes& operator=(const TopicRoutes& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicRoutes& operator=(TopicRoutes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicRoutes& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicRoutes* internal_default_instance() {
    return reinterpret_cast<const TopicRoutes*>(
               &_TopicRoutes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TopicRoutes& a, TopicRoutes& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicRoutes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicRoutes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicRoutes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicRoutes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TopicRoutes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TopicRoutes& from) {
    TopicRoutes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicRoutes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.runtime.v1.TopicRoutes";
  }
  protected:
  explicit TopicRoutes(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 1,
    kDefaultFieldNumber = 2,
  };
  // repeated .dapr.proto.runtime.v1.TopicRule rules = 1;
  int rules_size() const;
  private:
  int _internal_rules_size() const;

  public:
  void clear_rules() ;
  ::dapr::proto::runtime::v1::TopicRule* mutable_rules(int index);
  ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicRule >*
      mutable_rules();
  private:
  const ::google::protobuf::RepeatedPtrField<::dapr::proto::runtime::v1::TopicRule>& _internal_rules() const;
  ::google::protobuf::RepeatedPtrField<::dapr::proto::runtime::v1::TopicRule>* _internal_mutable_rules();
  public:
  const ::dapr::proto::runtime::v1::TopicRule& rules(int index) const;
  ::dapr::proto::runtime::v1::TopicRule* add_rules();
  const ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicRule >&
      rules() const;
  // string default = 2;
  void clear_default_() ;
  const std::string& default_() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_default_(Arg_&& arg, Args_... args);
  std::string* mutable_default_();
  PROTOBUF_NODISCARD std::string* release_default_();
  void set_allocated_default_(std::string* ptr);

  private:
  const std::string& _internal_default_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_(
      const std::string& value);
  std::string* _internal_mutable_default_();

  public:
  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.TopicRoutes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 49, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicRule > rules_;
    ::google::protobuf::internal::ArenaStringPtr default__;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto;
};// -------------------------------------------------------------------

class TopicRule final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.TopicRule) */ {
 public:
  inline TopicRule() : TopicRule(nullptr) {}
  ~TopicRule() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TopicRule(::google::protobuf::internal::ConstantInitialized);

  TopicRule(const TopicRule& from);
  TopicRule(TopicRule&& from) noexcept
    : TopicRule() {
    *this = ::std::move(from);
  }

  inline TopicRule& operator=(const TopicRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicRule& operator=(TopicRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicRule* internal_default_instance() {
    return reinterpret_cast<const TopicRule*>(
               &_TopicRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TopicRule& a, TopicRule& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicRule* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicRule* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicRule>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TopicRule& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TopicRule& from) {
    TopicRule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicRule* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.runtime.v1.TopicRule";
  }
  protected:
  explicit TopicRule(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchFieldNumber = 1,
    kPathFieldNumber = 2,
  };
  // string match = 1;
  void clear_match() ;
  const std::string& match() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_match(Arg_&& arg, Args_... args);
  std::string* mutable_match();
  PROTOBUF_NODISCARD std::string* release_match();
  void set_allocated_match(std::string* ptr);

  private:
  const std::string& _internal_match() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_match(
      const std::string& value);
  std::string* _internal_mutable_match();

  public:
  // string path = 2;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.TopicRule)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 49, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr match_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto;
};// -------------------------------------------------------------------

class BulkSubscribeConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.BulkSubscribeConfig) */ {
 public:
  inline BulkSubscribeConfig() : BulkSubscribeConfig(nullptr) {}
  ~BulkSubscribeConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BulkSubscribeConfig(::google::protobuf::internal::ConstantInitialized);

  BulkSubscribeConfig(const BulkSubscribeConfig& from);
  BulkSubscribeConfig(BulkSubscribeConfig&& from) noexcept
    : BulkSubscribeConfig() {
    *this = ::std::move(from);
  }

  inline BulkSubscribeConfig& operator=(const BulkSubscribeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkSubscribeConfig& operator=(BulkSubscribeConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BulkSubscribeConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const BulkSubscribeConfig* internal_default_instance() {
    return reinterpret_cast<const BulkSubscribeConfig*>(
               &_BulkSubscribeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(BulkSubscribeConfig& a, BulkSubscribeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkSubscribeConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkSubscribeConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BulkSubscribeConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BulkSubscribeConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BulkSubscribeConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BulkSubscribeConfig& from) {
    BulkSubscribeConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkSubscribeConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.runtime.v1.BulkSubscribeConfig";
  }
  protected:
  explicit BulkSubscribeConfig(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kMaxMessagesCountFieldNumber = 2,
    kMaxAwaitDurationMsFieldNumber = 3,
  };
  // bool enabled = 1;
  void clear_enabled() ;
  bool enabled() const;
  void set_enabled(bool value);

  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);

  public:
  // int32 max_messages_count = 2;
  void clear_max_messages_count() ;
  ::int32_t max_messages_count() const;
  void set_max_messages_count(::int32_t value);

  private:
  ::int32_t _internal_max_messages_count() const;
  void _internal_set_max_messages_count(::int32_t value);

  public:
  // int32 max_await_duration_ms = 3;
  void clear_max_await_duration_ms() ;
  ::int32_t max_await_duration_ms() const;
  void set_max_await_duration_ms(::int32_t value);

  private:
  ::int32_t _internal_max_await_duration_ms() const;
  void _internal_set_max_await_duration_ms(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.BulkSubscribeConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool enabled_;
    ::int32_t max_messages_count_;
    ::int32_t max_await_duration_ms_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto;
};// -------------------------------------------------------------------

class ListInputBindingsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.ListInputBindingsResponse) */ {
 public:
  inline ListInputBindingsResponse() : ListInputBindingsResponse(nullptr) {}
  ~ListInputBindingsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListInputBindingsResponse(::google::protobuf::internal::ConstantInitialized);

  ListInputBindingsResponse(const ListInputBindingsResponse& from);
  ListInputBindingsResponse(ListInputBindingsResponse&& from) noexcept
    : ListInputBindingsResponse() {
    *this = ::std::move(from);
  }

  inline ListInputBindingsResponse& operator=(const ListInputBindingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListInputBindingsResponse& operator=(ListInputBindingsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListInputBindingsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListInputBindingsResponse* internal_default_instance() {
    return reinterpret_cast<const ListInputBindingsResponse*>(
               &_ListInputBindingsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ListInputBindingsResponse& a, ListInputBindingsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListInputBindingsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListInputBindingsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListInputBindingsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListInputBindingsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListInputBindingsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ListInputBindingsResponse& from) {
    ListInputBindingsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListInputBindingsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.runtime.v1.ListInputBindingsResponse";
  }
  protected:
  explicit ListInputBindingsResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBindingsFieldNumber = 1,
  };
  // repeated string bindings = 1;
  int bindings_size() const;
  private:
  int _internal_bindings_size() const;

  public:
  void clear_bindings() ;
  const std::string& bindings(int index) const;
  std::string* mutable_bindings(int index);
  void set_bindings(int index, const std::string& value);
  void set_bindings(int index, std::string&& value);
  void set_bindings(int index, const char* value);
  void set_bindings(int index, const char* value, std::size_t size);
  void set_bindings(int index, absl::string_view value);
  std::string* add_bindings();
  void add_bindings(const std::string& value);
  void add_bindings(std::string&& value);
  void add_bindings(const char* value);
  void add_bindings(const char* value, std::size_t size);
  void add_bindings(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& bindings() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_bindings();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_bindings() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_bindings();

  public:
  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.ListInputBindingsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 64, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField<std::string> bindings_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto;
};// -------------------------------------------------------------------

class HealthCheckResponse final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.HealthCheckResponse) */ {
 public:
  inline HealthCheckResponse() : HealthCheckResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HealthCheckResponse(::google::protobuf::internal::ConstantInitialized);

  HealthCheckResponse(const HealthCheckResponse& from);
  HealthCheckResponse(HealthCheckResponse&& from) noexcept
    : HealthCheckResponse() {
    *this = ::std::move(from);
  }

  inline HealthCheckResponse& operator=(const HealthCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthCheckResponse& operator=(HealthCheckResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HealthCheckResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthCheckResponse* internal_default_instance() {
    return reinterpret_cast<const HealthCheckResponse*>(
               &_HealthCheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(HealthCheckResponse& a, HealthCheckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthCheckResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthCheckResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HealthCheckResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HealthCheckResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const HealthCheckResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const HealthCheckResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.runtime.v1.HealthCheckResponse";
  }
  protected:
  explicit HealthCheckResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.HealthCheckResponse)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TopicEventRequest

// string id = 1;
inline void TopicEventRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& TopicEventRequest::id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventRequest.id)
}
inline std::string* TopicEventRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventRequest.id)
  return _s;
}
inline const std::string& TopicEventRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void TopicEventRequest::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventRequest::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventRequest::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventRequest.id)
  return _impl_.id_.Release();
}
inline void TopicEventRequest::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventRequest.id)
}

// string source = 2;
inline void TopicEventRequest::clear_source() {
  _impl_.source_.ClearToEmpty();
}
inline const std::string& TopicEventRequest::source() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventRequest.source)
  return _internal_source();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventRequest::set_source(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.source_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventRequest.source)
}
inline std::string* TopicEventRequest::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventRequest.source)
  return _s;
}
inline const std::string& TopicEventRequest::_internal_source() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.source_.Get();
}
inline void TopicEventRequest::_internal_set_source(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.source_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventRequest::_internal_mutable_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.source_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventRequest::release_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventRequest.source)
  return _impl_.source_.Release();
}
inline void TopicEventRequest::set_allocated_source(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.source_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.source_.IsDefault()) {
          _impl_.source_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventRequest.source)
}

// string type = 3;
inline void TopicEventRequest::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& TopicEventRequest::type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventRequest.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventRequest::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventRequest.type)
}
inline std::string* TopicEventRequest::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventRequest.type)
  return _s;
}
inline const std::string& TopicEventRequest::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void TopicEventRequest::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventRequest::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventRequest::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventRequest.type)
  return _impl_.type_.Release();
}
inline void TopicEventRequest::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventRequest.type)
}

// string spec_version = 4;
inline void TopicEventRequest::clear_spec_version() {
  _impl_.spec_version_.ClearToEmpty();
}
inline const std::string& TopicEventRequest::spec_version() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventRequest.spec_version)
  return _internal_spec_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventRequest::set_spec_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.spec_version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventRequest.spec_version)
}
inline std::string* TopicEventRequest::mutable_spec_version() {
  std::string* _s = _internal_mutable_spec_version();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventRequest.spec_version)
  return _s;
}
inline const std::string& TopicEventRequest::_internal_spec_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.spec_version_.Get();
}
inline void TopicEventRequest::_internal_set_spec_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.spec_version_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventRequest::_internal_mutable_spec_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.spec_version_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventRequest::release_spec_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventRequest.spec_version)
  return _impl_.spec_version_.Release();
}
inline void TopicEventRequest::set_allocated_spec_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.spec_version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.spec_version_.IsDefault()) {
          _impl_.spec_version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventRequest.spec_version)
}

// string data_content_type = 5;
inline void TopicEventRequest::clear_data_content_type() {
  _impl_.data_content_type_.ClearToEmpty();
}
inline const std::string& TopicEventRequest::data_content_type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventRequest.data_content_type)
  return _internal_data_content_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventRequest::set_data_content_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_content_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventRequest.data_content_type)
}
inline std::string* TopicEventRequest::mutable_data_content_type() {
  std::string* _s = _internal_mutable_data_content_type();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventRequest.data_content_type)
  return _s;
}
inline const std::string& TopicEventRequest::_internal_data_content_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_content_type_.Get();
}
inline void TopicEventRequest::_internal_set_data_content_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_content_type_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventRequest::_internal_mutable_data_content_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_content_type_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventRequest::release_data_content_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventRequest.data_content_type)
  return _impl_.data_content_type_.Release();
}
inline void TopicEventRequest::set_allocated_data_content_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_content_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_content_type_.IsDefault()) {
          _impl_.data_content_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventRequest.data_content_type)
}

// bytes data = 7;
inline void TopicEventRequest::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& TopicEventRequest::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventRequest.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventRequest::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventRequest.data)
}
inline std::string* TopicEventRequest::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventRequest.data)
  return _s;
}
inline const std::string& TopicEventRequest::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void TopicEventRequest::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventRequest::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventRequest::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventRequest.data)
  return _impl_.data_.Release();
}
inline void TopicEventRequest::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventRequest.data)
}

// string topic = 6;
inline void TopicEventRequest::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& TopicEventRequest::topic() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventRequest.topic)
  return _internal_topic();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventRequest::set_topic(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topic_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventRequest.topic)
}
inline std::string* TopicEventRequest::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventRequest.topic)
  return _s;
}
inline const std::string& TopicEventRequest::_internal_topic() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.topic_.Get();
}
inline void TopicEventRequest::_internal_set_topic(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventRequest::_internal_mutable_topic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.topic_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventRequest::release_topic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventRequest.topic)
  return _impl_.topic_.Release();
}
inline void TopicEventRequest::set_allocated_topic(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topic_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.topic_.IsDefault()) {
          _impl_.topic_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventRequest.topic)
}

// string pubsub_name = 8;
inline void TopicEventRequest::clear_pubsub_name() {
  _impl_.pubsub_name_.ClearToEmpty();
}
inline const std::string& TopicEventRequest::pubsub_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventRequest.pubsub_name)
  return _internal_pubsub_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventRequest::set_pubsub_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pubsub_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventRequest.pubsub_name)
}
inline std::string* TopicEventRequest::mutable_pubsub_name() {
  std::string* _s = _internal_mutable_pubsub_name();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventRequest.pubsub_name)
  return _s;
}
inline const std::string& TopicEventRequest::_internal_pubsub_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pubsub_name_.Get();
}
inline void TopicEventRequest::_internal_set_pubsub_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pubsub_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventRequest::_internal_mutable_pubsub_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.pubsub_name_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventRequest::release_pubsub_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventRequest.pubsub_name)
  return _impl_.pubsub_name_.Release();
}
inline void TopicEventRequest::set_allocated_pubsub_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pubsub_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pubsub_name_.IsDefault()) {
          _impl_.pubsub_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventRequest.pubsub_name)
}

// string path = 9;
inline void TopicEventRequest::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& TopicEventRequest::path() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventRequest.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventRequest::set_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventRequest.path)
}
inline std::string* TopicEventRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventRequest.path)
  return _s;
}
inline const std::string& TopicEventRequest::_internal_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.path_.Get();
}
inline void TopicEventRequest::_internal_set_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventRequest::_internal_mutable_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventRequest::release_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventRequest.path)
  return _impl_.path_.Release();
}
inline void TopicEventRequest::set_allocated_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventRequest.path)
}

// .google.protobuf.Struct extensions = 10;
inline bool TopicEventRequest::has_extensions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.extensions_ != nullptr);
  return value;
}
inline const ::google::protobuf::Struct& TopicEventRequest::_internal_extensions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Struct* p = _impl_.extensions_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Struct&>(::google::protobuf::_Struct_default_instance_);
}
inline const ::google::protobuf::Struct& TopicEventRequest::extensions() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventRequest.extensions)
  return _internal_extensions();
}
inline void TopicEventRequest::unsafe_arena_set_allocated_extensions(::google::protobuf::Struct* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.extensions_);
  }
  _impl_.extensions_ = reinterpret_cast<::google::protobuf::Struct*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.TopicEventRequest.extensions)
}
inline ::google::protobuf::Struct* TopicEventRequest::release_extensions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Struct* released = _impl_.extensions_;
  _impl_.extensions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Struct* TopicEventRequest::unsafe_arena_release_extensions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventRequest.extensions)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Struct* temp = _impl_.extensions_;
  _impl_.extensions_ = nullptr;
  return temp;
}
inline ::google::protobuf::Struct* TopicEventRequest::_internal_mutable_extensions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.extensions_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaForAllocation());
    _impl_.extensions_ = reinterpret_cast<::google::protobuf::Struct*>(p);
  }
  return _impl_.extensions_;
}
inline ::google::protobuf::Struct* TopicEventRequest::mutable_extensions() {
  ::google::protobuf::Struct* _msg = _internal_mutable_extensions();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventRequest.extensions)
  return _msg;
}
inline void TopicEventRequest::set_allocated_extensions(::google::protobuf::Struct* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.extensions_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.extensions_ = reinterpret_cast<::google::protobuf::Struct*>(value);
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventRequest.extensions)
}

// -------------------------------------------------------------------

// TopicEventResponse

// .dapr.proto.runtime.v1.TopicEventResponse.TopicEventResponseStatus status = 1;
inline void TopicEventResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::dapr::proto::runtime::v1::TopicEventResponse_TopicEventResponseStatus TopicEventResponse::status() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventResponse.status)
  return _internal_status();
}
inline void TopicEventResponse::set_status(::dapr::proto::runtime::v1::TopicEventResponse_TopicEventResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventResponse.status)
}
inline ::dapr::proto::runtime::v1::TopicEventResponse_TopicEventResponseStatus TopicEventResponse::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::dapr::proto::runtime::v1::TopicEventResponse_TopicEventResponseStatus>(_impl_.status_);
}
inline void TopicEventResponse::_internal_set_status(::dapr::proto::runtime::v1::TopicEventResponse_TopicEventResponseStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// TopicEventCERequest

// string id = 1;
inline void TopicEventCERequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& TopicEventCERequest::id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventCERequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventCERequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventCERequest.id)
}
inline std::string* TopicEventCERequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventCERequest.id)
  return _s;
}
inline const std::string& TopicEventCERequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void TopicEventCERequest::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventCERequest::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventCERequest::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventCERequest.id)
  return _impl_.id_.Release();
}
inline void TopicEventCERequest::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventCERequest.id)
}

// string source = 2;
inline void TopicEventCERequest::clear_source() {
  _impl_.source_.ClearToEmpty();
}
inline const std::string& TopicEventCERequest::source() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventCERequest.source)
  return _internal_source();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventCERequest::set_source(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.source_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventCERequest.source)
}
inline std::string* TopicEventCERequest::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventCERequest.source)
  return _s;
}
inline const std::string& TopicEventCERequest::_internal_source() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.source_.Get();
}
inline void TopicEventCERequest::_internal_set_source(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.source_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventCERequest::_internal_mutable_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.source_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventCERequest::release_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventCERequest.source)
  return _impl_.source_.Release();
}
inline void TopicEventCERequest::set_allocated_source(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.source_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.source_.IsDefault()) {
          _impl_.source_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventCERequest.source)
}

// string type = 3;
inline void TopicEventCERequest::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& TopicEventCERequest::type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventCERequest.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventCERequest::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventCERequest.type)
}
inline std::string* TopicEventCERequest::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventCERequest.type)
  return _s;
}
inline const std::string& TopicEventCERequest::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void TopicEventCERequest::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventCERequest::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventCERequest::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventCERequest.type)
  return _impl_.type_.Release();
}
inline void TopicEventCERequest::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventCERequest.type)
}

// string spec_version = 4;
inline void TopicEventCERequest::clear_spec_version() {
  _impl_.spec_version_.ClearToEmpty();
}
inline const std::string& TopicEventCERequest::spec_version() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventCERequest.spec_version)
  return _internal_spec_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventCERequest::set_spec_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.spec_version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventCERequest.spec_version)
}
inline std::string* TopicEventCERequest::mutable_spec_version() {
  std::string* _s = _internal_mutable_spec_version();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventCERequest.spec_version)
  return _s;
}
inline const std::string& TopicEventCERequest::_internal_spec_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.spec_version_.Get();
}
inline void TopicEventCERequest::_internal_set_spec_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.spec_version_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventCERequest::_internal_mutable_spec_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.spec_version_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventCERequest::release_spec_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventCERequest.spec_version)
  return _impl_.spec_version_.Release();
}
inline void TopicEventCERequest::set_allocated_spec_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.spec_version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.spec_version_.IsDefault()) {
          _impl_.spec_version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventCERequest.spec_version)
}

// string data_content_type = 5;
inline void TopicEventCERequest::clear_data_content_type() {
  _impl_.data_content_type_.ClearToEmpty();
}
inline const std::string& TopicEventCERequest::data_content_type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventCERequest.data_content_type)
  return _internal_data_content_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventCERequest::set_data_content_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_content_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventCERequest.data_content_type)
}
inline std::string* TopicEventCERequest::mutable_data_content_type() {
  std::string* _s = _internal_mutable_data_content_type();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventCERequest.data_content_type)
  return _s;
}
inline const std::string& TopicEventCERequest::_internal_data_content_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_content_type_.Get();
}
inline void TopicEventCERequest::_internal_set_data_content_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_content_type_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventCERequest::_internal_mutable_data_content_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_content_type_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventCERequest::release_data_content_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventCERequest.data_content_type)
  return _impl_.data_content_type_.Release();
}
inline void TopicEventCERequest::set_allocated_data_content_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_content_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_content_type_.IsDefault()) {
          _impl_.data_content_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventCERequest.data_content_type)
}

// bytes data = 6;
inline void TopicEventCERequest::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& TopicEventCERequest::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventCERequest.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventCERequest::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventCERequest.data)
}
inline std::string* TopicEventCERequest::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventCERequest.data)
  return _s;
}
inline const std::string& TopicEventCERequest::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void TopicEventCERequest::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventCERequest::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventCERequest::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventCERequest.data)
  return _impl_.data_.Release();
}
inline void TopicEventCERequest::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventCERequest.data)
}

// .google.protobuf.Struct extensions = 7;
inline bool TopicEventCERequest::has_extensions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.extensions_ != nullptr);
  return value;
}
inline const ::google::protobuf::Struct& TopicEventCERequest::_internal_extensions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Struct* p = _impl_.extensions_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Struct&>(::google::protobuf::_Struct_default_instance_);
}
inline const ::google::protobuf::Struct& TopicEventCERequest::extensions() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventCERequest.extensions)
  return _internal_extensions();
}
inline void TopicEventCERequest::unsafe_arena_set_allocated_extensions(::google::protobuf::Struct* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.extensions_);
  }
  _impl_.extensions_ = reinterpret_cast<::google::protobuf::Struct*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.TopicEventCERequest.extensions)
}
inline ::google::protobuf::Struct* TopicEventCERequest::release_extensions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Struct* released = _impl_.extensions_;
  _impl_.extensions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Struct* TopicEventCERequest::unsafe_arena_release_extensions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventCERequest.extensions)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Struct* temp = _impl_.extensions_;
  _impl_.extensions_ = nullptr;
  return temp;
}
inline ::google::protobuf::Struct* TopicEventCERequest::_internal_mutable_extensions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.extensions_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaForAllocation());
    _impl_.extensions_ = reinterpret_cast<::google::protobuf::Struct*>(p);
  }
  return _impl_.extensions_;
}
inline ::google::protobuf::Struct* TopicEventCERequest::mutable_extensions() {
  ::google::protobuf::Struct* _msg = _internal_mutable_extensions();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventCERequest.extensions)
  return _msg;
}
inline void TopicEventCERequest::set_allocated_extensions(::google::protobuf::Struct* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.extensions_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.extensions_ = reinterpret_cast<::google::protobuf::Struct*>(value);
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventCERequest.extensions)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TopicEventBulkRequestEntry

// string entry_id = 1;
inline void TopicEventBulkRequestEntry::clear_entry_id() {
  _impl_.entry_id_.ClearToEmpty();
}
inline const std::string& TopicEventBulkRequestEntry::entry_id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventBulkRequestEntry.entry_id)
  return _internal_entry_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventBulkRequestEntry::set_entry_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.entry_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventBulkRequestEntry.entry_id)
}
inline std::string* TopicEventBulkRequestEntry::mutable_entry_id() {
  std::string* _s = _internal_mutable_entry_id();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventBulkRequestEntry.entry_id)
  return _s;
}
inline const std::string& TopicEventBulkRequestEntry::_internal_entry_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.entry_id_.Get();
}
inline void TopicEventBulkRequestEntry::_internal_set_entry_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.entry_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventBulkRequestEntry::_internal_mutable_entry_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.entry_id_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventBulkRequestEntry::release_entry_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventBulkRequestEntry.entry_id)
  return _impl_.entry_id_.Release();
}
inline void TopicEventBulkRequestEntry::set_allocated_entry_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.entry_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.entry_id_.IsDefault()) {
          _impl_.entry_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventBulkRequestEntry.entry_id)
}

// bytes bytes = 2;
inline bool TopicEventBulkRequestEntry::has_bytes() const {
  return event_case() == kBytes;
}
inline void TopicEventBulkRequestEntry::set_has_bytes() {
  _impl_._oneof_case_[0] = kBytes;
}
inline void TopicEventBulkRequestEntry::clear_bytes() {
  if (event_case() == kBytes) {
    _impl_.event_.bytes_.Destroy();
    clear_has_event();
  }
}
inline const std::string& TopicEventBulkRequestEntry::bytes() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventBulkRequestEntry.bytes)
  return _internal_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventBulkRequestEntry::set_bytes(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (event_case() != kBytes) {
    clear_event();

    set_has_bytes();
    _impl_.event_.bytes_.InitDefault();
  }
  _impl_.event_.bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventBulkRequestEntry.bytes)
}
inline std::string* TopicEventBulkRequestEntry::mutable_bytes() {
  std::string* _s = _internal_mutable_bytes();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventBulkRequestEntry.bytes)
  return _s;
}
inline const std::string& TopicEventBulkRequestEntry::_internal_bytes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (event_case() != kBytes) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.event_.bytes_.Get();
}
inline void TopicEventBulkRequestEntry::_internal_set_bytes(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (event_case() != kBytes) {
    clear_event();

    set_has_bytes();
    _impl_.event_.bytes_.InitDefault();
  }
  _impl_.event_.bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventBulkRequestEntry::_internal_mutable_bytes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (event_case() != kBytes) {
    clear_event();

    set_has_bytes();
    _impl_.event_.bytes_.InitDefault();
  }
  return _impl_.event_.bytes_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventBulkRequestEntry::release_bytes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventBulkRequestEntry.bytes)
  if (event_case() != kBytes) {
    return nullptr;
  }
  clear_has_event();
  return _impl_.event_.bytes_.Release();
}
inline void TopicEventBulkRequestEntry::set_allocated_bytes(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_event()) {
    clear_event();
  }
  if (value != nullptr) {
    set_has_bytes();
    _impl_.event_.bytes_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventBulkRequestEntry.bytes)
}

// .dapr.proto.runtime.v1.TopicEventCERequest cloud_event = 3;
inline bool TopicEventBulkRequestEntry::has_cloud_event() const {
  return event_case() == kCloudEvent;
}
inline bool TopicEventBulkRequestEntry::_internal_has_cloud_event() const {
  return event_case() == kCloudEvent;
}
inline void TopicEventBulkRequestEntry::set_has_cloud_event() {
  _impl_._oneof_case_[0] = kCloudEvent;
}
inline void TopicEventBulkRequestEntry::clear_cloud_event() {
  if (event_case() == kCloudEvent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.cloud_event_;
    }
    clear_has_event();
  }
}
inline ::dapr::proto::runtime::v1::TopicEventCERequest* TopicEventBulkRequestEntry::release_cloud_event() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventBulkRequestEntry.cloud_event)
  if (event_case() == kCloudEvent) {
    clear_has_event();
    ::dapr::proto::runtime::v1::TopicEventCERequest* temp = _impl_.event_.cloud_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.cloud_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dapr::proto::runtime::v1::TopicEventCERequest& TopicEventBulkRequestEntry::_internal_cloud_event() const {
  return event_case() == kCloudEvent
      ? *_impl_.event_.cloud_event_
      : reinterpret_cast<::dapr::proto::runtime::v1::TopicEventCERequest&>(::dapr::proto::runtime::v1::_TopicEventCERequest_default_instance_);
}
inline const ::dapr::proto::runtime::v1::TopicEventCERequest& TopicEventBulkRequestEntry::cloud_event() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventBulkRequestEntry.cloud_event)
  return _internal_cloud_event();
}
inline ::dapr::proto::runtime::v1::TopicEventCERequest* TopicEventBulkRequestEntry::unsafe_arena_release_cloud_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dapr.proto.runtime.v1.TopicEventBulkRequestEntry.cloud_event)
  if (event_case() == kCloudEvent) {
    clear_has_event();
    ::dapr::proto::runtime::v1::TopicEventCERequest* temp = _impl_.event_.cloud_event_;
    _impl_.event_.cloud_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TopicEventBulkRequestEntry::unsafe_arena_set_allocated_cloud_event(::dapr::proto::runtime::v1::TopicEventCERequest* cloud_event) {
  clear_event();
  if (cloud_event) {
    set_has_cloud_event();
    _impl_.event_.cloud_event_ = cloud_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.TopicEventBulkRequestEntry.cloud_event)
}
inline ::dapr::proto::runtime::v1::TopicEventCERequest* TopicEventBulkRequestEntry::_internal_mutable_cloud_event() {
  if (event_case() != kCloudEvent) {
    clear_event();
    set_has_cloud_event();
    _impl_.event_.cloud_event_ = CreateMaybeMessage< ::dapr::proto::runtime::v1::TopicEventCERequest >(GetArenaForAllocation());
  }
  return _impl_.event_.cloud_event_;
}
inline ::dapr::proto::runtime::v1::TopicEventCERequest* TopicEventBulkRequestEntry::mutable_cloud_event() {
  ::dapr::proto::runtime::v1::TopicEventCERequest* _msg = _internal_mutable_cloud_event();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventBulkRequestEntry.cloud_event)
  return _msg;
}

// string content_type = 4;
inline void TopicEventBulkRequestEntry::clear_content_type() {
  _impl_.content_type_.ClearToEmpty();
}
inline const std::string& TopicEventBulkRequestEntry::content_type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventBulkRequestEntry.content_type)
  return _internal_content_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventBulkRequestEntry::set_content_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventBulkRequestEntry.content_type)
}
inline std::string* TopicEventBulkRequestEntry::mutable_content_type() {
  std::string* _s = _internal_mutable_content_type();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventBulkRequestEntry.content_type)
  return _s;
}
inline const std::string& TopicEventBulkRequestEntry::_internal_content_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_type_.Get();
}
inline void TopicEventBulkRequestEntry::_internal_set_content_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_type_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventBulkRequestEntry::_internal_mutable_content_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.content_type_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventBulkRequestEntry::release_content_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventBulkRequestEntry.content_type)
  return _impl_.content_type_.Release();
}
inline void TopicEventBulkRequestEntry::set_allocated_content_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_type_.IsDefault()) {
          _impl_.content_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventBulkRequestEntry.content_type)
}

// map<string, string> metadata = 5;
inline int TopicEventBulkRequestEntry::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int TopicEventBulkRequestEntry::metadata_size() const {
  return _internal_metadata_size();
}
inline void TopicEventBulkRequestEntry::clear_metadata() {
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& TopicEventBulkRequestEntry::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& TopicEventBulkRequestEntry::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.TopicEventBulkRequestEntry.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* TopicEventBulkRequestEntry::_internal_mutable_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* TopicEventBulkRequestEntry::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.TopicEventBulkRequestEntry.metadata)
  return _internal_mutable_metadata();
}

inline bool TopicEventBulkRequestEntry::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void TopicEventBulkRequestEntry::clear_has_event() {
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}
inline TopicEventBulkRequestEntry::EventCase TopicEventBulkRequestEntry::event_case() const {
  return TopicEventBulkRequestEntry::EventCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TopicEventBulkRequest

// string id = 1;
inline void TopicEventBulkRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& TopicEventBulkRequest::id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventBulkRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventBulkRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventBulkRequest.id)
}
inline std::string* TopicEventBulkRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventBulkRequest.id)
  return _s;
}
inline const std::string& TopicEventBulkRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void TopicEventBulkRequest::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventBulkRequest::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventBulkRequest::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventBulkRequest.id)
  return _impl_.id_.Release();
}
inline void TopicEventBulkRequest::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventBulkRequest.id)
}

// repeated .dapr.proto.runtime.v1.TopicEventBulkRequestEntry entries = 2;
inline int TopicEventBulkRequest::_internal_entries_size() const {
  return _internal_entries().size();
}
inline int TopicEventBulkRequest::entries_size() const {
  return _internal_entries_size();
}
inline void TopicEventBulkRequest::clear_entries() {
  _internal_mutable_entries()->Clear();
}
inline ::dapr::proto::runtime::v1::TopicEventBulkRequestEntry* TopicEventBulkRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventBulkRequest.entries)
  return _internal_mutable_entries()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicEventBulkRequestEntry >*
TopicEventBulkRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.TopicEventBulkRequest.entries)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_entries();
}
inline const ::dapr::proto::runtime::v1::TopicEventBulkRequestEntry& TopicEventBulkRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventBulkRequest.entries)
    return _internal_entries().Get(index);
}
inline ::dapr::proto::runtime::v1::TopicEventBulkRequestEntry* TopicEventBulkRequest::add_entries() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::dapr::proto::runtime::v1::TopicEventBulkRequestEntry* _add = _internal_mutable_entries()->Add();
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.TopicEventBulkRequest.entries)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicEventBulkRequestEntry >&
TopicEventBulkRequest::entries() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.TopicEventBulkRequest.entries)
  return _internal_entries();
}
inline const ::google::protobuf::RepeatedPtrField<::dapr::proto::runtime::v1::TopicEventBulkRequestEntry>&
TopicEventBulkRequest::_internal_entries() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.entries_;
}
inline ::google::protobuf::RepeatedPtrField<::dapr::proto::runtime::v1::TopicEventBulkRequestEntry>*
TopicEventBulkRequest::_internal_mutable_entries() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.entries_;
}

// map<string, string> metadata = 3;
inline int TopicEventBulkRequest::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int TopicEventBulkRequest::metadata_size() const {
  return _internal_metadata_size();
}
inline void TopicEventBulkRequest::clear_metadata() {
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& TopicEventBulkRequest::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& TopicEventBulkRequest::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.TopicEventBulkRequest.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* TopicEventBulkRequest::_internal_mutable_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* TopicEventBulkRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.TopicEventBulkRequest.metadata)
  return _internal_mutable_metadata();
}

// string topic = 4;
inline void TopicEventBulkRequest::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& TopicEventBulkRequest::topic() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventBulkRequest.topic)
  return _internal_topic();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventBulkRequest::set_topic(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topic_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventBulkRequest.topic)
}
inline std::string* TopicEventBulkRequest::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventBulkRequest.topic)
  return _s;
}
inline const std::string& TopicEventBulkRequest::_internal_topic() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.topic_.Get();
}
inline void TopicEventBulkRequest::_internal_set_topic(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventBulkRequest::_internal_mutable_topic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.topic_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventBulkRequest::release_topic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventBulkRequest.topic)
  return _impl_.topic_.Release();
}
inline void TopicEventBulkRequest::set_allocated_topic(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topic_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.topic_.IsDefault()) {
          _impl_.topic_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventBulkRequest.topic)
}

// string pubsub_name = 5;
inline void TopicEventBulkRequest::clear_pubsub_name() {
  _impl_.pubsub_name_.ClearToEmpty();
}
inline const std::string& TopicEventBulkRequest::pubsub_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventBulkRequest.pubsub_name)
  return _internal_pubsub_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventBulkRequest::set_pubsub_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pubsub_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventBulkRequest.pubsub_name)
}
inline std::string* TopicEventBulkRequest::mutable_pubsub_name() {
  std::string* _s = _internal_mutable_pubsub_name();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventBulkRequest.pubsub_name)
  return _s;
}
inline const std::string& TopicEventBulkRequest::_internal_pubsub_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pubsub_name_.Get();
}
inline void TopicEventBulkRequest::_internal_set_pubsub_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pubsub_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventBulkRequest::_internal_mutable_pubsub_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.pubsub_name_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventBulkRequest::release_pubsub_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventBulkRequest.pubsub_name)
  return _impl_.pubsub_name_.Release();
}
inline void TopicEventBulkRequest::set_allocated_pubsub_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pubsub_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pubsub_name_.IsDefault()) {
          _impl_.pubsub_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventBulkRequest.pubsub_name)
}

// string type = 6;
inline void TopicEventBulkRequest::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& TopicEventBulkRequest::type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventBulkRequest.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventBulkRequest::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventBulkRequest.type)
}
inline std::string* TopicEventBulkRequest::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventBulkRequest.type)
  return _s;
}
inline const std::string& TopicEventBulkRequest::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void TopicEventBulkRequest::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventBulkRequest::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventBulkRequest::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventBulkRequest.type)
  return _impl_.type_.Release();
}
inline void TopicEventBulkRequest::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventBulkRequest.type)
}

// string path = 7;
inline void TopicEventBulkRequest::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& TopicEventBulkRequest::path() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventBulkRequest.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventBulkRequest::set_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventBulkRequest.path)
}
inline std::string* TopicEventBulkRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventBulkRequest.path)
  return _s;
}
inline const std::string& TopicEventBulkRequest::_internal_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.path_.Get();
}
inline void TopicEventBulkRequest::_internal_set_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventBulkRequest::_internal_mutable_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventBulkRequest::release_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventBulkRequest.path)
  return _impl_.path_.Release();
}
inline void TopicEventBulkRequest::set_allocated_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventBulkRequest.path)
}

// -------------------------------------------------------------------

// TopicEventBulkResponseEntry

// string entry_id = 1;
inline void TopicEventBulkResponseEntry::clear_entry_id() {
  _impl_.entry_id_.ClearToEmpty();
}
inline const std::string& TopicEventBulkResponseEntry::entry_id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventBulkResponseEntry.entry_id)
  return _internal_entry_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicEventBulkResponseEntry::set_entry_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.entry_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventBulkResponseEntry.entry_id)
}
inline std::string* TopicEventBulkResponseEntry::mutable_entry_id() {
  std::string* _s = _internal_mutable_entry_id();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventBulkResponseEntry.entry_id)
  return _s;
}
inline const std::string& TopicEventBulkResponseEntry::_internal_entry_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.entry_id_.Get();
}
inline void TopicEventBulkResponseEntry::_internal_set_entry_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.entry_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicEventBulkResponseEntry::_internal_mutable_entry_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.entry_id_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicEventBulkResponseEntry::release_entry_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventBulkResponseEntry.entry_id)
  return _impl_.entry_id_.Release();
}
inline void TopicEventBulkResponseEntry::set_allocated_entry_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.entry_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.entry_id_.IsDefault()) {
          _impl_.entry_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventBulkResponseEntry.entry_id)
}

// .dapr.proto.runtime.v1.TopicEventResponse.TopicEventResponseStatus status = 2;
inline void TopicEventBulkResponseEntry::clear_status() {
  _impl_.status_ = 0;
}
inline ::dapr::proto::runtime::v1::TopicEventResponse_TopicEventResponseStatus TopicEventBulkResponseEntry::status() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventBulkResponseEntry.status)
  return _internal_status();
}
inline void TopicEventBulkResponseEntry::set_status(::dapr::proto::runtime::v1::TopicEventResponse_TopicEventResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventBulkResponseEntry.status)
}
inline ::dapr::proto::runtime::v1::TopicEventResponse_TopicEventResponseStatus TopicEventBulkResponseEntry::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::dapr::proto::runtime::v1::TopicEventResponse_TopicEventResponseStatus>(_impl_.status_);
}
inline void TopicEventBulkResponseEntry::_internal_set_status(::dapr::proto::runtime::v1::TopicEventResponse_TopicEventResponseStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// TopicEventBulkResponse

// repeated .dapr.proto.runtime.v1.TopicEventBulkResponseEntry statuses = 1;
inline int TopicEventBulkResponse::_internal_statuses_size() const {
  return _internal_statuses().size();
}
inline int TopicEventBulkResponse::statuses_size() const {
  return _internal_statuses_size();
}
inline void TopicEventBulkResponse::clear_statuses() {
  _internal_mutable_statuses()->Clear();
}
inline ::dapr::proto::runtime::v1::TopicEventBulkResponseEntry* TopicEventBulkResponse::mutable_statuses(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventBulkResponse.statuses)
  return _internal_mutable_statuses()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicEventBulkResponseEntry >*
TopicEventBulkResponse::mutable_statuses() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.TopicEventBulkResponse.statuses)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_statuses();
}
inline const ::dapr::proto::runtime::v1::TopicEventBulkResponseEntry& TopicEventBulkResponse::statuses(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventBulkResponse.statuses)
    return _internal_statuses().Get(index);
}
inline ::dapr::proto::runtime::v1::TopicEventBulkResponseEntry* TopicEventBulkResponse::add_statuses() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::dapr::proto::runtime::v1::TopicEventBulkResponseEntry* _add = _internal_mutable_statuses()->Add();
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.TopicEventBulkResponse.statuses)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicEventBulkResponseEntry >&
TopicEventBulkResponse::statuses() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.TopicEventBulkResponse.statuses)
  return _internal_statuses();
}
inline const ::google::protobuf::RepeatedPtrField<::dapr::proto::runtime::v1::TopicEventBulkResponseEntry>&
TopicEventBulkResponse::_internal_statuses() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.statuses_;
}
inline ::google::protobuf::RepeatedPtrField<::dapr::proto::runtime::v1::TopicEventBulkResponseEntry>*
TopicEventBulkResponse::_internal_mutable_statuses() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.statuses_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BindingEventRequest

// string name = 1;
inline void BindingEventRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& BindingEventRequest::name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BindingEventRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BindingEventRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BindingEventRequest.name)
}
inline std::string* BindingEventRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BindingEventRequest.name)
  return _s;
}
inline const std::string& BindingEventRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void BindingEventRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* BindingEventRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* BindingEventRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.BindingEventRequest.name)
  return _impl_.name_.Release();
}
inline void BindingEventRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.BindingEventRequest.name)
}

// bytes data = 2;
inline void BindingEventRequest::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& BindingEventRequest::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BindingEventRequest.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BindingEventRequest::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BindingEventRequest.data)
}
inline std::string* BindingEventRequest::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BindingEventRequest.data)
  return _s;
}
inline const std::string& BindingEventRequest::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void BindingEventRequest::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* BindingEventRequest::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* BindingEventRequest::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.BindingEventRequest.data)
  return _impl_.data_.Release();
}
inline void BindingEventRequest::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.BindingEventRequest.data)
}

// map<string, string> metadata = 3;
inline int BindingEventRequest::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int BindingEventRequest::metadata_size() const {
  return _internal_metadata_size();
}
inline void BindingEventRequest::clear_metadata() {
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& BindingEventRequest::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& BindingEventRequest::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.BindingEventRequest.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* BindingEventRequest::_internal_mutable_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* BindingEventRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.BindingEventRequest.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// BindingEventResponse

// string store_name = 1;
inline void BindingEventResponse::clear_store_name() {
  _impl_.store_name_.ClearToEmpty();
}
inline const std::string& BindingEventResponse::store_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BindingEventResponse.store_name)
  return _internal_store_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BindingEventResponse::set_store_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.store_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BindingEventResponse.store_name)
}
inline std::string* BindingEventResponse::mutable_store_name() {
  std::string* _s = _internal_mutable_store_name();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BindingEventResponse.store_name)
  return _s;
}
inline const std::string& BindingEventResponse::_internal_store_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.store_name_.Get();
}
inline void BindingEventResponse::_internal_set_store_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.store_name_.Set(value, GetArenaForAllocation());
}
inline std::string* BindingEventResponse::_internal_mutable_store_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.store_name_.Mutable( GetArenaForAllocation());
}
inline std::string* BindingEventResponse::release_store_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.BindingEventResponse.store_name)
  return _impl_.store_name_.Release();
}
inline void BindingEventResponse::set_allocated_store_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.store_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.store_name_.IsDefault()) {
          _impl_.store_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.BindingEventResponse.store_name)
}

// repeated .dapr.proto.common.v1.StateItem states = 2;
inline int BindingEventResponse::_internal_states_size() const {
  return _internal_states().size();
}
inline int BindingEventResponse::states_size() const {
  return _internal_states_size();
}
inline ::dapr::proto::common::v1::StateItem* BindingEventResponse::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BindingEventResponse.states)
  return _internal_mutable_states()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dapr::proto::common::v1::StateItem >*
BindingEventResponse::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.BindingEventResponse.states)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_states();
}
inline const ::dapr::proto::common::v1::StateItem& BindingEventResponse::states(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BindingEventResponse.states)
    return _internal_states().Get(index);
}
inline ::dapr::proto::common::v1::StateItem* BindingEventResponse::add_states() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::dapr::proto::common::v1::StateItem* _add = _internal_mutable_states()->Add();
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.BindingEventResponse.states)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::dapr::proto::common::v1::StateItem >&
BindingEventResponse::states() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.BindingEventResponse.states)
  return _internal_states();
}
inline const ::google::protobuf::RepeatedPtrField<::dapr::proto::common::v1::StateItem>&
BindingEventResponse::_internal_states() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.states_;
}
inline ::google::protobuf::RepeatedPtrField<::dapr::proto::common::v1::StateItem>*
BindingEventResponse::_internal_mutable_states() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.states_;
}

// repeated string to = 3;
inline int BindingEventResponse::_internal_to_size() const {
  return _internal_to().size();
}
inline int BindingEventResponse::to_size() const {
  return _internal_to_size();
}
inline void BindingEventResponse::clear_to() {
  _internal_mutable_to()->Clear();
}
inline std::string* BindingEventResponse::add_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_to()->Add();
  // @@protoc_insertion_point(field_add_mutable:dapr.proto.runtime.v1.BindingEventResponse.to)
  return _s;
}
inline const std::string& BindingEventResponse::to(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BindingEventResponse.to)
  return _internal_to().Get(index);
}
inline std::string* BindingEventResponse::mutable_to(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BindingEventResponse.to)
  return _internal_mutable_to()->Mutable(index);
}
inline void BindingEventResponse::set_to(int index, const std::string& value) {
  _internal_mutable_to()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BindingEventResponse.to)
}
inline void BindingEventResponse::set_to(int index, std::string&& value) {
  _internal_mutable_to()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BindingEventResponse.to)
}
inline void BindingEventResponse::set_to(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_to()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.BindingEventResponse.to)
}
inline void BindingEventResponse::set_to(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_to()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.BindingEventResponse.to)
}
inline void BindingEventResponse::set_to(int index, absl::string_view value) {
  _internal_mutable_to()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:dapr.proto.runtime.v1.BindingEventResponse.to)
}
inline void BindingEventResponse::add_to(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_to()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.BindingEventResponse.to)
}
inline void BindingEventResponse::add_to(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_to()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.BindingEventResponse.to)
}
inline void BindingEventResponse::add_to(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_to()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dapr.proto.runtime.v1.BindingEventResponse.to)
}
inline void BindingEventResponse::add_to(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_to()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dapr.proto.runtime.v1.BindingEventResponse.to)
}
inline void BindingEventResponse::add_to(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_to()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:dapr.proto.runtime.v1.BindingEventResponse.to)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
BindingEventResponse::to() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.BindingEventResponse.to)
  return _internal_to();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* BindingEventResponse::mutable_to() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.BindingEventResponse.to)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_to();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
BindingEventResponse::_internal_to() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.to_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
BindingEventResponse::_internal_mutable_to() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.to_;
}

// bytes data = 4;
inline void BindingEventResponse::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& BindingEventResponse::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BindingEventResponse.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BindingEventResponse::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BindingEventResponse.data)
}
inline std::string* BindingEventResponse::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BindingEventResponse.data)
  return _s;
}
inline const std::string& BindingEventResponse::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void BindingEventResponse::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* BindingEventResponse::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* BindingEventResponse::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.BindingEventResponse.data)
  return _impl_.data_.Release();
}
inline void BindingEventResponse::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.BindingEventResponse.data)
}

// .dapr.proto.runtime.v1.BindingEventResponse.BindingEventConcurrency concurrency = 5;
inline void BindingEventResponse::clear_concurrency() {
  _impl_.concurrency_ = 0;
}
inline ::dapr::proto::runtime::v1::BindingEventResponse_BindingEventConcurrency BindingEventResponse::concurrency() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BindingEventResponse.concurrency)
  return _internal_concurrency();
}
inline void BindingEventResponse::set_concurrency(::dapr::proto::runtime::v1::BindingEventResponse_BindingEventConcurrency value) {
  _internal_set_concurrency(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BindingEventResponse.concurrency)
}
inline ::dapr::proto::runtime::v1::BindingEventResponse_BindingEventConcurrency BindingEventResponse::_internal_concurrency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::dapr::proto::runtime::v1::BindingEventResponse_BindingEventConcurrency>(_impl_.concurrency_);
}
inline void BindingEventResponse::_internal_set_concurrency(::dapr::proto::runtime::v1::BindingEventResponse_BindingEventConcurrency value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.concurrency_ = value;
}

// -------------------------------------------------------------------

// ListTopicSubscriptionsResponse

// repeated .dapr.proto.runtime.v1.TopicSubscription subscriptions = 1;
inline int ListTopicSubscriptionsResponse::_internal_subscriptions_size() const {
  return _internal_subscriptions().size();
}
inline int ListTopicSubscriptionsResponse::subscriptions_size() const {
  return _internal_subscriptions_size();
}
inline void ListTopicSubscriptionsResponse::clear_subscriptions() {
  _internal_mutable_subscriptions()->Clear();
}
inline ::dapr::proto::runtime::v1::TopicSubscription* ListTopicSubscriptionsResponse::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.ListTopicSubscriptionsResponse.subscriptions)
  return _internal_mutable_subscriptions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicSubscription >*
ListTopicSubscriptionsResponse::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.ListTopicSubscriptionsResponse.subscriptions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_subscriptions();
}
inline const ::dapr::proto::runtime::v1::TopicSubscription& ListTopicSubscriptionsResponse::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.ListTopicSubscriptionsResponse.subscriptions)
    return _internal_subscriptions().Get(index);
}
inline ::dapr::proto::runtime::v1::TopicSubscription* ListTopicSubscriptionsResponse::add_subscriptions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::dapr::proto::runtime::v1::TopicSubscription* _add = _internal_mutable_subscriptions()->Add();
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.ListTopicSubscriptionsResponse.subscriptions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicSubscription >&
ListTopicSubscriptionsResponse::subscriptions() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.ListTopicSubscriptionsResponse.subscriptions)
  return _internal_subscriptions();
}
inline const ::google::protobuf::RepeatedPtrField<::dapr::proto::runtime::v1::TopicSubscription>&
ListTopicSubscriptionsResponse::_internal_subscriptions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.subscriptions_;
}
inline ::google::protobuf::RepeatedPtrField<::dapr::proto::runtime::v1::TopicSubscription>*
ListTopicSubscriptionsResponse::_internal_mutable_subscriptions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.subscriptions_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TopicSubscription

// string pubsub_name = 1;
inline void TopicSubscription::clear_pubsub_name() {
  _impl_.pubsub_name_.ClearToEmpty();
}
inline const std::string& TopicSubscription::pubsub_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicSubscription.pubsub_name)
  return _internal_pubsub_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicSubscription::set_pubsub_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pubsub_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicSubscription.pubsub_name)
}
inline std::string* TopicSubscription::mutable_pubsub_name() {
  std::string* _s = _internal_mutable_pubsub_name();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicSubscription.pubsub_name)
  return _s;
}
inline const std::string& TopicSubscription::_internal_pubsub_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pubsub_name_.Get();
}
inline void TopicSubscription::_internal_set_pubsub_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pubsub_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicSubscription::_internal_mutable_pubsub_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.pubsub_name_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicSubscription::release_pubsub_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicSubscription.pubsub_name)
  return _impl_.pubsub_name_.Release();
}
inline void TopicSubscription::set_allocated_pubsub_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pubsub_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pubsub_name_.IsDefault()) {
          _impl_.pubsub_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicSubscription.pubsub_name)
}

// string topic = 2;
inline void TopicSubscription::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& TopicSubscription::topic() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicSubscription.topic)
  return _internal_topic();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicSubscription::set_topic(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topic_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicSubscription.topic)
}
inline std::string* TopicSubscription::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicSubscription.topic)
  return _s;
}
inline const std::string& TopicSubscription::_internal_topic() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.topic_.Get();
}
inline void TopicSubscription::_internal_set_topic(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicSubscription::_internal_mutable_topic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.topic_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicSubscription::release_topic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicSubscription.topic)
  return _impl_.topic_.Release();
}
inline void TopicSubscription::set_allocated_topic(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topic_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.topic_.IsDefault()) {
          _impl_.topic_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicSubscription.topic)
}

// map<string, string> metadata = 3;
inline int TopicSubscription::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int TopicSubscription::metadata_size() const {
  return _internal_metadata_size();
}
inline void TopicSubscription::clear_metadata() {
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& TopicSubscription::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& TopicSubscription::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.TopicSubscription.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* TopicSubscription::_internal_mutable_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* TopicSubscription::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.TopicSubscription.metadata)
  return _internal_mutable_metadata();
}

// .dapr.proto.runtime.v1.TopicRoutes routes = 5;
inline bool TopicSubscription::has_routes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.routes_ != nullptr);
  return value;
}
inline void TopicSubscription::clear_routes() {
  if (_impl_.routes_ != nullptr) _impl_.routes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::dapr::proto::runtime::v1::TopicRoutes& TopicSubscription::_internal_routes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::dapr::proto::runtime::v1::TopicRoutes* p = _impl_.routes_;
  return p != nullptr ? *p : reinterpret_cast<const ::dapr::proto::runtime::v1::TopicRoutes&>(::dapr::proto::runtime::v1::_TopicRoutes_default_instance_);
}
inline const ::dapr::proto::runtime::v1::TopicRoutes& TopicSubscription::routes() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicSubscription.routes)
  return _internal_routes();
}
inline void TopicSubscription::unsafe_arena_set_allocated_routes(::dapr::proto::runtime::v1::TopicRoutes* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.routes_);
  }
  _impl_.routes_ = reinterpret_cast<::dapr::proto::runtime::v1::TopicRoutes*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.TopicSubscription.routes)
}
inline ::dapr::proto::runtime::v1::TopicRoutes* TopicSubscription::release_routes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dapr::proto::runtime::v1::TopicRoutes* released = _impl_.routes_;
  _impl_.routes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::dapr::proto::runtime::v1::TopicRoutes* TopicSubscription::unsafe_arena_release_routes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicSubscription.routes)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dapr::proto::runtime::v1::TopicRoutes* temp = _impl_.routes_;
  _impl_.routes_ = nullptr;
  return temp;
}
inline ::dapr::proto::runtime::v1::TopicRoutes* TopicSubscription::_internal_mutable_routes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.routes_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::runtime::v1::TopicRoutes>(GetArenaForAllocation());
    _impl_.routes_ = reinterpret_cast<::dapr::proto::runtime::v1::TopicRoutes*>(p);
  }
  return _impl_.routes_;
}
inline ::dapr::proto::runtime::v1::TopicRoutes* TopicSubscription::mutable_routes() {
  ::dapr::proto::runtime::v1::TopicRoutes* _msg = _internal_mutable_routes();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicSubscription.routes)
  return _msg;
}
inline void TopicSubscription::set_allocated_routes(::dapr::proto::runtime::v1::TopicRoutes* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::dapr::proto::runtime::v1::TopicRoutes*>(_impl_.routes_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::dapr::proto::runtime::v1::TopicRoutes*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.routes_ = reinterpret_cast<::dapr::proto::runtime::v1::TopicRoutes*>(value);
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicSubscription.routes)
}

// string dead_letter_topic = 6;
inline void TopicSubscription::clear_dead_letter_topic() {
  _impl_.dead_letter_topic_.ClearToEmpty();
}
inline const std::string& TopicSubscription::dead_letter_topic() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicSubscription.dead_letter_topic)
  return _internal_dead_letter_topic();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicSubscription::set_dead_letter_topic(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dead_letter_topic_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicSubscription.dead_letter_topic)
}
inline std::string* TopicSubscription::mutable_dead_letter_topic() {
  std::string* _s = _internal_mutable_dead_letter_topic();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicSubscription.dead_letter_topic)
  return _s;
}
inline const std::string& TopicSubscription::_internal_dead_letter_topic() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dead_letter_topic_.Get();
}
inline void TopicSubscription::_internal_set_dead_letter_topic(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dead_letter_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicSubscription::_internal_mutable_dead_letter_topic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.dead_letter_topic_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicSubscription::release_dead_letter_topic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicSubscription.dead_letter_topic)
  return _impl_.dead_letter_topic_.Release();
}
inline void TopicSubscription::set_allocated_dead_letter_topic(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dead_letter_topic_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dead_letter_topic_.IsDefault()) {
          _impl_.dead_letter_topic_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicSubscription.dead_letter_topic)
}

// .dapr.proto.runtime.v1.BulkSubscribeConfig bulk_subscribe = 7;
inline bool TopicSubscription::has_bulk_subscribe() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bulk_subscribe_ != nullptr);
  return value;
}
inline void TopicSubscription::clear_bulk_subscribe() {
  if (_impl_.bulk_subscribe_ != nullptr) _impl_.bulk_subscribe_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::dapr::proto::runtime::v1::BulkSubscribeConfig& TopicSubscription::_internal_bulk_subscribe() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::dapr::proto::runtime::v1::BulkSubscribeConfig* p = _impl_.bulk_subscribe_;
  return p != nullptr ? *p : reinterpret_cast<const ::dapr::proto::runtime::v1::BulkSubscribeConfig&>(::dapr::proto::runtime::v1::_BulkSubscribeConfig_default_instance_);
}
inline const ::dapr::proto::runtime::v1::BulkSubscribeConfig& TopicSubscription::bulk_subscribe() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicSubscription.bulk_subscribe)
  return _internal_bulk_subscribe();
}
inline void TopicSubscription::unsafe_arena_set_allocated_bulk_subscribe(::dapr::proto::runtime::v1::BulkSubscribeConfig* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bulk_subscribe_);
  }
  _impl_.bulk_subscribe_ = reinterpret_cast<::dapr::proto::runtime::v1::BulkSubscribeConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.runtime.v1.TopicSubscription.bulk_subscribe)
}
inline ::dapr::proto::runtime::v1::BulkSubscribeConfig* TopicSubscription::release_bulk_subscribe() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dapr::proto::runtime::v1::BulkSubscribeConfig* released = _impl_.bulk_subscribe_;
  _impl_.bulk_subscribe_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::dapr::proto::runtime::v1::BulkSubscribeConfig* TopicSubscription::unsafe_arena_release_bulk_subscribe() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicSubscription.bulk_subscribe)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dapr::proto::runtime::v1::BulkSubscribeConfig* temp = _impl_.bulk_subscribe_;
  _impl_.bulk_subscribe_ = nullptr;
  return temp;
}
inline ::dapr::proto::runtime::v1::BulkSubscribeConfig* TopicSubscription::_internal_mutable_bulk_subscribe() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.bulk_subscribe_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::runtime::v1::BulkSubscribeConfig>(GetArenaForAllocation());
    _impl_.bulk_subscribe_ = reinterpret_cast<::dapr::proto::runtime::v1::BulkSubscribeConfig*>(p);
  }
  return _impl_.bulk_subscribe_;
}
inline ::dapr::proto::runtime::v1::BulkSubscribeConfig* TopicSubscription::mutable_bulk_subscribe() {
  ::dapr::proto::runtime::v1::BulkSubscribeConfig* _msg = _internal_mutable_bulk_subscribe();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicSubscription.bulk_subscribe)
  return _msg;
}
inline void TopicSubscription::set_allocated_bulk_subscribe(::dapr::proto::runtime::v1::BulkSubscribeConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::dapr::proto::runtime::v1::BulkSubscribeConfig*>(_impl_.bulk_subscribe_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::dapr::proto::runtime::v1::BulkSubscribeConfig*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.bulk_subscribe_ = reinterpret_cast<::dapr::proto::runtime::v1::BulkSubscribeConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicSubscription.bulk_subscribe)
}

// -------------------------------------------------------------------

// TopicRoutes

// repeated .dapr.proto.runtime.v1.TopicRule rules = 1;
inline int TopicRoutes::_internal_rules_size() const {
  return _internal_rules().size();
}
inline int TopicRoutes::rules_size() const {
  return _internal_rules_size();
}
inline void TopicRoutes::clear_rules() {
  _internal_mutable_rules()->Clear();
}
inline ::dapr::proto::runtime::v1::TopicRule* TopicRoutes::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicRoutes.rules)
  return _internal_mutable_rules()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicRule >*
TopicRoutes::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.TopicRoutes.rules)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_rules();
}
inline const ::dapr::proto::runtime::v1::TopicRule& TopicRoutes::rules(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicRoutes.rules)
    return _internal_rules().Get(index);
}
inline ::dapr::proto::runtime::v1::TopicRule* TopicRoutes::add_rules() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::dapr::proto::runtime::v1::TopicRule* _add = _internal_mutable_rules()->Add();
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.TopicRoutes.rules)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicRule >&
TopicRoutes::rules() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.TopicRoutes.rules)
  return _internal_rules();
}
inline const ::google::protobuf::RepeatedPtrField<::dapr::proto::runtime::v1::TopicRule>&
TopicRoutes::_internal_rules() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rules_;
}
inline ::google::protobuf::RepeatedPtrField<::dapr::proto::runtime::v1::TopicRule>*
TopicRoutes::_internal_mutable_rules() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.rules_;
}

// string default = 2;
inline void TopicRoutes::clear_default_() {
  _impl_.default__.ClearToEmpty();
}
inline const std::string& TopicRoutes::default_() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicRoutes.default)
  return _internal_default_();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicRoutes::set_default_(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.default__.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicRoutes.default)
}
inline std::string* TopicRoutes::mutable_default_() {
  std::string* _s = _internal_mutable_default_();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicRoutes.default)
  return _s;
}
inline const std::string& TopicRoutes::_internal_default_() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.default__.Get();
}
inline void TopicRoutes::_internal_set_default_(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.default__.Set(value, GetArenaForAllocation());
}
inline std::string* TopicRoutes::_internal_mutable_default_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.default__.Mutable( GetArenaForAllocation());
}
inline std::string* TopicRoutes::release_default_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicRoutes.default)
  return _impl_.default__.Release();
}
inline void TopicRoutes::set_allocated_default_(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.default__.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.default__.IsDefault()) {
          _impl_.default__.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicRoutes.default)
}

// -------------------------------------------------------------------

// TopicRule

// string match = 1;
inline void TopicRule::clear_match() {
  _impl_.match_.ClearToEmpty();
}
inline const std::string& TopicRule::match() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicRule.match)
  return _internal_match();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicRule::set_match(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.match_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicRule.match)
}
inline std::string* TopicRule::mutable_match() {
  std::string* _s = _internal_mutable_match();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicRule.match)
  return _s;
}
inline const std::string& TopicRule::_internal_match() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.match_.Get();
}
inline void TopicRule::_internal_set_match(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.match_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicRule::_internal_mutable_match() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.match_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicRule::release_match() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicRule.match)
  return _impl_.match_.Release();
}
inline void TopicRule::set_allocated_match(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.match_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.match_.IsDefault()) {
          _impl_.match_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicRule.match)
}

// string path = 2;
inline void TopicRule::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& TopicRule::path() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicRule.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TopicRule::set_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicRule.path)
}
inline std::string* TopicRule::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicRule.path)
  return _s;
}
inline const std::string& TopicRule::_internal_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.path_.Get();
}
inline void TopicRule::_internal_set_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicRule::_internal_mutable_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* TopicRule::release_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicRule.path)
  return _impl_.path_.Release();
}
inline void TopicRule::set_allocated_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicRule.path)
}

// -------------------------------------------------------------------

// BulkSubscribeConfig

// bool enabled = 1;
inline void BulkSubscribeConfig::clear_enabled() {
  _impl_.enabled_ = false;
}
inline bool BulkSubscribeConfig::enabled() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BulkSubscribeConfig.enabled)
  return _internal_enabled();
}
inline void BulkSubscribeConfig::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BulkSubscribeConfig.enabled)
}
inline bool BulkSubscribeConfig::_internal_enabled() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.enabled_;
}
inline void BulkSubscribeConfig::_internal_set_enabled(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.enabled_ = value;
}

// int32 max_messages_count = 2;
inline void BulkSubscribeConfig::clear_max_messages_count() {
  _impl_.max_messages_count_ = 0;
}
inline ::int32_t BulkSubscribeConfig::max_messages_count() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BulkSubscribeConfig.max_messages_count)
  return _internal_max_messages_count();
}
inline void BulkSubscribeConfig::set_max_messages_count(::int32_t value) {
  _internal_set_max_messages_count(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BulkSubscribeConfig.max_messages_count)
}
inline ::int32_t BulkSubscribeConfig::_internal_max_messages_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_messages_count_;
}
inline void BulkSubscribeConfig::_internal_set_max_messages_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_messages_count_ = value;
}

// int32 max_await_duration_ms = 3;
inline void BulkSubscribeConfig::clear_max_await_duration_ms() {
  _impl_.max_await_duration_ms_ = 0;
}
inline ::int32_t BulkSubscribeConfig::max_await_duration_ms() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BulkSubscribeConfig.max_await_duration_ms)
  return _internal_max_await_duration_ms();
}
inline void BulkSubscribeConfig::set_max_await_duration_ms(::int32_t value) {
  _internal_set_max_await_duration_ms(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BulkSubscribeConfig.max_await_duration_ms)
}
inline ::int32_t BulkSubscribeConfig::_internal_max_await_duration_ms() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_await_duration_ms_;
}
inline void BulkSubscribeConfig::_internal_set_max_await_duration_ms(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_await_duration_ms_ = value;
}

// -------------------------------------------------------------------

// ListInputBindingsResponse

// repeated string bindings = 1;
inline int ListInputBindingsResponse::_internal_bindings_size() const {
  return _internal_bindings().size();
}
inline int ListInputBindingsResponse::bindings_size() const {
  return _internal_bindings_size();
}
inline void ListInputBindingsResponse::clear_bindings() {
  _internal_mutable_bindings()->Clear();
}
inline std::string* ListInputBindingsResponse::add_bindings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_bindings()->Add();
  // @@protoc_insertion_point(field_add_mutable:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
  return _s;
}
inline const std::string& ListInputBindingsResponse::bindings(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
  return _internal_bindings().Get(index);
}
inline std::string* ListInputBindingsResponse::mutable_bindings(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
  return _internal_mutable_bindings()->Mutable(index);
}
inline void ListInputBindingsResponse::set_bindings(int index, const std::string& value) {
  _internal_mutable_bindings()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
}
inline void ListInputBindingsResponse::set_bindings(int index, std::string&& value) {
  _internal_mutable_bindings()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
}
inline void ListInputBindingsResponse::set_bindings(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_bindings()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
}
inline void ListInputBindingsResponse::set_bindings(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_bindings()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
}
inline void ListInputBindingsResponse::set_bindings(int index, absl::string_view value) {
  _internal_mutable_bindings()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
}
inline void ListInputBindingsResponse::add_bindings(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_bindings()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
}
inline void ListInputBindingsResponse::add_bindings(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_bindings()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
}
inline void ListInputBindingsResponse::add_bindings(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_bindings()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
}
inline void ListInputBindingsResponse::add_bindings(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_bindings()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
}
inline void ListInputBindingsResponse::add_bindings(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_bindings()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ListInputBindingsResponse::bindings() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
  return _internal_bindings();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* ListInputBindingsResponse::mutable_bindings() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_bindings();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ListInputBindingsResponse::_internal_bindings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bindings_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ListInputBindingsResponse::_internal_mutable_bindings() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.bindings_;
}

// -------------------------------------------------------------------

// HealthCheckResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace runtime
}  // namespace proto
}  // namespace dapr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::dapr::proto::runtime::v1::TopicEventResponse_TopicEventResponseStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::dapr::proto::runtime::v1::TopicEventResponse_TopicEventResponseStatus>() {
  return ::dapr::proto::runtime::v1::TopicEventResponse_TopicEventResponseStatus_descriptor();
}
template <>
struct is_proto_enum<::dapr::proto::runtime::v1::BindingEventResponse_BindingEventConcurrency> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::dapr::proto::runtime::v1::BindingEventResponse_BindingEventConcurrency>() {
  return ::dapr::proto::runtime::v1::BindingEventResponse_BindingEventConcurrency_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto_2epb_2eh
