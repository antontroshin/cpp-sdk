// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dapr/proto/common/v1/common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/any.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto;
namespace dapr {
namespace proto {
namespace common {
namespace v1 {
class ConfigurationItem;
struct ConfigurationItemDefaultTypeInternal;
extern ConfigurationItemDefaultTypeInternal _ConfigurationItem_default_instance_;
class ConfigurationItem_MetadataEntry_DoNotUse;
struct ConfigurationItem_MetadataEntry_DoNotUseDefaultTypeInternal;
extern ConfigurationItem_MetadataEntry_DoNotUseDefaultTypeInternal _ConfigurationItem_MetadataEntry_DoNotUse_default_instance_;
class Etag;
struct EtagDefaultTypeInternal;
extern EtagDefaultTypeInternal _Etag_default_instance_;
class HTTPExtension;
struct HTTPExtensionDefaultTypeInternal;
extern HTTPExtensionDefaultTypeInternal _HTTPExtension_default_instance_;
class InvokeRequest;
struct InvokeRequestDefaultTypeInternal;
extern InvokeRequestDefaultTypeInternal _InvokeRequest_default_instance_;
class InvokeResponse;
struct InvokeResponseDefaultTypeInternal;
extern InvokeResponseDefaultTypeInternal _InvokeResponse_default_instance_;
class StateItem;
struct StateItemDefaultTypeInternal;
extern StateItemDefaultTypeInternal _StateItem_default_instance_;
class StateItem_MetadataEntry_DoNotUse;
struct StateItem_MetadataEntry_DoNotUseDefaultTypeInternal;
extern StateItem_MetadataEntry_DoNotUseDefaultTypeInternal _StateItem_MetadataEntry_DoNotUse_default_instance_;
class StateOptions;
struct StateOptionsDefaultTypeInternal;
extern StateOptionsDefaultTypeInternal _StateOptions_default_instance_;
class StreamPayload;
struct StreamPayloadDefaultTypeInternal;
extern StreamPayloadDefaultTypeInternal _StreamPayload_default_instance_;
}  // namespace v1
}  // namespace common
}  // namespace proto
}  // namespace dapr
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace dapr {
namespace proto {
namespace common {
namespace v1 {
enum HTTPExtension_Verb : int {
  HTTPExtension_Verb_NONE = 0,
  HTTPExtension_Verb_GET = 1,
  HTTPExtension_Verb_HEAD = 2,
  HTTPExtension_Verb_POST = 3,
  HTTPExtension_Verb_PUT = 4,
  HTTPExtension_Verb_DELETE = 5,
  HTTPExtension_Verb_CONNECT = 6,
  HTTPExtension_Verb_OPTIONS = 7,
  HTTPExtension_Verb_TRACE = 8,
  HTTPExtension_Verb_PATCH = 9,
  HTTPExtension_Verb_HTTPExtension_Verb_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  HTTPExtension_Verb_HTTPExtension_Verb_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool HTTPExtension_Verb_IsValid(int value);
constexpr HTTPExtension_Verb HTTPExtension_Verb_Verb_MIN = static_cast<HTTPExtension_Verb>(0);
constexpr HTTPExtension_Verb HTTPExtension_Verb_Verb_MAX = static_cast<HTTPExtension_Verb>(9);
constexpr int HTTPExtension_Verb_Verb_ARRAYSIZE = 9 + 1;
const ::google::protobuf::EnumDescriptor*
HTTPExtension_Verb_descriptor();
template <typename T>
const std::string& HTTPExtension_Verb_Name(T value) {
  static_assert(std::is_same<T, HTTPExtension_Verb>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Verb_Name().");
  return HTTPExtension_Verb_Name(static_cast<HTTPExtension_Verb>(value));
}
template <>
inline const std::string& HTTPExtension_Verb_Name(HTTPExtension_Verb value) {
  return ::google::protobuf::internal::NameOfDenseEnum<HTTPExtension_Verb_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool HTTPExtension_Verb_Parse(absl::string_view name, HTTPExtension_Verb* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HTTPExtension_Verb>(
      HTTPExtension_Verb_descriptor(), name, value);
}
enum StateOptions_StateConcurrency : int {
  StateOptions_StateConcurrency_CONCURRENCY_UNSPECIFIED = 0,
  StateOptions_StateConcurrency_CONCURRENCY_FIRST_WRITE = 1,
  StateOptions_StateConcurrency_CONCURRENCY_LAST_WRITE = 2,
  StateOptions_StateConcurrency_StateOptions_StateConcurrency_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StateOptions_StateConcurrency_StateOptions_StateConcurrency_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StateOptions_StateConcurrency_IsValid(int value);
constexpr StateOptions_StateConcurrency StateOptions_StateConcurrency_StateConcurrency_MIN = static_cast<StateOptions_StateConcurrency>(0);
constexpr StateOptions_StateConcurrency StateOptions_StateConcurrency_StateConcurrency_MAX = static_cast<StateOptions_StateConcurrency>(2);
constexpr int StateOptions_StateConcurrency_StateConcurrency_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
StateOptions_StateConcurrency_descriptor();
template <typename T>
const std::string& StateOptions_StateConcurrency_Name(T value) {
  static_assert(std::is_same<T, StateOptions_StateConcurrency>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StateConcurrency_Name().");
  return StateOptions_StateConcurrency_Name(static_cast<StateOptions_StateConcurrency>(value));
}
template <>
inline const std::string& StateOptions_StateConcurrency_Name(StateOptions_StateConcurrency value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StateOptions_StateConcurrency_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool StateOptions_StateConcurrency_Parse(absl::string_view name, StateOptions_StateConcurrency* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StateOptions_StateConcurrency>(
      StateOptions_StateConcurrency_descriptor(), name, value);
}
enum StateOptions_StateConsistency : int {
  StateOptions_StateConsistency_CONSISTENCY_UNSPECIFIED = 0,
  StateOptions_StateConsistency_CONSISTENCY_EVENTUAL = 1,
  StateOptions_StateConsistency_CONSISTENCY_STRONG = 2,
  StateOptions_StateConsistency_StateOptions_StateConsistency_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StateOptions_StateConsistency_StateOptions_StateConsistency_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StateOptions_StateConsistency_IsValid(int value);
constexpr StateOptions_StateConsistency StateOptions_StateConsistency_StateConsistency_MIN = static_cast<StateOptions_StateConsistency>(0);
constexpr StateOptions_StateConsistency StateOptions_StateConsistency_StateConsistency_MAX = static_cast<StateOptions_StateConsistency>(2);
constexpr int StateOptions_StateConsistency_StateConsistency_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
StateOptions_StateConsistency_descriptor();
template <typename T>
const std::string& StateOptions_StateConsistency_Name(T value) {
  static_assert(std::is_same<T, StateOptions_StateConsistency>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StateConsistency_Name().");
  return StateOptions_StateConsistency_Name(static_cast<StateOptions_StateConsistency>(value));
}
template <>
inline const std::string& StateOptions_StateConsistency_Name(StateOptions_StateConsistency value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StateOptions_StateConsistency_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool StateOptions_StateConsistency_Parse(absl::string_view name, StateOptions_StateConsistency* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StateOptions_StateConsistency>(
      StateOptions_StateConsistency_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class HTTPExtension final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.common.v1.HTTPExtension) */ {
 public:
  inline HTTPExtension() : HTTPExtension(nullptr) {}
  ~HTTPExtension() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HTTPExtension(::google::protobuf::internal::ConstantInitialized);

  HTTPExtension(const HTTPExtension& from);
  HTTPExtension(HTTPExtension&& from) noexcept
    : HTTPExtension() {
    *this = ::std::move(from);
  }

  inline HTTPExtension& operator=(const HTTPExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline HTTPExtension& operator=(HTTPExtension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HTTPExtension& default_instance() {
    return *internal_default_instance();
  }
  static inline const HTTPExtension* internal_default_instance() {
    return reinterpret_cast<const HTTPExtension*>(
               &_HTTPExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HTTPExtension& a, HTTPExtension& b) {
    a.Swap(&b);
  }
  inline void Swap(HTTPExtension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HTTPExtension* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HTTPExtension* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HTTPExtension>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HTTPExtension& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const HTTPExtension& from) {
    HTTPExtension::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HTTPExtension* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.common.v1.HTTPExtension";
  }
  protected:
  explicit HTTPExtension(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Verb = HTTPExtension_Verb;
  static constexpr Verb NONE = HTTPExtension_Verb_NONE;
  static constexpr Verb GET = HTTPExtension_Verb_GET;
  static constexpr Verb HEAD = HTTPExtension_Verb_HEAD;
  static constexpr Verb POST = HTTPExtension_Verb_POST;
  static constexpr Verb PUT = HTTPExtension_Verb_PUT;
  static constexpr Verb DELETE = HTTPExtension_Verb_DELETE;
  static constexpr Verb CONNECT = HTTPExtension_Verb_CONNECT;
  static constexpr Verb OPTIONS = HTTPExtension_Verb_OPTIONS;
  static constexpr Verb TRACE = HTTPExtension_Verb_TRACE;
  static constexpr Verb PATCH = HTTPExtension_Verb_PATCH;
  static inline bool Verb_IsValid(int value) {
    return HTTPExtension_Verb_IsValid(value);
  }
  static constexpr Verb Verb_MIN = HTTPExtension_Verb_Verb_MIN;
  static constexpr Verb Verb_MAX = HTTPExtension_Verb_Verb_MAX;
  static constexpr int Verb_ARRAYSIZE = HTTPExtension_Verb_Verb_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Verb_descriptor() {
    return HTTPExtension_Verb_descriptor();
  }
  template <typename T>
  static inline const std::string& Verb_Name(T value) {
    return HTTPExtension_Verb_Name(value);
  }
  static inline bool Verb_Parse(absl::string_view name, Verb* value) {
    return HTTPExtension_Verb_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kQuerystringFieldNumber = 2,
    kVerbFieldNumber = 1,
  };
  // string querystring = 2;
  void clear_querystring() ;
  const std::string& querystring() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_querystring(Arg_&& arg, Args_... args);
  std::string* mutable_querystring();
  PROTOBUF_NODISCARD std::string* release_querystring();
  void set_allocated_querystring(std::string* ptr);

  private:
  const std::string& _internal_querystring() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_querystring(
      const std::string& value);
  std::string* _internal_mutable_querystring();

  public:
  // .dapr.proto.common.v1.HTTPExtension.Verb verb = 1;
  void clear_verb() ;
  ::dapr::proto::common::v1::HTTPExtension_Verb verb() const;
  void set_verb(::dapr::proto::common::v1::HTTPExtension_Verb value);

  private:
  ::dapr::proto::common::v1::HTTPExtension_Verb _internal_verb() const;
  void _internal_set_verb(::dapr::proto::common::v1::HTTPExtension_Verb value);

  public:
  // @@protoc_insertion_point(class_scope:dapr.proto.common.v1.HTTPExtension)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 54, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr querystring_;
    int verb_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto;
};// -------------------------------------------------------------------

class InvokeRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.common.v1.InvokeRequest) */ {
 public:
  inline InvokeRequest() : InvokeRequest(nullptr) {}
  ~InvokeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InvokeRequest(::google::protobuf::internal::ConstantInitialized);

  InvokeRequest(const InvokeRequest& from);
  InvokeRequest(InvokeRequest&& from) noexcept
    : InvokeRequest() {
    *this = ::std::move(from);
  }

  inline InvokeRequest& operator=(const InvokeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvokeRequest& operator=(InvokeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvokeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvokeRequest* internal_default_instance() {
    return reinterpret_cast<const InvokeRequest*>(
               &_InvokeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InvokeRequest& a, InvokeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InvokeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvokeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvokeRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvokeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InvokeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const InvokeRequest& from) {
    InvokeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvokeRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.common.v1.InvokeRequest";
  }
  protected:
  explicit InvokeRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodFieldNumber = 1,
    kContentTypeFieldNumber = 3,
    kDataFieldNumber = 2,
    kHttpExtensionFieldNumber = 4,
  };
  // string method = 1;
  void clear_method() ;
  const std::string& method() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_method(Arg_&& arg, Args_... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* ptr);

  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(
      const std::string& value);
  std::string* _internal_mutable_method();

  public:
  // string content_type = 3;
  void clear_content_type() ;
  const std::string& content_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content_type(Arg_&& arg, Args_... args);
  std::string* mutable_content_type();
  PROTOBUF_NODISCARD std::string* release_content_type();
  void set_allocated_content_type(std::string* ptr);

  private:
  const std::string& _internal_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_type(
      const std::string& value);
  std::string* _internal_mutable_content_type();

  public:
  // .google.protobuf.Any data = 2;
  bool has_data() const;
  void clear_data() ;
  const ::google::protobuf::Any& data() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_data();
  ::google::protobuf::Any* mutable_data();
  void set_allocated_data(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_data(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_data();

  private:
  const ::google::protobuf::Any& _internal_data() const;
  ::google::protobuf::Any* _internal_mutable_data();

  public:
  // .dapr.proto.common.v1.HTTPExtension http_extension = 4;
  bool has_http_extension() const;
  void clear_http_extension() ;
  const ::dapr::proto::common::v1::HTTPExtension& http_extension() const;
  PROTOBUF_NODISCARD ::dapr::proto::common::v1::HTTPExtension* release_http_extension();
  ::dapr::proto::common::v1::HTTPExtension* mutable_http_extension();
  void set_allocated_http_extension(::dapr::proto::common::v1::HTTPExtension* value);
  void unsafe_arena_set_allocated_http_extension(::dapr::proto::common::v1::HTTPExtension* value);
  ::dapr::proto::common::v1::HTTPExtension* unsafe_arena_release_http_extension();

  private:
  const ::dapr::proto::common::v1::HTTPExtension& _internal_http_extension() const;
  ::dapr::proto::common::v1::HTTPExtension* _internal_mutable_http_extension();

  public:
  // @@protoc_insertion_point(class_scope:dapr.proto.common.v1.InvokeRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 2, 61, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr method_;
    ::google::protobuf::internal::ArenaStringPtr content_type_;
    ::google::protobuf::Any* data_;
    ::dapr::proto::common::v1::HTTPExtension* http_extension_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto;
};// -------------------------------------------------------------------

class InvokeResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.common.v1.InvokeResponse) */ {
 public:
  inline InvokeResponse() : InvokeResponse(nullptr) {}
  ~InvokeResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InvokeResponse(::google::protobuf::internal::ConstantInitialized);

  InvokeResponse(const InvokeResponse& from);
  InvokeResponse(InvokeResponse&& from) noexcept
    : InvokeResponse() {
    *this = ::std::move(from);
  }

  inline InvokeResponse& operator=(const InvokeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvokeResponse& operator=(InvokeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvokeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvokeResponse* internal_default_instance() {
    return reinterpret_cast<const InvokeResponse*>(
               &_InvokeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InvokeResponse& a, InvokeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InvokeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvokeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvokeResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvokeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InvokeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const InvokeResponse& from) {
    InvokeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvokeResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.common.v1.InvokeResponse";
  }
  protected:
  explicit InvokeResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentTypeFieldNumber = 2,
    kDataFieldNumber = 1,
  };
  // string content_type = 2;
  void clear_content_type() ;
  const std::string& content_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content_type(Arg_&& arg, Args_... args);
  std::string* mutable_content_type();
  PROTOBUF_NODISCARD std::string* release_content_type();
  void set_allocated_content_type(std::string* ptr);

  private:
  const std::string& _internal_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_type(
      const std::string& value);
  std::string* _internal_mutable_content_type();

  public:
  // .google.protobuf.Any data = 1;
  bool has_data() const;
  void clear_data() ;
  const ::google::protobuf::Any& data() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_data();
  ::google::protobuf::Any* mutable_data();
  void set_allocated_data(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_data(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_data();

  private:
  const ::google::protobuf::Any& _internal_data() const;
  ::google::protobuf::Any* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:dapr.proto.common.v1.InvokeResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 56, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr content_type_;
    ::google::protobuf::Any* data_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto;
};// -------------------------------------------------------------------

class StreamPayload final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.common.v1.StreamPayload) */ {
 public:
  inline StreamPayload() : StreamPayload(nullptr) {}
  ~StreamPayload() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StreamPayload(::google::protobuf::internal::ConstantInitialized);

  StreamPayload(const StreamPayload& from);
  StreamPayload(StreamPayload&& from) noexcept
    : StreamPayload() {
    *this = ::std::move(from);
  }

  inline StreamPayload& operator=(const StreamPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamPayload& operator=(StreamPayload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamPayload& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamPayload* internal_default_instance() {
    return reinterpret_cast<const StreamPayload*>(
               &_StreamPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StreamPayload& a, StreamPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamPayload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamPayload* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamPayload* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamPayload>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamPayload& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StreamPayload& from) {
    StreamPayload::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamPayload* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.common.v1.StreamPayload";
  }
  protected:
  explicit StreamPayload(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kSeqFieldNumber = 2,
  };
  // bytes data = 1;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // uint64 seq = 2;
  void clear_seq() ;
  ::uint64_t seq() const;
  void set_seq(::uint64_t value);

  private:
  ::uint64_t _internal_seq() const;
  void _internal_set_seq(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dapr.proto.common.v1.StreamPayload)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::uint64_t seq_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto;
};// -------------------------------------------------------------------

class StateItem_MetadataEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<StateItem_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::google::protobuf::internal::MapEntry<StateItem_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> SuperType;
  StateItem_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StateItem_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit StateItem_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const StateItem_MetadataEntry_DoNotUse& other);
  static const StateItem_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StateItem_MetadataEntry_DoNotUse*>(&_StateItem_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "dapr.proto.common.v1.StateItem.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "dapr.proto.common.v1.StateItem.MetadataEntry.value");
 }
  using ::google::protobuf::Message::MergeFrom;
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class StateItem final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.common.v1.StateItem) */ {
 public:
  inline StateItem() : StateItem(nullptr) {}
  ~StateItem() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StateItem(::google::protobuf::internal::ConstantInitialized);

  StateItem(const StateItem& from);
  StateItem(StateItem&& from) noexcept
    : StateItem() {
    *this = ::std::move(from);
  }

  inline StateItem& operator=(const StateItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateItem& operator=(StateItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StateItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const StateItem* internal_default_instance() {
    return reinterpret_cast<const StateItem*>(
               &_StateItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StateItem& a, StateItem& b) {
    a.Swap(&b);
  }
  inline void Swap(StateItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StateItem* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StateItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StateItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StateItem& from) {
    StateItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateItem* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.common.v1.StateItem";
  }
  protected:
  explicit StateItem(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 4,
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kEtagFieldNumber = 3,
    kOptionsFieldNumber = 5,
  };
  // map<string, string> metadata = 4;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // bytes value = 2;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // .dapr.proto.common.v1.Etag etag = 3;
  bool has_etag() const;
  void clear_etag() ;
  const ::dapr::proto::common::v1::Etag& etag() const;
  PROTOBUF_NODISCARD ::dapr::proto::common::v1::Etag* release_etag();
  ::dapr::proto::common::v1::Etag* mutable_etag();
  void set_allocated_etag(::dapr::proto::common::v1::Etag* value);
  void unsafe_arena_set_allocated_etag(::dapr::proto::common::v1::Etag* value);
  ::dapr::proto::common::v1::Etag* unsafe_arena_release_etag();

  private:
  const ::dapr::proto::common::v1::Etag& _internal_etag() const;
  ::dapr::proto::common::v1::Etag* _internal_mutable_etag();

  public:
  // .dapr.proto.common.v1.StateOptions options = 5;
  bool has_options() const;
  void clear_options() ;
  const ::dapr::proto::common::v1::StateOptions& options() const;
  PROTOBUF_NODISCARD ::dapr::proto::common::v1::StateOptions* release_options();
  ::dapr::proto::common::v1::StateOptions* mutable_options();
  void set_allocated_options(::dapr::proto::common::v1::StateOptions* value);
  void unsafe_arena_set_allocated_options(::dapr::proto::common::v1::StateOptions* value);
  ::dapr::proto::common::v1::StateOptions* unsafe_arena_release_options();

  private:
  const ::dapr::proto::common::v1::StateOptions& _internal_options() const;
  ::dapr::proto::common::v1::StateOptions* _internal_mutable_options();

  public:
  // @@protoc_insertion_point(class_scope:dapr.proto.common.v1.StateItem)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 3, 50, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<StateItem_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    ::dapr::proto::common::v1::Etag* etag_;
    ::dapr::proto::common::v1::StateOptions* options_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto;
};// -------------------------------------------------------------------

class Etag final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.common.v1.Etag) */ {
 public:
  inline Etag() : Etag(nullptr) {}
  ~Etag() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Etag(::google::protobuf::internal::ConstantInitialized);

  Etag(const Etag& from);
  Etag(Etag&& from) noexcept
    : Etag() {
    *this = ::std::move(from);
  }

  inline Etag& operator=(const Etag& from) {
    CopyFrom(from);
    return *this;
  }
  inline Etag& operator=(Etag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Etag& default_instance() {
    return *internal_default_instance();
  }
  static inline const Etag* internal_default_instance() {
    return reinterpret_cast<const Etag*>(
               &_Etag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Etag& a, Etag& b) {
    a.Swap(&b);
  }
  inline void Swap(Etag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Etag* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Etag* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Etag>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Etag& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Etag& from) {
    Etag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Etag* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.common.v1.Etag";
  }
  protected:
  explicit Etag(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:dapr.proto.common.v1.Etag)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 39, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto;
};// -------------------------------------------------------------------

class StateOptions final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.common.v1.StateOptions) */ {
 public:
  inline StateOptions() : StateOptions(nullptr) {}
  ~StateOptions() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StateOptions(::google::protobuf::internal::ConstantInitialized);

  StateOptions(const StateOptions& from);
  StateOptions(StateOptions&& from) noexcept
    : StateOptions() {
    *this = ::std::move(from);
  }

  inline StateOptions& operator=(const StateOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateOptions& operator=(StateOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StateOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const StateOptions* internal_default_instance() {
    return reinterpret_cast<const StateOptions*>(
               &_StateOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StateOptions& a, StateOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(StateOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StateOptions* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StateOptions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StateOptions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StateOptions& from) {
    StateOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateOptions* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.common.v1.StateOptions";
  }
  protected:
  explicit StateOptions(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using StateConcurrency = StateOptions_StateConcurrency;
  static constexpr StateConcurrency CONCURRENCY_UNSPECIFIED = StateOptions_StateConcurrency_CONCURRENCY_UNSPECIFIED;
  static constexpr StateConcurrency CONCURRENCY_FIRST_WRITE = StateOptions_StateConcurrency_CONCURRENCY_FIRST_WRITE;
  static constexpr StateConcurrency CONCURRENCY_LAST_WRITE = StateOptions_StateConcurrency_CONCURRENCY_LAST_WRITE;
  static inline bool StateConcurrency_IsValid(int value) {
    return StateOptions_StateConcurrency_IsValid(value);
  }
  static constexpr StateConcurrency StateConcurrency_MIN = StateOptions_StateConcurrency_StateConcurrency_MIN;
  static constexpr StateConcurrency StateConcurrency_MAX = StateOptions_StateConcurrency_StateConcurrency_MAX;
  static constexpr int StateConcurrency_ARRAYSIZE = StateOptions_StateConcurrency_StateConcurrency_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* StateConcurrency_descriptor() {
    return StateOptions_StateConcurrency_descriptor();
  }
  template <typename T>
  static inline const std::string& StateConcurrency_Name(T value) {
    return StateOptions_StateConcurrency_Name(value);
  }
  static inline bool StateConcurrency_Parse(absl::string_view name, StateConcurrency* value) {
    return StateOptions_StateConcurrency_Parse(name, value);
  }

  using StateConsistency = StateOptions_StateConsistency;
  static constexpr StateConsistency CONSISTENCY_UNSPECIFIED = StateOptions_StateConsistency_CONSISTENCY_UNSPECIFIED;
  static constexpr StateConsistency CONSISTENCY_EVENTUAL = StateOptions_StateConsistency_CONSISTENCY_EVENTUAL;
  static constexpr StateConsistency CONSISTENCY_STRONG = StateOptions_StateConsistency_CONSISTENCY_STRONG;
  static inline bool StateConsistency_IsValid(int value) {
    return StateOptions_StateConsistency_IsValid(value);
  }
  static constexpr StateConsistency StateConsistency_MIN = StateOptions_StateConsistency_StateConsistency_MIN;
  static constexpr StateConsistency StateConsistency_MAX = StateOptions_StateConsistency_StateConsistency_MAX;
  static constexpr int StateConsistency_ARRAYSIZE = StateOptions_StateConsistency_StateConsistency_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* StateConsistency_descriptor() {
    return StateOptions_StateConsistency_descriptor();
  }
  template <typename T>
  static inline const std::string& StateConsistency_Name(T value) {
    return StateOptions_StateConsistency_Name(value);
  }
  static inline bool StateConsistency_Parse(absl::string_view name, StateConsistency* value) {
    return StateOptions_StateConsistency_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kConcurrencyFieldNumber = 1,
    kConsistencyFieldNumber = 2,
  };
  // .dapr.proto.common.v1.StateOptions.StateConcurrency concurrency = 1;
  void clear_concurrency() ;
  ::dapr::proto::common::v1::StateOptions_StateConcurrency concurrency() const;
  void set_concurrency(::dapr::proto::common::v1::StateOptions_StateConcurrency value);

  private:
  ::dapr::proto::common::v1::StateOptions_StateConcurrency _internal_concurrency() const;
  void _internal_set_concurrency(::dapr::proto::common::v1::StateOptions_StateConcurrency value);

  public:
  // .dapr.proto.common.v1.StateOptions.StateConsistency consistency = 2;
  void clear_consistency() ;
  ::dapr::proto::common::v1::StateOptions_StateConsistency consistency() const;
  void set_consistency(::dapr::proto::common::v1::StateOptions_StateConsistency value);

  private:
  ::dapr::proto::common::v1::StateOptions_StateConsistency _internal_consistency() const;
  void _internal_set_consistency(::dapr::proto::common::v1::StateOptions_StateConsistency value);

  public:
  // @@protoc_insertion_point(class_scope:dapr.proto.common.v1.StateOptions)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int concurrency_;
    int consistency_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto;
};// -------------------------------------------------------------------

class ConfigurationItem_MetadataEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<ConfigurationItem_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::google::protobuf::internal::MapEntry<ConfigurationItem_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> SuperType;
  ConfigurationItem_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigurationItem_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ConfigurationItem_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ConfigurationItem_MetadataEntry_DoNotUse& other);
  static const ConfigurationItem_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ConfigurationItem_MetadataEntry_DoNotUse*>(&_ConfigurationItem_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "dapr.proto.common.v1.ConfigurationItem.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "dapr.proto.common.v1.ConfigurationItem.MetadataEntry.value");
 }
  using ::google::protobuf::Message::MergeFrom;
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationItem final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.common.v1.ConfigurationItem) */ {
 public:
  inline ConfigurationItem() : ConfigurationItem(nullptr) {}
  ~ConfigurationItem() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigurationItem(::google::protobuf::internal::ConstantInitialized);

  ConfigurationItem(const ConfigurationItem& from);
  ConfigurationItem(ConfigurationItem&& from) noexcept
    : ConfigurationItem() {
    *this = ::std::move(from);
  }

  inline ConfigurationItem& operator=(const ConfigurationItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationItem& operator=(ConfigurationItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigurationItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigurationItem* internal_default_instance() {
    return reinterpret_cast<const ConfigurationItem*>(
               &_ConfigurationItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ConfigurationItem& a, ConfigurationItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigurationItem* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigurationItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConfigurationItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ConfigurationItem& from) {
    ConfigurationItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationItem* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dapr.proto.common.v1.ConfigurationItem";
  }
  protected:
  explicit ConfigurationItem(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kValueFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // map<string, string> metadata = 3;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string value = 1;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // string version = 2;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* ptr);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // @@protoc_insertion_point(class_scope:dapr.proto.common.v1.ConfigurationItem)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 3, 1, 67, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::MapField<ConfigurationItem_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// HTTPExtension

// .dapr.proto.common.v1.HTTPExtension.Verb verb = 1;
inline void HTTPExtension::clear_verb() {
  _impl_.verb_ = 0;
}
inline ::dapr::proto::common::v1::HTTPExtension_Verb HTTPExtension::verb() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.HTTPExtension.verb)
  return _internal_verb();
}
inline void HTTPExtension::set_verb(::dapr::proto::common::v1::HTTPExtension_Verb value) {
  _internal_set_verb(value);
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.HTTPExtension.verb)
}
inline ::dapr::proto::common::v1::HTTPExtension_Verb HTTPExtension::_internal_verb() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::dapr::proto::common::v1::HTTPExtension_Verb>(_impl_.verb_);
}
inline void HTTPExtension::_internal_set_verb(::dapr::proto::common::v1::HTTPExtension_Verb value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.verb_ = value;
}

// string querystring = 2;
inline void HTTPExtension::clear_querystring() {
  _impl_.querystring_.ClearToEmpty();
}
inline const std::string& HTTPExtension::querystring() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.HTTPExtension.querystring)
  return _internal_querystring();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HTTPExtension::set_querystring(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.querystring_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.HTTPExtension.querystring)
}
inline std::string* HTTPExtension::mutable_querystring() {
  std::string* _s = _internal_mutable_querystring();
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.HTTPExtension.querystring)
  return _s;
}
inline const std::string& HTTPExtension::_internal_querystring() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.querystring_.Get();
}
inline void HTTPExtension::_internal_set_querystring(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.querystring_.Set(value, GetArenaForAllocation());
}
inline std::string* HTTPExtension::_internal_mutable_querystring() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.querystring_.Mutable( GetArenaForAllocation());
}
inline std::string* HTTPExtension::release_querystring() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.HTTPExtension.querystring)
  return _impl_.querystring_.Release();
}
inline void HTTPExtension::set_allocated_querystring(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.querystring_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.querystring_.IsDefault()) {
          _impl_.querystring_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.HTTPExtension.querystring)
}

// -------------------------------------------------------------------

// InvokeRequest

// string method = 1;
inline void InvokeRequest::clear_method() {
  _impl_.method_.ClearToEmpty();
}
inline const std::string& InvokeRequest::method() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.InvokeRequest.method)
  return _internal_method();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InvokeRequest::set_method(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.method_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.InvokeRequest.method)
}
inline std::string* InvokeRequest::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.InvokeRequest.method)
  return _s;
}
inline const std::string& InvokeRequest::_internal_method() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.method_.Get();
}
inline void InvokeRequest::_internal_set_method(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.method_.Set(value, GetArenaForAllocation());
}
inline std::string* InvokeRequest::_internal_mutable_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.method_.Mutable( GetArenaForAllocation());
}
inline std::string* InvokeRequest::release_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.InvokeRequest.method)
  return _impl_.method_.Release();
}
inline void InvokeRequest::set_allocated_method(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.method_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.method_.IsDefault()) {
          _impl_.method_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.InvokeRequest.method)
}

// .google.protobuf.Any data = 2;
inline bool InvokeRequest::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& InvokeRequest::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Any* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& InvokeRequest::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.InvokeRequest.data)
  return _internal_data();
}
inline void InvokeRequest::unsafe_arena_set_allocated_data(::google::protobuf::Any* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.common.v1.InvokeRequest.data)
}
inline ::google::protobuf::Any* InvokeRequest::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Any* InvokeRequest::unsafe_arena_release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.InvokeRequest.data)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* InvokeRequest::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaForAllocation());
    _impl_.data_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.data_;
}
inline ::google::protobuf::Any* InvokeRequest::mutable_data() {
  ::google::protobuf::Any* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.InvokeRequest.data)
  return _msg;
}
inline void InvokeRequest::set_allocated_data(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.data_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.InvokeRequest.data)
}

// string content_type = 3;
inline void InvokeRequest::clear_content_type() {
  _impl_.content_type_.ClearToEmpty();
}
inline const std::string& InvokeRequest::content_type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.InvokeRequest.content_type)
  return _internal_content_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InvokeRequest::set_content_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.InvokeRequest.content_type)
}
inline std::string* InvokeRequest::mutable_content_type() {
  std::string* _s = _internal_mutable_content_type();
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.InvokeRequest.content_type)
  return _s;
}
inline const std::string& InvokeRequest::_internal_content_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_type_.Get();
}
inline void InvokeRequest::_internal_set_content_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_type_.Set(value, GetArenaForAllocation());
}
inline std::string* InvokeRequest::_internal_mutable_content_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.content_type_.Mutable( GetArenaForAllocation());
}
inline std::string* InvokeRequest::release_content_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.InvokeRequest.content_type)
  return _impl_.content_type_.Release();
}
inline void InvokeRequest::set_allocated_content_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_type_.IsDefault()) {
          _impl_.content_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.InvokeRequest.content_type)
}

// .dapr.proto.common.v1.HTTPExtension http_extension = 4;
inline bool InvokeRequest::has_http_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.http_extension_ != nullptr);
  return value;
}
inline void InvokeRequest::clear_http_extension() {
  if (_impl_.http_extension_ != nullptr) _impl_.http_extension_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::dapr::proto::common::v1::HTTPExtension& InvokeRequest::_internal_http_extension() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::dapr::proto::common::v1::HTTPExtension* p = _impl_.http_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::dapr::proto::common::v1::HTTPExtension&>(::dapr::proto::common::v1::_HTTPExtension_default_instance_);
}
inline const ::dapr::proto::common::v1::HTTPExtension& InvokeRequest::http_extension() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.InvokeRequest.http_extension)
  return _internal_http_extension();
}
inline void InvokeRequest::unsafe_arena_set_allocated_http_extension(::dapr::proto::common::v1::HTTPExtension* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.http_extension_);
  }
  _impl_.http_extension_ = reinterpret_cast<::dapr::proto::common::v1::HTTPExtension*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.common.v1.InvokeRequest.http_extension)
}
inline ::dapr::proto::common::v1::HTTPExtension* InvokeRequest::release_http_extension() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dapr::proto::common::v1::HTTPExtension* released = _impl_.http_extension_;
  _impl_.http_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::dapr::proto::common::v1::HTTPExtension* InvokeRequest::unsafe_arena_release_http_extension() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.InvokeRequest.http_extension)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dapr::proto::common::v1::HTTPExtension* temp = _impl_.http_extension_;
  _impl_.http_extension_ = nullptr;
  return temp;
}
inline ::dapr::proto::common::v1::HTTPExtension* InvokeRequest::_internal_mutable_http_extension() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.http_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::common::v1::HTTPExtension>(GetArenaForAllocation());
    _impl_.http_extension_ = reinterpret_cast<::dapr::proto::common::v1::HTTPExtension*>(p);
  }
  return _impl_.http_extension_;
}
inline ::dapr::proto::common::v1::HTTPExtension* InvokeRequest::mutable_http_extension() {
  ::dapr::proto::common::v1::HTTPExtension* _msg = _internal_mutable_http_extension();
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.InvokeRequest.http_extension)
  return _msg;
}
inline void InvokeRequest::set_allocated_http_extension(::dapr::proto::common::v1::HTTPExtension* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::dapr::proto::common::v1::HTTPExtension*>(_impl_.http_extension_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::dapr::proto::common::v1::HTTPExtension*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.http_extension_ = reinterpret_cast<::dapr::proto::common::v1::HTTPExtension*>(value);
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.InvokeRequest.http_extension)
}

// -------------------------------------------------------------------

// InvokeResponse

// .google.protobuf.Any data = 1;
inline bool InvokeResponse::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& InvokeResponse::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Any* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& InvokeResponse::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.InvokeResponse.data)
  return _internal_data();
}
inline void InvokeResponse::unsafe_arena_set_allocated_data(::google::protobuf::Any* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.common.v1.InvokeResponse.data)
}
inline ::google::protobuf::Any* InvokeResponse::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Any* InvokeResponse::unsafe_arena_release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.InvokeResponse.data)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* InvokeResponse::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaForAllocation());
    _impl_.data_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.data_;
}
inline ::google::protobuf::Any* InvokeResponse::mutable_data() {
  ::google::protobuf::Any* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.InvokeResponse.data)
  return _msg;
}
inline void InvokeResponse::set_allocated_data(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.data_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.InvokeResponse.data)
}

// string content_type = 2;
inline void InvokeResponse::clear_content_type() {
  _impl_.content_type_.ClearToEmpty();
}
inline const std::string& InvokeResponse::content_type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.InvokeResponse.content_type)
  return _internal_content_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InvokeResponse::set_content_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.InvokeResponse.content_type)
}
inline std::string* InvokeResponse::mutable_content_type() {
  std::string* _s = _internal_mutable_content_type();
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.InvokeResponse.content_type)
  return _s;
}
inline const std::string& InvokeResponse::_internal_content_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_type_.Get();
}
inline void InvokeResponse::_internal_set_content_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_type_.Set(value, GetArenaForAllocation());
}
inline std::string* InvokeResponse::_internal_mutable_content_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.content_type_.Mutable( GetArenaForAllocation());
}
inline std::string* InvokeResponse::release_content_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.InvokeResponse.content_type)
  return _impl_.content_type_.Release();
}
inline void InvokeResponse::set_allocated_content_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_type_.IsDefault()) {
          _impl_.content_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.InvokeResponse.content_type)
}

// -------------------------------------------------------------------

// StreamPayload

// bytes data = 1;
inline void StreamPayload::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& StreamPayload::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.StreamPayload.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamPayload::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.StreamPayload.data)
}
inline std::string* StreamPayload::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.StreamPayload.data)
  return _s;
}
inline const std::string& StreamPayload::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void StreamPayload::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamPayload::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* StreamPayload::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.StreamPayload.data)
  return _impl_.data_.Release();
}
inline void StreamPayload::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.StreamPayload.data)
}

// uint64 seq = 2;
inline void StreamPayload::clear_seq() {
  _impl_.seq_ = ::uint64_t{0u};
}
inline ::uint64_t StreamPayload::seq() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.StreamPayload.seq)
  return _internal_seq();
}
inline void StreamPayload::set_seq(::uint64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.StreamPayload.seq)
}
inline ::uint64_t StreamPayload::_internal_seq() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.seq_;
}
inline void StreamPayload::_internal_set_seq(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.seq_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StateItem

// string key = 1;
inline void StateItem::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& StateItem::key() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.StateItem.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StateItem::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.StateItem.key)
}
inline std::string* StateItem::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.StateItem.key)
  return _s;
}
inline const std::string& StateItem::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void StateItem::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* StateItem::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* StateItem::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.StateItem.key)
  return _impl_.key_.Release();
}
inline void StateItem::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.StateItem.key)
}

// bytes value = 2;
inline void StateItem::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& StateItem::value() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.StateItem.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StateItem::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.StateItem.value)
}
inline std::string* StateItem::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.StateItem.value)
  return _s;
}
inline const std::string& StateItem::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void StateItem::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* StateItem::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* StateItem::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.StateItem.value)
  return _impl_.value_.Release();
}
inline void StateItem::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.StateItem.value)
}

// .dapr.proto.common.v1.Etag etag = 3;
inline bool StateItem::has_etag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.etag_ != nullptr);
  return value;
}
inline void StateItem::clear_etag() {
  if (_impl_.etag_ != nullptr) _impl_.etag_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::dapr::proto::common::v1::Etag& StateItem::_internal_etag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::dapr::proto::common::v1::Etag* p = _impl_.etag_;
  return p != nullptr ? *p : reinterpret_cast<const ::dapr::proto::common::v1::Etag&>(::dapr::proto::common::v1::_Etag_default_instance_);
}
inline const ::dapr::proto::common::v1::Etag& StateItem::etag() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.StateItem.etag)
  return _internal_etag();
}
inline void StateItem::unsafe_arena_set_allocated_etag(::dapr::proto::common::v1::Etag* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.etag_);
  }
  _impl_.etag_ = reinterpret_cast<::dapr::proto::common::v1::Etag*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.common.v1.StateItem.etag)
}
inline ::dapr::proto::common::v1::Etag* StateItem::release_etag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dapr::proto::common::v1::Etag* released = _impl_.etag_;
  _impl_.etag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::dapr::proto::common::v1::Etag* StateItem::unsafe_arena_release_etag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.StateItem.etag)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dapr::proto::common::v1::Etag* temp = _impl_.etag_;
  _impl_.etag_ = nullptr;
  return temp;
}
inline ::dapr::proto::common::v1::Etag* StateItem::_internal_mutable_etag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.etag_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::common::v1::Etag>(GetArenaForAllocation());
    _impl_.etag_ = reinterpret_cast<::dapr::proto::common::v1::Etag*>(p);
  }
  return _impl_.etag_;
}
inline ::dapr::proto::common::v1::Etag* StateItem::mutable_etag() {
  ::dapr::proto::common::v1::Etag* _msg = _internal_mutable_etag();
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.StateItem.etag)
  return _msg;
}
inline void StateItem::set_allocated_etag(::dapr::proto::common::v1::Etag* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::dapr::proto::common::v1::Etag*>(_impl_.etag_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::dapr::proto::common::v1::Etag*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.etag_ = reinterpret_cast<::dapr::proto::common::v1::Etag*>(value);
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.StateItem.etag)
}

// map<string, string> metadata = 4;
inline int StateItem::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int StateItem::metadata_size() const {
  return _internal_metadata_size();
}
inline void StateItem::clear_metadata() {
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& StateItem::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& StateItem::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.common.v1.StateItem.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* StateItem::_internal_mutable_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* StateItem::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.common.v1.StateItem.metadata)
  return _internal_mutable_metadata();
}

// .dapr.proto.common.v1.StateOptions options = 5;
inline bool StateItem::has_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.options_ != nullptr);
  return value;
}
inline void StateItem::clear_options() {
  if (_impl_.options_ != nullptr) _impl_.options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::dapr::proto::common::v1::StateOptions& StateItem::_internal_options() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::dapr::proto::common::v1::StateOptions* p = _impl_.options_;
  return p != nullptr ? *p : reinterpret_cast<const ::dapr::proto::common::v1::StateOptions&>(::dapr::proto::common::v1::_StateOptions_default_instance_);
}
inline const ::dapr::proto::common::v1::StateOptions& StateItem::options() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.StateItem.options)
  return _internal_options();
}
inline void StateItem::unsafe_arena_set_allocated_options(::dapr::proto::common::v1::StateOptions* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.options_);
  }
  _impl_.options_ = reinterpret_cast<::dapr::proto::common::v1::StateOptions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dapr.proto.common.v1.StateItem.options)
}
inline ::dapr::proto::common::v1::StateOptions* StateItem::release_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dapr::proto::common::v1::StateOptions* released = _impl_.options_;
  _impl_.options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::dapr::proto::common::v1::StateOptions* StateItem::unsafe_arena_release_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.StateItem.options)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dapr::proto::common::v1::StateOptions* temp = _impl_.options_;
  _impl_.options_ = nullptr;
  return temp;
}
inline ::dapr::proto::common::v1::StateOptions* StateItem::_internal_mutable_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.options_ == nullptr) {
    auto* p = CreateMaybeMessage<::dapr::proto::common::v1::StateOptions>(GetArenaForAllocation());
    _impl_.options_ = reinterpret_cast<::dapr::proto::common::v1::StateOptions*>(p);
  }
  return _impl_.options_;
}
inline ::dapr::proto::common::v1::StateOptions* StateItem::mutable_options() {
  ::dapr::proto::common::v1::StateOptions* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.StateItem.options)
  return _msg;
}
inline void StateItem::set_allocated_options(::dapr::proto::common::v1::StateOptions* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::dapr::proto::common::v1::StateOptions*>(_impl_.options_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::dapr::proto::common::v1::StateOptions*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.options_ = reinterpret_cast<::dapr::proto::common::v1::StateOptions*>(value);
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.StateItem.options)
}

// -------------------------------------------------------------------

// Etag

// string value = 1;
inline void Etag::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Etag::value() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.Etag.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Etag::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.Etag.value)
}
inline std::string* Etag::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.Etag.value)
  return _s;
}
inline const std::string& Etag::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void Etag::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* Etag::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* Etag::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.Etag.value)
  return _impl_.value_.Release();
}
inline void Etag::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.Etag.value)
}

// -------------------------------------------------------------------

// StateOptions

// .dapr.proto.common.v1.StateOptions.StateConcurrency concurrency = 1;
inline void StateOptions::clear_concurrency() {
  _impl_.concurrency_ = 0;
}
inline ::dapr::proto::common::v1::StateOptions_StateConcurrency StateOptions::concurrency() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.StateOptions.concurrency)
  return _internal_concurrency();
}
inline void StateOptions::set_concurrency(::dapr::proto::common::v1::StateOptions_StateConcurrency value) {
  _internal_set_concurrency(value);
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.StateOptions.concurrency)
}
inline ::dapr::proto::common::v1::StateOptions_StateConcurrency StateOptions::_internal_concurrency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::dapr::proto::common::v1::StateOptions_StateConcurrency>(_impl_.concurrency_);
}
inline void StateOptions::_internal_set_concurrency(::dapr::proto::common::v1::StateOptions_StateConcurrency value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.concurrency_ = value;
}

// .dapr.proto.common.v1.StateOptions.StateConsistency consistency = 2;
inline void StateOptions::clear_consistency() {
  _impl_.consistency_ = 0;
}
inline ::dapr::proto::common::v1::StateOptions_StateConsistency StateOptions::consistency() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.StateOptions.consistency)
  return _internal_consistency();
}
inline void StateOptions::set_consistency(::dapr::proto::common::v1::StateOptions_StateConsistency value) {
  _internal_set_consistency(value);
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.StateOptions.consistency)
}
inline ::dapr::proto::common::v1::StateOptions_StateConsistency StateOptions::_internal_consistency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::dapr::proto::common::v1::StateOptions_StateConsistency>(_impl_.consistency_);
}
inline void StateOptions::_internal_set_consistency(::dapr::proto::common::v1::StateOptions_StateConsistency value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.consistency_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ConfigurationItem

// string value = 1;
inline void ConfigurationItem::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& ConfigurationItem::value() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.ConfigurationItem.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConfigurationItem::set_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.ConfigurationItem.value)
}
inline std::string* ConfigurationItem::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.ConfigurationItem.value)
  return _s;
}
inline const std::string& ConfigurationItem::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_.Get();
}
inline void ConfigurationItem::_internal_set_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfigurationItem::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* ConfigurationItem::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.ConfigurationItem.value)
  return _impl_.value_.Release();
}
inline void ConfigurationItem::set_allocated_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.ConfigurationItem.value)
}

// string version = 2;
inline void ConfigurationItem::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& ConfigurationItem::version() const {
  // @@protoc_insertion_point(field_get:dapr.proto.common.v1.ConfigurationItem.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConfigurationItem::set_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dapr.proto.common.v1.ConfigurationItem.version)
}
inline std::string* ConfigurationItem::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:dapr.proto.common.v1.ConfigurationItem.version)
  return _s;
}
inline const std::string& ConfigurationItem::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_.Get();
}
inline void ConfigurationItem::_internal_set_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfigurationItem::_internal_mutable_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.version_.Mutable( GetArenaForAllocation());
}
inline std::string* ConfigurationItem::release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dapr.proto.common.v1.ConfigurationItem.version)
  return _impl_.version_.Release();
}
inline void ConfigurationItem::set_allocated_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.common.v1.ConfigurationItem.version)
}

// map<string, string> metadata = 3;
inline int ConfigurationItem::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int ConfigurationItem::metadata_size() const {
  return _internal_metadata_size();
}
inline void ConfigurationItem::clear_metadata() {
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& ConfigurationItem::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& ConfigurationItem::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.common.v1.ConfigurationItem.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* ConfigurationItem::_internal_mutable_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* ConfigurationItem::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.common.v1.ConfigurationItem.metadata)
  return _internal_mutable_metadata();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace common
}  // namespace proto
}  // namespace dapr


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::dapr::proto::common::v1::HTTPExtension_Verb> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::dapr::proto::common::v1::HTTPExtension_Verb>() {
  return ::dapr::proto::common::v1::HTTPExtension_Verb_descriptor();
}
template <>
struct is_proto_enum<::dapr::proto::common::v1::StateOptions_StateConcurrency> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::dapr::proto::common::v1::StateOptions_StateConcurrency>() {
  return ::dapr::proto::common::v1::StateOptions_StateConcurrency_descriptor();
}
template <>
struct is_proto_enum<::dapr::proto::common::v1::StateOptions_StateConsistency> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::dapr::proto::common::v1::StateOptions_StateConsistency>() {
  return ::dapr::proto::common::v1::StateOptions_StateConsistency_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dapr_2fproto_2fcommon_2fv1_2fcommon_2eproto_2epb_2eh
